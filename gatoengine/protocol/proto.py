# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: too fucking many of them
# plugin: python-betterproto
import builtins
from dataclasses import dataclass
from typing import (
    Dict,
    List,
)

import betterproto


class AbilityScalarType(betterproto.Enum):
    ABILITY_SCALAR_TYPE_UNKNOWN = 0
    ABILITY_SCALAR_TYPE_FLOAT = 1
    ABILITY_SCALAR_TYPE_INT = 2
    ABILITY_SCALAR_TYPE_BOOL = 3
    ABILITY_SCALAR_TYPE_TRIGGER = 4
    ABILITY_SCALAR_TYPE_STRING = 5
    ABILITY_SCALAR_TYPE_UINT = 6


class AbilityInvokeArgument(betterproto.Enum):
    ABILITY_INVOKE_ARGUMENT_NONE = 0
    ABILITY_INVOKE_ARGUMENT_META_MODIFIER_CHANGE = 1
    ABILITY_INVOKE_ARGUMENT_META_COMMAND_MODIFIER_CHANGE_REQUEST = 2
    ABILITY_INVOKE_ARGUMENT_META_SPECIAL_FLOAT_ARGUMENT = 3
    ABILITY_INVOKE_ARGUMENT_META_OVERRIDE_PARAM = 4
    ABILITY_INVOKE_ARGUMENT_META_CLEAR_OVERRIDE_PARAM = 5
    ABILITY_INVOKE_ARGUMENT_META_REINIT_OVERRIDEMAP = 6
    ABILITY_INVOKE_ARGUMENT_META_GLOBAL_FLOAT_VALUE = 7
    ABILITY_INVOKE_ARGUMENT_META_CLEAR_GLOBAL_FLOAT_VALUE = 8
    ABILITY_INVOKE_ARGUMENT_META_ABILITY_ELEMENT_STRENGTH = 9
    ABILITY_INVOKE_ARGUMENT_META_ADD_OR_GET_ABILITY_AND_TRIGGER = 10
    ABILITY_INVOKE_ARGUMENT_META_SET_KILLED_STATE = 11
    ABILITY_INVOKE_ARGUMENT_META_SET_ABILITY_TRIGGER = 12
    ABILITY_INVOKE_ARGUMENT_META_ADD_NEW_ABILITY = 13
    ABILITY_INVOKE_ARGUMENT_META_REMOVE_ABILITY = 14
    ABILITY_INVOKE_ARGUMENT_META_SET_MODIFIER_APPLY_ENTITY = 15
    ABILITY_INVOKE_ARGUMENT_META_MODIFIER_DURABILITY_CHANGE = 16
    ABILITY_INVOKE_ARGUMENT_META_ELEMENT_REACTION_VISUAL = 17
    ABILITY_INVOKE_ARGUMENT_META_SET_POSE_PARAMETER = 18
    ABILITY_INVOKE_ARGUMENT_META_UPDATE_BASE_REACTION_DAMAGE = 19
    ABILITY_INVOKE_ARGUMENT_META_TRIGGER_ELEMENT_REACTION = 20
    ABILITY_INVOKE_ARGUMENT_META_LOSE_HP = 21
    ABILITY_INVOKE_ARGUMENT_META_DURABILITY_IS_ZERO = 22
    ABILITY_INVOKE_ARGUMENT_ACTION_TRIGGER_ABILITY = 50
    ABILITY_INVOKE_ARGUMENT_ACTION_SET_CRASH_DAMAGE = 51
    ABILITY_INVOKE_ARGUMENT_ACTION_EFFECT = 52
    ABILITY_INVOKE_ARGUMENT_ACTION_SUMMON = 53
    ABILITY_INVOKE_ARGUMENT_ACTION_BLINK = 54
    ABILITY_INVOKE_ARGUMENT_ACTION_CREATE_GADGET = 55
    ABILITY_INVOKE_ARGUMENT_ACTION_APPLY_LEVEL_MODIFIER = 56
    ABILITY_INVOKE_ARGUMENT_ACTION_GENERATE_ELEM_BALL = 57
    ABILITY_INVOKE_ARGUMENT_ACTION_SET_RANDOM_OVERRIDE_MAP_VALUE = 58
    ABILITY_INVOKE_ARGUMENT_ACTION_SERVER_MONSTER_LOG = 59
    ABILITY_INVOKE_ARGUMENT_ACTION_CREATE_TILE = 60
    ABILITY_INVOKE_ARGUMENT_ACTION_DESTROY_TILE = 61
    ABILITY_INVOKE_ARGUMENT_ACTION_FIRE_AFTER_IMAGE = 62
    ABILITY_INVOKE_ARGUMENT_ACTION_DEDUCT_STAMINA = 63
    ABILITY_INVOKE_ARGUMENT_ACTION_HIT_EFFECT = 64
    ABILITY_INVOKE_ARGUMENT_ACTION_SET_BULLET_TRACK_TARGET = 65
    ABILITY_INVOKE_ARGUMENT_MIXIN_AVATAR_STEER_BY_CAMERA = 100
    ABILITY_INVOKE_ARGUMENT_MIXIN_MONSTER_DEFEND = 101
    ABILITY_INVOKE_ARGUMENT_MIXIN_WIND_ZONE = 102
    ABILITY_INVOKE_ARGUMENT_MIXIN_COST_STAMINA = 103
    ABILITY_INVOKE_ARGUMENT_MIXIN_ELITE_SHIELD = 104
    ABILITY_INVOKE_ARGUMENT_MIXIN_ELEMENT_SHIELD = 105
    ABILITY_INVOKE_ARGUMENT_MIXIN_GLOBAL_SHIELD = 106
    ABILITY_INVOKE_ARGUMENT_MIXIN_SHIELD_BAR = 107
    ABILITY_INVOKE_ARGUMENT_MIXIN_WIND_SEED_SPAWNER = 108
    ABILITY_INVOKE_ARGUMENT_MIXIN_DO_ACTION_BY_ELEMENT_REACTION = 109
    ABILITY_INVOKE_ARGUMENT_MIXIN_FIELD_ENTITY_COUNT_CHANGE = 110
    ABILITY_INVOKE_ARGUMENT_MIXIN_SCENE_PROP_SYNC = 111
    ABILITY_INVOKE_ARGUMENT_MIXIN_WIDGET_MP_SUPPORT = 112
    ABILITY_INVOKE_ARGUMENT_MIXIN_DO_ACTION_BY_SELF_MODIFIER_ELEMENT_DURABILITY_RATIO = (
        113
    )
    ABILITY_INVOKE_ARGUMENT_MIXIN_FIREWORKS_LAUNCHER = 114
    ABILITY_INVOKE_ARGUMENT_MIXIN_ATTACK_RESULT_CREATE_COUNT = 115
    ABILITY_INVOKE_ARGUMENT_MIXIN_UGC_TIME_CONTROL = 116
    ABILITY_INVOKE_ARGUMENT_MIXIN_AVATAR_COMBAT = 117
    ABILITY_INVOKE_ARGUMENT_MIXIN_DEATH_ZONE_REGIONAL_PLAY_MIXIN = 118
    ABILITY_INVOKE_ARGUMENT_MIXIN_UI_INTERACT = 119
    ABILITY_INVOKE_ARGUMENT_MIXIN_SHOOT_FROM_CAMERA = 120
    ABILITY_INVOKE_ARGUMENT_MIXIN_ERASE_BRICK_ACTIVITY = 121
    ABILITY_INVOKE_ARGUMENT_MIXIN_BREAKOUT = 122


class ForwardType(betterproto.Enum):
    FORWARD_TYPE_LOCAL = 0
    FORWARD_TYPE_TO_ALL = 1
    FORWARD_TYPE_TO_ALL_EXCEPT_CUR = 2
    FORWARD_TYPE_TO_HOST = 3
    FORWARD_TYPE_TO_ALL_GUEST = 4
    FORWARD_TYPE_TO_PEER = 5
    FORWARD_TYPE_TO_PEERS = 6
    FORWARD_TYPE_ONLY_SERVER = 7
    FORWARD_TYPE_TO_ALL_EXIST_EXCEPT_CUR = 8


class ModifierAction(betterproto.Enum):
    MODIFIER_ACTION_ADDED = 0
    MODIFIER_ACTION_REMOVED = 1


class BreakoutActionBreakoutActionType(betterproto.Enum):
    BREAKOUT_ACTION_TYPE_NONE = 0
    BREAKOUT_ACTION_TYPE_LAUNCH_BALL = 1
    BREAKOUT_ACTION_TYPE_DESTROY_BALL = 2
    BREAKOUT_ACTION_TYPE_FALLING_OBJECT = 3
    BREAKOUT_ACTION_TYPE_MISSILE = 4


class AbilityMixinBreakoutSyncType(betterproto.Enum):
    SYNC_TYPE_NONE = 0
    SYNC_TYPE_CREATE_CONNECT = 1
    SYNC_TYPE_START_GAME = 2
    SYNC_TYPE_PING = 3
    SYNC_TYPE_FINISH_GAME = 4
    SYNC_TYPE_SNAP_SHOT = 5
    SYNC_TYPE_ACTION = 6


class AccountType(betterproto.Enum):
    ACCOUNT_TYPE_MIHOYO_GUEST = 0
    ACCOUNT_TYPE_MIHOYO = 1
    ACCOUNT_TYPE_XIAOMI = 11
    ACCOUNT_TYPE_COOLPAD = 12
    ACCOUNT_TYPE_YYB = 13
    ACCOUNT_TYPE_BILI = 14
    ACCOUNT_TYPE_HUAWEI = 15
    ACCOUNT_TYPE_MEIZU = 16
    ACCOUNT_TYPE_360 = 17
    ACCOUNT_TYPE_OPPO = 18
    ACCOUNT_TYPE_VIVO = 19
    ACCOUNT_TYPE_UC = 20
    ACCOUNT_TYPE_WANDOJIA = 21
    ACCOUNT_TYPE_LENOVO = 22
    ACCOUNT_TYPE_JINLI = 23
    ACCOUNT_TYPE_BAIDU = 25
    ACCOUNT_TYPE_DANGLE = 26


class AchievementStatus(betterproto.Enum):
    STATUS_INVALID = 0
    STATUS_UNFINISHED = 1
    STATUS_FINISHED = 2
    STATUS_REWARD_TAKEN = 3


class ActionReasonType(betterproto.Enum):
    ACTION_REASON_TYPE_NONE = 0
    ACTION_REASON_TYPE_QUEST_ITEM = 1
    ACTION_REASON_TYPE_QUEST_REWARD = 2
    ACTION_REASON_TYPE_TRIFLE = 3
    ACTION_REASON_TYPE_SHOP = 4
    ACTION_REASON_TYPE_PLAYER_UPGRADE_REWARD = 5
    ACTION_REASON_TYPE_ADD_AVATAR = 6
    ACTION_REASON_TYPE_GADGET_ENV_ANIMAL = 7
    ACTION_REASON_TYPE_MONSTER_ENV_ANIMAL = 8
    ACTION_REASON_TYPE_COMPOUND = 9
    ACTION_REASON_TYPE_COOK = 10
    ACTION_REASON_TYPE_GATHER = 11
    ACTION_REASON_TYPE_MAIL_ATTACHMENT = 12
    ACTION_REASON_TYPE_CITY_LEVELUP_RETURN = 15
    ACTION_REASON_TYPE_CITY_LEVELUP_REWARD = 17
    ACTION_REASON_TYPE_AREA_EXPLORE_REWARD = 18
    ACTION_REASON_TYPE_UNLOCK_POINT_REWARD = 19
    ACTION_REASON_TYPE_DUNGEON_FIRST_PASS = 20
    ACTION_REASON_TYPE_DUNGEON_PASS = 21
    ACTION_REASON_TYPE_CHANGE_ELEM_TYPE = 23
    ACTION_REASON_TYPE_FETTER_OPEN = 25
    ACTION_REASON_TYPE_DAILY_TASK_SCORE = 26
    ACTION_REASON_TYPE_DAILY_TASK_HOST = 27
    ACTION_REASON_TYPE_RAND_TASK_HOST = 28
    ACTION_REASON_TYPE_EXPEDITION = 29
    ACTION_REASON_TYPE_GACHA = 30
    ACTION_REASON_TYPE_COMBINE = 31
    ACTION_REASON_TYPE_RAND_TASK_GUEST = 32
    ACTION_REASON_TYPE_DAILY_TASK_GUEST = 33
    ACTION_REASON_TYPE_FORGE_OUTPUT = 34
    ACTION_REASON_TYPE_FORGE_RETURN = 35
    ACTION_REASON_TYPE_INIT_AVATAR = 36
    ACTION_REASON_TYPE_MONSTER_DIE = 37
    ACTION_REASON_TYPE_GM = 38
    ACTION_REASON_TYPE_OPEN_CHEST = 39
    ACTION_REASON_TYPE_GADGET_DIE = 40
    ACTION_REASON_TYPE_MONSTER_CHANGE_HP = 41
    ACTION_REASON_TYPE_SUBFIELD_DROP = 42
    ACTION_REASON_TYPE_PUSH_TIPS_REWARD = 43
    ACTION_REASON_TYPE_ACTIVITY_MONSTER_DROP = 44
    ACTION_REASON_TYPE_ACTIVITY_GATHER = 45
    ACTION_REASON_TYPE_ACTIVITY_SUBFIELD_DROP = 46
    ACTION_REASON_TYPE_TOWER_SCHEDULE_REWARD = 47
    ACTION_REASON_TYPE_TOWER_FLOOR_STAR_REWARD = 48
    ACTION_REASON_TYPE_TOWER_FIRST_PASS_REWARD = 49
    ACTION_REASON_TYPE_TOWER_DAILY_REWARD = 50
    ACTION_REASON_TYPE_HIT_CLIENT_TRIVIAL_ENTITY = 51
    ACTION_REASON_TYPE_OPEN_WORLD_BOSS_CHEST = 52
    ACTION_REASON_TYPE_MATERIAL_DELETE_RETURN = 53
    ACTION_REASON_TYPE_SIGN_IN_REWARD = 54
    ACTION_REASON_TYPE_OPEN_BLOSSOM_CHEST = 55
    ACTION_REASON_TYPE_RECHARGE = 56
    ACTION_REASON_TYPE_BONUS_ACTIVITY_REWARD = 57
    ACTION_REASON_TYPE_TOWER_COMMEMORATIVE_REWARD = 58
    ACTION_REASON_TYPE_TOWER_SKIP_FLOOR_REWARD = 59
    ACTION_REASON_TYPE_RECHARGE_BONUS = 60
    ACTION_REASON_TYPE_RECHARGE_CARD = 61
    ACTION_REASON_TYPE_RECHARGE_CARD_DAILY = 62
    ACTION_REASON_TYPE_RECHARGE_CARD_REPLACE = 63
    ACTION_REASON_TYPE_RECHARGE_CARD_REPLACE_FREE = 64
    ACTION_REASON_TYPE_RECHARGE_PLAY_REPLACE = 65
    ACTION_REASON_TYPE_MP_PLAY_TAKE_REWARD = 66
    ACTION_REASON_TYPE_ACTIVITY_WATCHER = 67
    ACTION_REASON_TYPE_SALESMAN_DELIVER_ITEM = 68
    ACTION_REASON_TYPE_SALESMAN_REWARD = 69
    ACTION_REASON_TYPE_REBATE = 70
    ACTION_REASON_TYPE_MCOIN_EXCHANGE_HCOIN = 71
    ACTION_REASON_TYPE_DAILY_TASK_EXCHANGE_LEGENDARY_KEY = 72
    ACTION_REASON_TYPE_UNLOCK_PERSON_LINE = 73
    ACTION_REASON_TYPE_FETTER_LEVEL_REWARD = 74
    ACTION_REASON_TYPE_BUY_RESIN = 75
    ACTION_REASON_TYPE_RECHARGE_PACKAGE = 76
    ACTION_REASON_TYPE_DELIVERY_DAILY_REWARD = 77
    ACTION_REASON_TYPE_CITY_REPUTATION_LEVEL = 78
    ACTION_REASON_TYPE_CITY_REPUTATION_QUEST = 79
    ACTION_REASON_TYPE_CITY_REPUTATION_REQUEST = 80
    ACTION_REASON_TYPE_CITY_REPUTATION_EXPLORE = 81
    ACTION_REASON_TYPE_OFFERGING_LEVEL = 82
    ACTION_REASON_TYPE_ROUTINE_HOST = 83
    ACTION_REASON_TYPE_ROUTINE_GUEST = 84
    ACTION_REASON_TYPE_TREASURE_MAP_SPOT_TOKEN = 89
    ACTION_REASON_TYPE_TREASURE_MAP_BONUS_LEVEL_REWARD = 90
    ACTION_REASON_TYPE_TREASURE_MAP_MP_REWARD = 91
    ACTION_REASON_TYPE_CONVERT = 92
    ACTION_REASON_TYPE_OVERFLOW_TRANSFORM = 93
    ACTION_REASON_TYPE_ACTIVITY_AVATAR_SELECTION_REWARD = 96
    ACTION_REASON_TYPE_ACTIVITY_WATCHER_BATCH = 97
    ACTION_REASON_TYPE_HIT_TREE_DROP = 98
    ACTION_REASON_TYPE_GET_HOME_LEVELUP_REWARD = 99
    ACTION_REASON_TYPE_HOME_DEFAULT_FURNITURE = 100
    ACTION_REASON_TYPE_ACTIVITY_COND = 101
    ACTION_REASON_TYPE_BATTLE_PASS_NOTIFY = 102
    ACTION_REASON_TYPE_RELIQUARY_DECOMPOSE = 103
    ACTION_REASON_TYPE_RECHARGE_GOOGLE_GIFT_GARD = 104
    ACTION_REASON_TYPE_RECHARGE_CONCERT_PRODUCT = 105
    ACTION_REASON_TYPE_RECHARGE_CONCERT_PRODUCT_REPLACE = 106
    ACTION_REASON_TYPE_SEND_CONCERT_PRODUCT_BY_MUIP = 107
    ACTION_REASON_TYPE_RECHARGE_APPLE_GIFT_GARD = 108
    ACTION_REASON_TYPE_RECHARGE_PSN_COMPENSATION_PRODUCT = 109
    ACTION_REASON_TYPE_COMPOUND_BOOST = 110
    ACTION_REASON_TYPE_WOOD_EXCHANGE = 111
    ACTION_REASON_TYPE_AVATAR_RENAME_AUDIT_FAILED = 112
    ACTION_REASON_TYPE_AVATAR_RENAME_RESET = 113
    ACTION_REASON_TYPE_PLAYER_USE_ITEM = 1001
    ACTION_REASON_TYPE_DROP_ITEM = 1002
    ACTION_REASON_TYPE_WEAPON_UPGRADE = 1011
    ACTION_REASON_TYPE_WEAPON_PROMOTE = 1012
    ACTION_REASON_TYPE_WEAPON_AWAKEN = 1013
    ACTION_REASON_TYPE_RELIC_UPGRADE = 1014
    ACTION_REASON_TYPE_ABILITY = 1015
    ACTION_REASON_TYPE_DUNGEON_STATUE_DROP = 1016
    ACTION_REASON_TYPE_OFFLINE_MSG = 1017
    ACTION_REASON_TYPE_AVATAR_UPGRADE = 1018
    ACTION_REASON_TYPE_AVATAR_PROMOTE = 1019
    ACTION_REASON_TYPE_QUEST_ACTION = 1021
    ACTION_REASON_TYPE_CITY_LEVELUP = 1022
    ACTION_REASON_TYPE_UPGRADE_SKILL = 1024
    ACTION_REASON_TYPE_UNLOCK_TALENT = 1025
    ACTION_REASON_TYPE_UPGRADE_PROUD_SKILL = 1026
    ACTION_REASON_TYPE_PLAYER_LEVEL_LIMIT_UP = 1027
    ACTION_REASON_TYPE_DUNGEON_DAILY = 1028
    ACTION_REASON_TYPE_ITEM_GIVING = 1030
    ACTION_REASON_TYPE_FORGE_COST = 1031
    ACTION_REASON_TYPE_INVESTIGATION_REWARD = 1032
    ACTION_REASON_TYPE_INVESTIGATION_TARGET_REWARD = 1033
    ACTION_REASON_TYPE_GADGET_INTERACT = 1034
    ACTION_REASON_TYPE_SEA_LAMP_CI_MATERIAL = 1036
    ACTION_REASON_TYPE_SEA_LAMP_CONTRIBUTION_REWARD = 1037
    ACTION_REASON_TYPE_SEA_LAMP_PHASE_REWARD = 1038
    ACTION_REASON_TYPE_SEA_LAMP_FLY_LAMP = 1039
    ACTION_REASON_TYPE_AUTO_RECOVER = 1040
    ACTION_REASON_TYPE_ACTIVITY_EXPIRE_ITEM = 1041
    ACTION_REASON_TYPE_SUB_COIN_NEGATIVE = 1042
    ACTION_REASON_TYPE_BARGAIN_DEDUCT = 1043
    ACTION_REASON_TYPE_BATTLE_PASS_PAID_REWARD = 1044
    ACTION_REASON_TYPE_BATTLE_PASS_LEVEL_REWARD = 1045
    ACTION_REASON_TYPE_TRIAL_AVATAR_ACTIVITY_FIRST_PASS_REWARD = 1046
    ACTION_REASON_TYPE_BUY_BATTLE_PASS_LEVEL = 1047
    ACTION_REASON_TYPE_GRANT_BIRTHDAY_BENEFIT = 1048
    ACTION_REASON_TYPE_ACHIEVEMENT_REWARD = 1049
    ACTION_REASON_TYPE_ACHIEVEMENT_GOAL_REWARD = 1050
    ACTION_REASON_TYPE_FIRST_SHARE_TO_SOCIAL_NETWORK = 1051
    ACTION_REASON_TYPE_DESTROY_MATERIAL = 1052
    ACTION_REASON_TYPE_CODEX_LEVELUP_REWARD = 1053
    ACTION_REASON_TYPE_HUNTING_OFFER_REWARD = 1054
    ACTION_REASON_TYPE_USE_WIDGET_ANCHOR_POINT = 1055
    ACTION_REASON_TYPE_USE_WIDGET_BONFIRE = 1056
    ACTION_REASON_TYPE_UNGRADE_WEAPON_RETURN_MATERIAL = 1057
    ACTION_REASON_TYPE_USE_WIDGET_ONEOFF_GATHER_POINT_DETECTOR = 1058
    ACTION_REASON_TYPE_USE_WIDGET_CLIENT_COLLECTOR = 1059
    ACTION_REASON_TYPE_USE_WIDGET_CLIENT_DETECTOR = 1060
    ACTION_REASON_TYPE_TAKE_GENERAL_REWARD = 1061
    ACTION_REASON_TYPE_ASTER_TAKE_SPECIAL_REWARD = 1062
    ACTION_REASON_TYPE_REMOVE_CODEX_BOOK = 1063
    ACTION_REASON_TYPE_OFFERING_ITEM = 1064
    ACTION_REASON_TYPE_USE_WIDGET_GADGET_BUILDER = 1065
    ACTION_REASON_TYPE_EFFIGY_FIRST_PASS_REWARD = 1066
    ACTION_REASON_TYPE_EFFIGY_REWARD = 1067
    ACTION_REASON_TYPE_REUNION_FIRST_GIFT_REWARD = 1068
    ACTION_REASON_TYPE_REUNION_SIGN_IN_REWARD = 1069
    ACTION_REASON_TYPE_REUNION_WATCHER_REWARD = 1070
    ACTION_REASON_TYPE_SALESMAN_MP_REWARD = 1071
    ACTION_REASON_TYPE_AVATAR_PROMOTE_REWARD = 1072
    ACTION_REASON_TYPE_BLESSING_REDEEM_REWARD = 1073
    ACTION_REASON_TYPE_MIRACLE_RING_REWARD = 1074
    ACTION_REASON_TYPE_EXPEDITION_REWARD = 1075
    ACTION_REASON_TYPE_TREASURE_MAP_REMOVE_DETECTOR = 1076
    ACTION_REASON_TYPE_MECHANICUS_DUNGEON_TICKET = 1077
    ACTION_REASON_TYPE_MECHANICUS_LEVELUP_GEAR = 1078
    ACTION_REASON_TYPE_MECHANICUS_BATTLE_SETTLE = 1079
    ACTION_REASON_TYPE_REGION_SEARCH_REWARD = 1080
    ACTION_REASON_TYPE_UNLOCK_COOP_CHAPTER = 1081
    ACTION_REASON_TYPE_TAKE_COOP_REWARD = 1082
    ACTION_REASON_TYPE_FLEUR_FAIR_DUNGEON_REWARD = 1083
    ACTION_REASON_TYPE_ACTIVITY_SCORE = 1084
    ACTION_REASON_TYPE_CHANNELLER_SLAB_ONEOFF_DUNGEON_REWARD = 1085
    ACTION_REASON_TYPE_FURNITURE_MAKE_START = 1086
    ACTION_REASON_TYPE_FURNITURE_MAKE_TAKE = 1087
    ACTION_REASON_TYPE_FURNITURE_MAKE_CANCEL = 1088
    ACTION_REASON_TYPE_FURNITURE_MAKE_FAST_FINISH = 1089
    ACTION_REASON_TYPE_CHANNELLER_SLAB_LOOP_DUNGEON_FIRST_PASS_REWARD = 1090
    ACTION_REASON_TYPE_CHANNELLER_SLAB_LOOP_DUNGEON_SCORE_REWARD = 1091
    ACTION_REASON_TYPE_HOME_LIMITED_SHOP_BUY = 1092
    ACTION_REASON_TYPE_HOME_COIN_COLLECT = 1093
    ACTION_REASON_TYPE_SUMMER_TIME_SENTRY_TOWER_REWARD = 1094
    ACTION_REASON_TYPE_SUMMER_TIME_SPRINT_BOAT_REWARD = 1095
    ACTION_REASON_TYPE_SUMMER_TIME_BOSS_REWARD = 1096
    ACTION_REASON_TYPE_SUMMER_TIME_BOMB_REWARD = 1097
    ACTION_REASON_TYPE_HOME_FETTER_COLLECT = 1098
    ACTION_REASON_TYPE_ECHO_SHELL_REWARD = 1099
    ACTION_REASON_TYPE_HOME_EVENT_REWARD = 1100
    ACTION_REASON_TYPE_BLITZ_RUSH_DUNGEON_REWARD = 1101
    ACTION_REASON_TYPE_FURNITURE_MAKE_RETURN = 1102
    ACTION_REASON_TYPE_HOME_PLANT_BOX_GATHER = 1103
    ACTION_REASON_TYPE_HOME_PLANT_SEED = 1104
    ACTION_REASON_TYPE_HOME_PLANT_GATHER = 1105
    ACTION_REASON_TYPE_CHESS_DUNGEON_REWARD = 1106
    ACTION_REASON_TYPE_GROUP_LINK_BUNDLE_FINISH = 1107
    ACTION_REASON_TYPE_LUNA_RITE_SACRIFICE = 1108
    ACTION_REASON_TYPE_LUNA_RITE_TAKE_SACRIFICE_REWARD = 1109
    ACTION_REASON_TYPE_FISH_BITE = 1110
    ACTION_REASON_TYPE_FISH_SUCC = 1111
    ACTION_REASON_TYPE_PLANT_FLOWER_REWARD = 1112
    ACTION_REASON_TYPE_PLANT_FLOWER_DELIVER_ITEM = 1113
    ACTION_REASON_TYPE_PLANT_FLOWER_GIVE_FLOWER = 1114
    ACTION_REASON_TYPE_PLANT_FLOWER_RECV_FLOWER = 1115
    ACTION_REASON_TYPE_ROGUE_CHALLENGE_SETTLE = 1116
    ACTION_REASON_TYPE_ROGUE_TAKE_FIRST_PASS_REWARD = 1117
    ACTION_REASON_TYPE_ROGUE_UPGRADE_SHIKIGAMI = 1118
    ACTION_REASON_TYPE_ROGUE_REFRESH_CARD = 1119
    ACTION_REASON_TYPE_USE_WIDGET_CAPTURE_ANIMAL = 1120
    ACTION_REASON_TYPE_CAPTURE_ANIMAL_SUCC = 1121
    ACTION_REASON_TYPE_SNOW_DRIFTS = 1122
    ACTION_REASON_TYPE_WINTER_CAMP_GIVE_ITEM = 1123
    ACTION_REASON_TYPE_WINTER_CAMP_RECV_ITEM = 1124
    ACTION_REASON_TYPE_WINTER_CAMP_EXPLORE_REWARD = 1125
    ACTION_REASON_TYPE_WINTER_CAMP_BATTLE_REWARD = 1126
    ACTION_REASON_TYPE_LANTERN_RITE_SKIN_REWARD = 1127
    ACTION_REASON_TYPE_LANTERN_RITE_DUNGEON_REWARD = 1128
    ACTION_REASON_TYPE_MICHIAE_MATSURI_DARK_CHALLENGE_REWARD = 1129
    ACTION_REASON_TYPE_MICHIAE_MATSURI_UNLOCK_CRYSTAL_SKILL = 1130
    ACTION_REASON_TYPE_LANTERN_RITE_GROUP_REWARD = 1131
    ACTION_REASON_TYPE_COSTUME_DEFAULT_UNLOCK = 1132
    ACTION_REASON_TYPE_SPICE_ACTIVITY_MAKE_SPICE = 1133
    ACTION_REASON_TYPE_SPICE_ACTIVITY_PROCESS_FOOD = 1134
    ACTION_REASON_TYPE_SPICE_ADD_AVATAR_FETTER = 1135
    ACTION_REASON_TYPE_GACHA_ACTIVITY_ROBOT_REWARD = 1136
    ACTION_REASON_TYPE_GIVING_TAKE_BACK = 1137
    ACTION_REASON_TYPE_SUMMER_TIME_V2_DUNGEON_REWARD = 1138
    ACTION_REASON_TYPE_GRAVEN_INNOCENCE_CAMP_REWARD = 1139
    ACTION_REASON_TYPE_TREASURE_SEELIE_CHEST_REWARD = 1140
    ACTION_REASON_TYPE_GCG_TAVERN_CHALLENGE_UNLOCK_CHARACTER = 1141
    ACTION_REASON_TYPE_GCG_LEVEL_REWARD = 1143
    ACTION_REASON_TYPE_GCG_CHALLENGE_FINISH = 1144
    ACTION_REASON_TYPE_VINTAGE_MARKET_DEAL = 1145
    ACTION_REASON_TYPE_VINTAGE_MARKET_BARGAIN = 1146
    ACTION_REASON_TYPE_VINTAGE_MARKET_STORE = 1147
    ACTION_REASON_TYPE_VINTAGE_PRESENT = 1148
    ACTION_REASON_TYPE_VINTAGE_OPEN_STORE = 1149
    ACTION_REASON_TYPE_VINTAGE_STORE_UNLOCK_SLOT = 1150
    ACTION_REASON_TYPE_VINTAGE_STORE_NPC_EVENT = 1151
    ACTION_REASON_TYPE_ROCK_BOARD_EXPLORE_REWARD = 1152
    ACTION_REASON_TYPE_VINTAGE_STORE_DIVIDEND = 1153
    ACTION_REASON_TYPE_AVATAR_RENAME = 1154
    ACTION_REASON_TYPE_GCG_FINISH_LEVEL_QUEST = 1155
    ACTION_REASON_TYPE_GCG_PROFICIENCY_REWARD = 1156


class ActivityPushTipsState(betterproto.Enum):
    ACTIVITY_PUSH_TIPS_STATE_NONE = 0
    ACTIVITY_PUSH_TIPS_STATE_START = 1
    ACTIVITY_PUSH_TIPS_STATE_READ = 2


class AsterLittleStageState(betterproto.Enum):
    ASTER_LITTLE_STAGE_STATE_NONE = 0
    ASTER_LITTLE_STAGE_STATE_UNSTARTED = 1
    ASTER_LITTLE_STAGE_STATE_STARTED = 2
    ASTER_LITTLE_STAGE_STATE_FINISHED = 3


class ExpeditionState(betterproto.Enum):
    EXPEDITION_STATE_NONE = 0
    EXPEDITION_STATE_STARTED = 1
    EXPEDITION_STATE_FINISHED = 2
    EXPEDITION_STATE_REWARDED = 3
    EXPEDITION_STATE_LOCKED = 4


class ClientInputType(betterproto.Enum):
    CLIENT_INPUT_TYPE_NONE = 0
    CLIENT_INPUT_TYPE_KEYBOARD_MOUSE = 1
    CLIENT_INPUT_TYPE_GAMEPAD = 2
    CLIENT_INPUT_TYPE_TOUCH_PANEL = 3


class LunaRiteHintStatusType(betterproto.Enum):
    LUNA_RITE_HINT_STATUS_TYPE_DEFAULT = 0
    LUNA_RITE_HINT_STATUS_TYPE_NO_COUNT = 1
    LUNA_RITE_HINT_STATUS_TYPE_FINISH = 2


class LunaRiteHintPointType(betterproto.Enum):
    LUNA_RITE_HINT_POINT_TYPE_NONE = 0
    LUNA_RITE_HINT_POINT_TYPE_RUNE = 1
    LUNA_RITE_HINT_POINT_TYPE_CHEST = 2


class AvatarType(betterproto.Enum):
    AVATAR_TYPE_NONE = 0
    AVATAR_TYPE_FORMAL = 1
    AVATAR_TYPE_TRIAL = 2
    AVATAR_TYPE_MIRROR = 3


class SalesmanStatusType(betterproto.Enum):
    SALESMAN_STATUS_TYPE_NONE = 0
    SALESMAN_STATUS_TYPE_UNSTARTED = 1
    SALESMAN_STATUS_TYPE_STARTED = 2
    SALESMAN_STATUS_TYPE_DELIVERED = 3


class AranaraCollectionState(betterproto.Enum):
    ARANARA_COLLECTION_STATE_NONE = 0
    ARANARA_COLLECTION_STATE_COLLECTABLE = 1
    ARANARA_COLLECTION_STATE_COLLECTED = 2
    ARANARA_COLLECTION_STATE_FINISHED = 3


class FriendEnterHomeOption(betterproto.Enum):
    FRIEND_ENTER_HOME_OPTION_NEED_CONFIRM = 0
    FRIEND_ENTER_HOME_OPTION_REFUSE = 1
    FRIEND_ENTER_HOME_OPTION_DIRECT = 2


class FriendOnlineState(betterproto.Enum):
    FRIEND_ONLINE_STATE_DISCONNECT = 0
    FRIEND_ONLINE_STATE_ONLINE = 1


class PlatformType(betterproto.Enum):
    PLATFORM_TYPE_EDITOR = 0
    PLATFORM_TYPE_IOS = 1
    PLATFORM_TYPE_ANDROID = 2
    PLATFORM_TYPE_PC = 3
    PLATFORM_TYPE_PS4 = 4
    PLATFORM_TYPE_SERVER = 5
    PLATFORM_TYPE_CLOUD_ANDROID = 6
    PLATFORM_TYPE_CLOUD_IOS = 7
    PLATFORM_TYPE_PS5 = 8
    PLATFORM_TYPE_CLOUD_WEB = 9
    PLATFORM_TYPE_CLOUD_TV = 10
    PLATFORM_TYPE_CLOUD_MAC = 11
    PLATFORM_TYPE_CLOUD_PC = 12
    PLATFORM_TYPE_CLOUD_THIRD_PARTY_MOBILE = 13
    PLATFORM_TYPE_CLOUD_THIRD_PARTY_PC = 14


class MainCoopStatus(betterproto.Enum):
    STATUS_INVALID = 0
    STATUS_RUNNING = 1
    STATUS_FINISHED = 2


class MapMarkFromType(betterproto.Enum):
    MAP_MARK_FROM_TYPE_NONE = 0
    MAP_MARK_FROM_TYPE_MONSTER = 1
    MAP_MARK_FROM_TYPE_QUEST = 2


class MapMarkPointType(betterproto.Enum):
    MAP_MARK_POINT_TYPE_NPC = 0
    MAP_MARK_POINT_TYPE_QUEST = 1
    MAP_MARK_POINT_TYPE_SPECIAL = 2
    MAP_MARK_POINT_TYPE_MINE = 3
    MAP_MARK_POINT_TYPE_COLLECTION = 4
    MAP_MARK_POINT_TYPE_MONSTER = 5
    MAP_MARK_POINT_TYPE_FISH_POOL = 6


class WidgetSlotTag(betterproto.Enum):
    WIDGET_SLOT_TAG_QUICK_USE = 0
    WIDGET_SLOT_TAG_ATTACH_AVATAR = 1


class AnchorPointOpReqAnchorPointOpType(betterproto.Enum):
    ANCHOR_POINT_OP_TYPE_NONE = 0
    ANCHOR_POINT_OP_TYPE_TELEPORT = 1
    ANCHOR_POINT_OP_TYPE_REMOVE = 2


class AreaPlayType(betterproto.Enum):
    AREA_PLAY_TYPE_NONE = 0
    AREA_PLAY_TYPE_CLIMATE = 1
    AREA_PLAY_TYPE_REGIONAL_PLAY = 2


class HitColliderType(betterproto.Enum):
    HIT_COLLIDER_TYPE_INVALID = 0
    HIT_COLLIDER_TYPE_HIT_BOX = 1
    HIT_COLLIDER_TYPE_WET_HIT_BOX = 2
    HIT_COLLIDER_TYPE_HEAD_BOX = 3


class AuditState(betterproto.Enum):
    AUDIT_STATE_NONE = 0
    AUDIT_STATE_WAITING = 1
    AUDIT_STATE_FAILED = 2


class AvatarExpeditionState(betterproto.Enum):
    AVATAR_EXPEDITION_STATE_NONE = 0
    AVATAR_EXPEDITION_STATE_DOING = 1
    AVATAR_EXPEDITION_STATE_FINISH_WAIT_REWARD = 2
    AVATAR_EXPEDITION_STATE_CALLBACK_WAIT_REWARD = 3
    AVATAR_EXPEDITION_STATE_LOCKED = 4


class TrialAvatarGrantRecordGrantReason(betterproto.Enum):
    GRANT_REASON_INVALID = 0
    GRANT_REASON_BY_QUEST = 1
    GRANT_REASON_BY_TRIAL_AVATAR_ACTIVITY = 2
    GRANT_REASON_BY_DUNGEON_ELEMENT_CHALLENGE = 3
    GRANT_REASON_BY_MIST_TRIAL_ACTIVITY = 4
    GRANT_REASON_BY_SUMO_ACTIVITY = 5
    GRANT_REASON_BY_POTION_ACTIVITY = 6
    GRANT_REASON_BY_CRYSTAL_LINK_ACTIVITY = 7
    GRANT_REASON_BY_IRODORI_MASTER = 8
    GRANT_REASON_BY_GM = 9
    GRANT_REASON_BY_INSTABLE_SPRAY_ACTIVITY = 10
    GRANT_REASON_BY_MUQADAS_POTION_ACTIVITY = 11
    GRANT_REASON_BY_VINTAGE_HUNTING = 12
    GRANT_REASON_BY_CHAR_AMUSEMENT = 13


class MotionState(betterproto.Enum):
    MOTION_STATE_NONE = 0
    MOTION_STATE_RESET = 1
    MOTION_STATE_STANDBY = 2
    MOTION_STATE_STANDBY_MOVE = 3
    MOTION_STATE_WALK = 4
    MOTION_STATE_RUN = 5
    MOTION_STATE_DASH = 6
    MOTION_STATE_CLIMB = 7
    MOTION_STATE_CLIMB_JUMP = 8
    MOTION_STATE_STANDBY_TO_CLIMB = 9
    MOTION_STATE_FIGHT = 10
    MOTION_STATE_JUMP = 11
    MOTION_STATE_DROP = 12
    MOTION_STATE_FLY = 13
    MOTION_STATE_SWIM_MOVE = 14
    MOTION_STATE_SWIM_IDLE = 15
    MOTION_STATE_SWIM_DASH = 16
    MOTION_STATE_SWIM_JUMP = 17
    MOTION_STATE_SLIP = 18
    MOTION_STATE_GO_UPSTAIRS = 19
    MOTION_STATE_FALL_ON_GROUND = 20
    MOTION_STATE_JUMP_UP_WALL_FOR_STANDBY = 21
    MOTION_STATE_JUMP_OFF_WALL = 22
    MOTION_STATE_POWERED_FLY = 23
    MOTION_STATE_LADDER_IDLE = 24
    MOTION_STATE_LADDER_MOVE = 25
    MOTION_STATE_LADDER_SLIP = 26
    MOTION_STATE_STANDBY_TO_LADDER = 27
    MOTION_STATE_LADDER_TO_STANDBY = 28
    MOTION_STATE_DANGER_STANDBY = 29
    MOTION_STATE_DANGER_STANDBY_MOVE = 30
    MOTION_STATE_DANGER_WALK = 31
    MOTION_STATE_DANGER_RUN = 32
    MOTION_STATE_DANGER_DASH = 33
    MOTION_STATE_CROUCH_IDLE = 34
    MOTION_STATE_CROUCH_MOVE = 35
    MOTION_STATE_CROUCH_ROLL = 36
    MOTION_STATE_NOTIFY = 37
    MOTION_STATE_LAND_SPEED = 38
    MOTION_STATE_MOVE_FAIL_ACK = 39
    MOTION_STATE_WATERFALL = 40
    MOTION_STATE_DASH_BEFORE_SHAKE = 41
    MOTION_STATE_SIT_IDLE = 42
    MOTION_STATE_FORCE_SET_POS = 43
    MOTION_STATE_QUEST_FORCE_DRAG = 44
    MOTION_STATE_FOLLOW_ROUTE = 45
    MOTION_STATE_SKIFF_BOARDING = 46
    MOTION_STATE_SKIFF_NORMAL = 47
    MOTION_STATE_SKIFF_DASH = 48
    MOTION_STATE_SKIFF_POWERED_DASH = 49
    MOTION_STATE_DESTROY_VEHICLE = 50
    MOTION_STATE_FLY_IDLE = 51
    MOTION_STATE_FLY_SLOW = 52
    MOTION_STATE_FLY_FAST = 53
    MOTION_STATE_AIM_MOVE = 54
    MOTION_STATE_AIR_COMPENSATION = 55
    MOTION_STATE_NUM = 56


class ProtEntityType(betterproto.Enum):
    PROT_ENTITY_TYPE_NONE = 0
    PROT_ENTITY_TYPE_AVATAR = 1
    PROT_ENTITY_TYPE_MONSTER = 2
    PROT_ENTITY_TYPE_NPC = 3
    PROT_ENTITY_TYPE_GADGET = 4
    PROT_ENTITY_TYPE_REGION = 5
    PROT_ENTITY_TYPE_WEAPON = 6
    PROT_ENTITY_TYPE_WEATHER = 7
    PROT_ENTITY_TYPE_SCENE = 8
    PROT_ENTITY_TYPE_TEAM = 9
    PROT_ENTITY_TYPE_MASSIVE_ENTITY = 10
    PROT_ENTITY_TYPE_MP_LEVEL = 11
    PROT_ENTITY_TYPE_PLAY_TEAM_ENTITY = 12
    PROT_ENTITY_TYPE_EYE_POINT = 13
    PROT_ENTITY_TYPE_MAX = 14


class FoundationStatus(betterproto.Enum):
    FOUNDATION_STATUS_NONE = 0
    FOUNDATION_STATUS_INIT = 1
    FOUNDATION_STATUS_BUILDING = 2
    FOUNDATION_STATUS_BUILT = 3


class GadgetBornType(betterproto.Enum):
    GADGET_BORN_TYPE_NONE = 0
    GADGET_BORN_TYPE_IN_AIR = 1
    GADGET_BORN_TYPE_PLAYER = 2
    GADGET_BORN_TYPE_MONSTER_HIT = 3
    GADGET_BORN_TYPE_MONSTER_DIE = 4
    GADGET_BORN_TYPE_GADGET = 5
    GADGET_BORN_TYPE_GROUND = 6


class MovingPlatformType(betterproto.Enum):
    MOVING_PLATFORM_TYPE_NONE = 0
    MOVING_PLATFORM_TYPE_USE_CONFIG = 1
    MOVING_PLATFORM_TYPE_ABILITY = 2
    MOVING_PLATFORM_TYPE_ROUTE = 3


class MonsterBornType(betterproto.Enum):
    MONSTER_BORN_TYPE_NONE = 0
    MONSTER_BORN_TYPE_DEFAULT = 1
    MONSTER_BORN_TYPE_RANDOM = 2


class PlayerDieType(betterproto.Enum):
    PLAYER_DIE_TYPE_NONE = 0
    PLAYER_DIE_TYPE_KILL_BY_MONSTER = 1
    PLAYER_DIE_TYPE_KILL_BY_GEAR = 2
    PLAYER_DIE_TYPE_FALL = 3
    PLAYER_DIE_TYPE_DRAWN = 4
    PLAYER_DIE_TYPE_ABYSS = 5
    PLAYER_DIE_TYPE_GM = 6
    PLAYER_DIE_TYPE_CLIMATE_COLD = 7
    PLAYER_DIE_TYPE_STORM_LIGHTING = 8


class PropChangeReason(betterproto.Enum):
    PROP_CHANGE_REASON_NONE = 0
    PROP_CHANGE_REASON_STATUE_RECOVER = 1
    PROP_CHANGE_REASON_ENERGY_BALL = 2
    PROP_CHANGE_REASON_ABILITY = 3
    PROP_CHANGE_REASON_LEVELUP = 4
    PROP_CHANGE_REASON_ITEM = 5
    PROP_CHANGE_REASON_AVATAR_CARD = 6
    PROP_CHANGE_REASON_CITY_LEVELUP = 7
    PROP_CHANGE_REASON_AVATAR_UPGRADE = 8
    PROP_CHANGE_REASON_AVATAR_PROMOTE = 9
    PROP_CHANGE_REASON_PLAYER_ADD_EXP = 10
    PROP_CHANGE_REASON_FINISH_QUEST = 11
    PROP_CHANGE_REASON_GM = 12
    PROP_CHANGE_REASON_MANUAL_ADJUST_WORLD_LEVEL = 13


class GalleryStopReason(betterproto.Enum):
    GALLERY_STOP_REASON_NONE = 0
    GALLERY_STOP_REASON_TIMEUP = 1
    GALLERY_STOP_REASON_CLIENT_INTERRUPT = 2
    GALLERY_STOP_REASON_LUA_INTERRUPT_SUCCESS = 3
    GALLERY_STOP_REASON_LUA_INTERRUPT_FAIL = 4
    GALLERY_STOP_REASON_OWNER_LEAVE_SCENE = 5
    GALLERY_STOP_REASON_PLAY_INIT_FAILED = 6
    GALLERY_STOP_REASON_OTHER_PLAYER_ENTER = 7
    GALLERY_STOP_REASON_AVATAR_DIE = 8
    GALLERY_STOP_REASON_FINISHED = 9
    GALLERY_STOP_REASON_FUNGUS_ALL_DIE = 10
    GALLERY_STOP_REASON_LIFE_COUNT_ZERO = 11
    GALLERY_STOP_REASON_Unk3300_DFPLGCGIIDM = 12


class MpSettingType(betterproto.Enum):
    MP_SETTING_TYPE_NO_ENTER = 0
    MP_SETTING_TYPE_ENTER_FREELY = 1
    MP_SETTING_TYPE_ENTER_AFTER_APPLY = 2


class BargainResultType(betterproto.Enum):
    BARGAIN_RESULT_TYPE_COMPLETE_SUCC = 0
    BARGAIN_RESULT_TYPE_SINGLE_FAIL = 1
    BARGAIN_RESULT_TYPE_COMPLETE_FAIL = 2


class BattlePassMissionMissionStatus(betterproto.Enum):
    MISSION_STATUS_INVALID = 0
    MISSION_STATUS_UNFINISHED = 1
    MISSION_STATUS_FINISHED = 2
    MISSION_STATUS_POINT_TAKEN = 3


class BattlePassUnlockStatus(betterproto.Enum):
    BATTLE_PASS_UNLOCK_STATUS_INVALID = 0
    BATTLE_PASS_UNLOCK_STATUS_FREE = 1
    BATTLE_PASS_UNLOCK_STATUS_PAID = 2


class BeginCameraSceneLookNotifyKeepRotType(betterproto.Enum):
    KEEP_ROT_TYPE_X = 0
    KEEP_ROT_TYPE_XY = 1


class BeginCameraSceneLookWithTemplateNotifyFollowType(betterproto.Enum):
    FOLLOW_TYPE_INIT_FOLLOW_POS = 0
    FOLLOW_TYPE_SET_FOLLOW_POS = 1
    FOLLOW_TYPE_SET_ABS_FOLLOW_POS = 2


class BrickBreakerSettleNotifySettleReason(betterproto.Enum):
    SETTLE_REASON_TIME_OUT = 0
    SETTLE_REASON_PLAY_END = 1
    SETTLE_REASON_PLAYER_QUIT = 2
    SETTLE_REASON_LIFE_COUNT = 3


class BrickBreakerStageType(betterproto.Enum):
    BRICK_BREAKER_STAGE_TYPE_PREPARE = 0
    BRICK_BREAKER_STAGE_TYPE_PICK = 1
    BRICK_BREAKER_STAGE_TYPE_GAME = 2
    BRICK_BREAKER_STAGE_TYPE_PLAY = 3
    BRICK_BREAKER_STAGE_TYPE_SETTLE = 4


class SceneSurfaceMaterial(betterproto.Enum):
    SCENE_SURFACE_MATERIAL_INVALID = 0
    SCENE_SURFACE_MATERIAL_GRASS = 1
    SCENE_SURFACE_MATERIAL_DIRT = 2
    SCENE_SURFACE_MATERIAL_ROCK = 3
    SCENE_SURFACE_MATERIAL_SNOW = 4
    SCENE_SURFACE_MATERIAL_WATER = 5
    SCENE_SURFACE_MATERIAL_TILE = 6
    SCENE_SURFACE_MATERIAL_SAND = 7


class ChallengeFinishType(betterproto.Enum):
    CHALLENGE_FINISH_TYPE_NONE = 0
    CHALLENGE_FINISH_TYPE_FAIL = 1
    CHALLENGE_FINISH_TYPE_SUCC = 2
    CHALLENGE_FINISH_TYPE_PAUSE = 3


class ChangeEnergyReason(betterproto.Enum):
    CHANGE_ENERGY_REASON_NONE = 0
    CHANGE_ENERGY_REASON_SKILL_START = 1


class ChangeHpReason(betterproto.Enum):
    CHANGE_HP_REASON_NONE = 0
    CHANGE_HP_REASON_SUB_AVATAR = 1
    CHANGE_HP_REASON_SUB_MONSTER = 2
    CHANGE_HP_REASON_SUB_GEAR = 3
    CHANGE_HP_REASON_SUB_ENVIR = 4
    CHANGE_HP_REASON_SUB_FALL = 5
    CHANGE_HP_REASON_SUB_DRAWN = 6
    CHANGE_HP_REASON_SUB_ABYSS = 7
    CHANGE_HP_REASON_SUB_ABILITY = 8
    CHANGE_HP_REASON_SUB_SUMMON = 9
    CHANGE_HP_REASON_SUB_SCRIPT = 10
    CHANGE_HP_REASON_SUB_GM = 11
    CHANGE_HP_REASON_SUB_KILL_SELF = 12
    CHANGE_HP_REASON_SUB_CLIMATE_COLD = 13
    CHANGE_HP_REASON_SUB_STORM_LIGHTNING = 14
    CHANGE_HP_REASON_SUB_KILL_SERVER_GADGET = 15
    CHANGE_HP_REASON_SUB_REPLACE = 16
    CHANGE_HP_REASON_SUB_PLAYER_LEAVE = 17
    CHANGE_HP_REASON_ATTACK_BY_ENERGY = 18
    CHANGE_HP_REASON_ATTACK_BY_RECYCLE = 19
    CHANGE_HP_REASON_BY_LUA = 51
    CHANGE_HP_REASON_ADD_ABILITY = 101
    CHANGE_HP_REASON_ADD_ITEM = 102
    CHANGE_HP_REASON_ADD_REVIVE = 103
    CHANGE_HP_REASON_ADD_UPGRADE = 104
    CHANGE_HP_REASON_ADD_STATUE = 105
    CHANGE_HP_REASON_ADD_BACKGROUND = 106
    CHANGE_HP_REASON_ADD_GM = 107
    CHANGE_HP_REASON_ADD_TRIAL_AVATAR_ACTIVITY = 108
    CHANGE_HP_REASON_ADD_ROGUELIKE_SPRING = 109


class ChannelIdType(betterproto.Enum):
    CHANNEL_ID_TYPE_NONE = 0
    CHANNEL_ID_TYPE_MIHOYO = 1
    CHANNEL_ID_TYPE_XIAOMI = 11
    CHANNEL_ID_TYPE_COOLPAD = 12
    CHANNEL_ID_TYPE_YYB = 13
    CHANNEL_ID_TYPE_BILI = 14
    CHANNEL_ID_TYPE_HUAWEI = 15
    CHANNEL_ID_TYPE_MEIZU = 16
    CHANNEL_ID_TYPE_360 = 17
    CHANNEL_ID_TYPE_OPPO = 18
    CHANNEL_ID_TYPE_VIVO = 19
    CHANNEL_ID_TYPE_UC = 20
    CHANNEL_ID_TYPE_LENOVO = 22
    CHANNEL_ID_TYPE_JINLI = 23
    CHANNEL_ID_TYPE_BAIDU = 25
    CHANNEL_ID_TYPE_DANGLE = 26


class ChapterState(betterproto.Enum):
    CHAPTER_STATE_INVALID = 0
    CHAPTER_STATE_UNABLE_TO_BEGIN = 1
    CHAPTER_STATE_BEGIN = 2
    CHAPTER_STATE_END = 3


class ChatInfoSystemHintType(betterproto.Enum):
    SYSTEM_HINT_TYPE_CHAT_NONE = 0
    SYSTEM_HINT_TYPE_CHAT_ENTER_WORLD = 1
    SYSTEM_HINT_TYPE_CHAT_LEAVE_WORLD = 2


class CheckAddItemExceedLimitNotifyItemExceedLimitMsgType(betterproto.Enum):
    ITEM_EXCEED_LIMIT_MSG_TYPE_DEFAULT = 0
    ITEM_EXCEED_LIMIT_MSG_TYPE_TEXT = 1
    ITEM_EXCEED_LIMIT_MSG_TYPE_DIALOG = 2
    ITEM_EXCEED_LIMIT_MSG_TYPE_DIALOG_NONBLOCK = 3


class UgcType(betterproto.Enum):
    UGC_TYPE_NONE = 0
    UGC_TYPE_MUSIC_GAME = 1


class ClientReconnectReason(betterproto.Enum):
    CLIENT_RECONNECT_REASON_NONE = 0
    CLIENT_RECONNECT_REASON_QUIT_MP = 1


class TransmitReason(betterproto.Enum):
    TRANSMIT_REASON_NONE = 0
    TRANSMIT_REASON_QUEST = 1


class EventTriggerType(betterproto.Enum):
    EVENT_TRIGGER_TYPE_NONE = 0
    EVENT_TRIGGER_TYPE_ENTER_FORCE = 1


class ClientType(betterproto.Enum):
    CLIENT_TYPE_PRODUCT = 0
    CLIENT_TYPE_DEV = 1


class CodexType(betterproto.Enum):
    CODEX_TYPE_NONE = 0
    CODEX_TYPE_QUEST = 1
    CODEX_TYPE_WEAPON = 2
    CODEX_TYPE_ANIMAL = 3
    CODEX_TYPE_MATERIAL = 4
    CODEX_TYPE_BOOKS = 5
    CODEX_TYPE_PUSHTIPS = 6
    CODEX_TYPE_VIEW = 7
    CODEX_TYPE_RELIQUARY = 8


class CombatTypeArgument(betterproto.Enum):
    COMBAT_TYPE_ARGUMENT_NONE = 0
    COMBAT_TYPE_ARGUMENT_EVT_BEING_HIT = 1
    COMBAT_TYPE_ARGUMENT_ANIMATOR_STATE_CHANGED = 2
    COMBAT_TYPE_ARGUMENT_FACE_TO_DIR = 3
    COMBAT_TYPE_ARGUMENT_SET_ATTACK_TARGET = 4
    COMBAT_TYPE_ARGUMENT_RUSH_MOVE = 5
    COMBAT_TYPE_ARGUMENT_ANIMATOR_PARAMETER_CHANGED = 6
    COMBAT_TYPE_ARGUMENT_ENTITY_MOVE = 7
    COMBAT_TYPE_ARGUMENT_SYNC_ENTITY_POSITION = 8
    COMBAT_TYPE_ARGUMENT_STEER_MOTION_INFO = 9
    COMBAT_TYPE_ARGUMENT_FORCE_SET_POS_INFO = 10
    COMBAT_TYPE_ARGUMENT_COMPENSATE_POS_DIFF = 11
    COMBAT_TYPE_ARGUMENT_MONSTER_DO_BLINK = 12
    COMBAT_TYPE_ARGUMENT_FIXED_RUSH_MOVE = 13
    COMBAT_TYPE_ARGUMENT_SYNC_TRANSFORM = 14
    COMBAT_TYPE_ARGUMENT_LIGHT_CORE_MOVE = 15
    COMBAT_TYPE_ARGUMENT_BEING_HEALED_NTF = 16
    COMBAT_TYPE_ARGUMENT_SKILL_ANCHOR_POSITION_NTF = 17
    COMBAT_TYPE_ARGUMENT_GRAPPLING_HOOK_MOVE = 18


class CompoundBoostTakeStatusType(betterproto.Enum):
    COMPOUND_BOOST_TAKE_STATUS_TYPE_NONE = 0
    COMPOUND_BOOST_TAKE_STATUS_TYPE_BOOST_ONLY = 1
    COMPOUND_BOOST_TAKE_STATUS_TYPE_BOOST_AND_TAKE = 2
    COMPOUND_BOOST_TAKE_STATUS_TYPE_BAG_FULL = 3


class CoopPointState(betterproto.Enum):
    STATE_UNSTARTED = 0
    STATE_STARTED = 1
    STATE_FINISHED = 2


class CoopRewardState(betterproto.Enum):
    STATE_UNLOCK = 0
    STATE_LOCK = 1
    STATE_TAKEN = 2


class CoopChapterState(betterproto.Enum):
    STATE_CLOSE = 0
    STATE_COND_NOT_MEET = 1
    STATE_COND_MEET = 2
    STATE_ACCEPT = 3


class CreateReason(betterproto.Enum):
    CREATE_REASON_NONE = 0
    CREATE_REASON_QUEST = 1
    CREATE_REASON_ENERGY = 2


class CustomDungeonBanType(betterproto.Enum):
    CUSTOM_DUNGEON_BAN_TYPE_NONE = 0
    CUSTOM_DUNGEON_BAN_TYPE_LAYOUT = 1


class CustomDungeonState(betterproto.Enum):
    CUSTOM_DUNGEON_STATE_EDIT = 0
    CUSTOM_DUNGEON_STATE_SELF_PASS = 1
    CUSTOM_DUNGEON_STATE_PUBLISHED = 2


class CustomDungeonFinishType(betterproto.Enum):
    CUSTOM_DUNGEON_FINISH_TYPE_PLAY_NORMAL = 0
    CUSTOM_DUNGEON_FINISH_TYPE_PLAY_TRY = 1
    CUSTOM_DUNGEON_FINISH_TYPE_EDIT_TRY = 2
    CUSTOM_DUNGEON_FINISH_TYPE_SELF_PLAY_NORMAL = 3


class EnterCustomDungeonType(betterproto.Enum):
    ENTER_CUSTOM_DUNGEON_TYPE_NONE = 0
    ENTER_CUSTOM_DUNGEON_TYPE_EDIT = 1
    ENTER_CUSTOM_DUNGEON_TYPE_PLAY = 2
    ENTER_CUSTOM_DUNGEON_TYPE_OFFICIAL = 3


class TryCustomDungeonType(betterproto.Enum):
    TRY_CUSTOM_DUNGEON_TYPE_NONE = 0
    TRY_CUSTOM_DUNGEON_TYPE_ROOM = 1
    TRY_CUSTOM_DUNGEON_TYPE_ALL = 2
    TRY_CUSTOM_DUNGEON_TYPE_OFFICIAL_PLAY = 3


class DataResVersionNotifyDataResVersionOpType(betterproto.Enum):
    DATA_RES_VERSION_OP_TYPE_NONE = 0
    DATA_RES_VERSION_OP_TYPE_RELOGIN = 1
    DATA_RES_VERSION_OP_TYPE_MP_RELOGIN = 2


class DealAddFriendResultType(betterproto.Enum):
    DEAL_ADD_FRIEND_RESULT_TYPE_REJECT = 0
    DEAL_ADD_FRIEND_RESULT_TYPE_ACCEPT = 1


class DebugNotifyRetcode(betterproto.Enum):
    SUCC = 0
    FAIL = 1


class DraftInviteFailReason(betterproto.Enum):
    DRAFT_INVITE_FAIL_REASON_UNKNOWN = 0
    DRAFT_INVITE_FAIL_REASON_ACTIVITY_NOT_OPEN = 1
    DRAFT_INVITE_FAIL_REASON_ACTIVITY_PLAY_NOT_OPEN = 2
    DRAFT_INVITE_FAIL_REASON_SCENE_NOT_MEET = 3
    DRAFT_INVITE_FAIL_REASON_WORLD_NOT_MEET = 4
    DRAFT_INVITE_FAIL_REASON_PLAY_LIMIT_NOT_MEET = 5


class StoreType(betterproto.Enum):
    STORE_TYPE_NONE = 0
    STORE_TYPE_PACK = 1
    STORE_TYPE_DEPOT = 2


class DungeonCandidateTeamPlayerDismissReason(betterproto.Enum):
    DUNGEON_CANDIDATE_TEAM_PLAYER_DISMISS_REASON_TPDR_NORMAL = 0
    DUNGEON_CANDIDATE_TEAM_PLAYER_DISMISS_REASON_TPDR_DIE = 1
    DUNGEON_CANDIDATE_TEAM_PLAYER_DISMISS_REASON_TPDR_DISCONNECT = 2


class DungeonCandidateTeamPlayerState(betterproto.Enum):
    DUNGEON_CANDIDATE_TEAM_PLAYER_STATE_IDLE = 0
    DUNGEON_CANDIDATE_TEAM_PLAYER_STATE_CHANGING_AV_ATAR = 1
    DUNGEON_CANDIDATE_TEAM_PLAYER_STATE_READY = 2


class DungeonCandidateTeamPlayerLeaveReason(betterproto.Enum):
    DUNGEON_CANDIDATE_TEAM_PLAYER_LEAVE_REASON_TPLR_NORMAL = 0
    DUNGEON_CANDIDATE_TEAM_PLAYER_LEAVE_REASON_TPLR_DIE = 1
    DUNGEON_CANDIDATE_TEAM_PLAYER_LEAVE_REASON_TPLR_BE_KICK = 2
    DUNGEON_CANDIDATE_TEAM_PLAYER_LEAVE_REASON_TPLR_DISCONNECT = 3


class PlayerDieOption(betterproto.Enum):
    PLAYER_DIE_OPTION_OPT_NONE = 0
    PLAYER_DIE_OPTION_OPT_REPLAY = 1
    PLAYER_DIE_OPTION_OPT_CANCEL = 2
    PLAYER_DIE_OPTION_OPT_REVIVE = 3


class DungeonEntryBlockReason(betterproto.Enum):
    DUNGEON_ENTRY_BLOCK_REASON_NONE = 0
    DUNGEON_ENTRY_BLOCK_REASON_LEVEL = 1
    DUNGEON_ENTRY_BLOCK_REASON_QUEST = 2
    DUNGEON_ENTRY_BLOCK_REASON_MULTIPLE = 3


class TowerLevelEndNotifyContinueStateType(betterproto.Enum):
    CONTINUE_STATE_TYPE_CAN_NOT_CONTINUE = 0
    CONTINUE_STATE_TYPE_CAN_ENTER_NEXT_LEVEL = 1
    CONTINUE_STATE_TYPE_CAN_ENTER_NEXT_FLOOR = 2


class WindFieldDungeonFailReason(betterproto.Enum):
    WIND_FIELD_DUNGEON_FAIL_REASON_NONE = 0
    WIND_FIELD_DUNGEON_FAIL_REASON_CANCEL = 1
    WIND_FIELD_DUNGEON_FAIL_REASON_TIMEOUT = 2
    WIND_FIELD_DUNGEON_FAIL_REASON_ALL_AVATAR_DIE = 3
    WIND_FIELD_DUNGEON_FAIL_REASON_LUA_INTERRUPT = 4


class ENetReason(betterproto.Enum):
    E_NET_REASON_ENET_TIMEOUT = 0
    E_NET_REASON_ENET_CLIENT_CLOSE = 1
    E_NET_REASON_ENET_CLIENT_REBIND_FAIL = 2
    E_NET_REASON_ENET_CLIENT_SHUTDOWN = 3
    E_NET_REASON_ENET_SERVER_RELOGIN = 4
    E_NET_REASON_ENET_SERVER_KICK = 5
    E_NET_REASON_ENET_SERVER_SHUTDOWN = 6
    E_NET_REASON_ENET_NOT_FOUND_SESSION = 7
    E_NET_REASON_ENET_LOGIN_UNFINISHED = 8
    E_NET_REASON_ENET_PACKET_FREQ_TOO_HIGH = 9
    E_NET_REASON_ENET_PING_TIMEOUT = 10
    E_NET_REASON_ENET_TRANFER_FAILED = 11
    E_NET_REASON_ENET_SERVER_KILL_CLIENT = 12
    E_NET_REASON_ENET_CHECK_MOVE_SPEED = 13
    E_NET_REASON_ENET_ACCOUNT_PASSWORD_CHANGE = 14
    E_NET_REASON_ENET_SECURITY_KICK = 15
    E_NET_REASON_ENET_LUA_SHELL_TIMEOUT = 16
    E_NET_REASON_ENET_SDKFAIL_KICK = 17
    E_NET_REASON_ENET_PACKET_COST_TIME = 18
    E_NET_REASON_ENET_PACKET_UNION_FREQ = 19
    E_NET_REASON_ENET_WAIT_SND_MAX = 20
    E_NET_REASON_ENET_CLIENT_CONNECT_KEY = 1234567890
    E_NET_REASON_ENET_CLIENT_EDITOR_CONNECT_KEY = 987654321


class EnterReason(betterproto.Enum):
    ENTER_REASON_NONE = 0
    ENTER_REASON_LOGIN = 1
    ENTER_REASON_DUNGEON_REPLAY = 11
    ENTER_REASON_DUNGEON_REVIVE_ON_WAYPOINT = 12
    ENTER_REASON_DUNGEON_ENTER = 13
    ENTER_REASON_DUNGEON_QUIT = 14
    ENTER_REASON_GM = 21
    ENTER_REASON_QUEST_ROLLBACK = 31
    ENTER_REASON_REVIVAL = 32
    ENTER_REASON_PERSONAL_SCENE = 41
    ENTER_REASON_TRANS_POINT = 42
    ENTER_REASON_CLIENT_TRANSMIT = 43
    ENTER_REASON_FORCE_DRAG_BACK = 44
    ENTER_REASON_TEAM_KICK = 51
    ENTER_REASON_TEAM_JOIN = 52
    ENTER_REASON_TEAM_BACK = 53
    ENTER_REASON_MUIP = 54
    ENTER_REASON_DUNGEON_INVITE_ACCEPT = 55
    ENTER_REASON_LUA = 56
    ENTER_REASON_ACTIVITY_LOAD_TERRAIN = 57
    ENTER_REASON_HOST_FROM_SINGLE_TO_MP = 58
    ENTER_REASON_MP_PLAY = 59
    ENTER_REASON_ANCHOR_POINT = 60
    ENTER_REASON_LUA_SKIP_UI = 61
    ENTER_REASON_RELOAD_TERRAIN = 62
    ENTER_REASON_DRAFT_TRANSFER = 63
    ENTER_REASON_ENTER_HOME = 64
    ENTER_REASON_EXIT_HOME = 65
    ENTER_REASON_CHANGE_HOME_MODULE = 66
    ENTER_REASON_GALLERY = 67
    ENTER_REASON_HOME_SCENE_JUMP = 68
    ENTER_REASON_HIDE_AND_SEEK = 69
    ENTER_REASON_SUMMER_TIME_MIST_ZONE = 70
    ENTER_REASON_FORCE_QUIT_SCENE = 71
    ENTER_REASON_HERO_COURSE = 72
    ENTER_REASON_TRANS_CLIMATE = 73
    ENTER_REASON_SUMMER_TIME_BOAT_RESTART = 74
    ENTER_REASON_TSURUMI_MIST_CLIMATE = 75
    ENTER_REASON_TSURUMI_REGIONAL_MIST_CLIMATE = 76
    ENTER_REASON_WINTER_CAMP_RESTART = 77
    ENTER_REASON_TALK_EXEC_TRANSFER = 78
    ENTER_REASON_SEALAMP_BOAT_RESTART = 79
    ENTER_REASON_SEALAMP_BOAT_BACK = 80
    ENTER_REASON_CHALLENGE_INTERRUPT_BACK = 81
    ENTER_REASON_IRODORI_MASTER_TRANSFER = 82
    ENTER_REASON_GALLERY_BACK = 83
    ENTER_REASON_SUMMER_TIME_V2_BOAT_RESTART = 84
    ENTER_REASON_ISLAND_PARTY_GALLERY_START_FAILED = 85
    ENTER_REASON_GRAVEN_INNOCENCE_RACE_RESTART = 86
    ENTER_REASON_VINTAGE_HUNTING_TRANSFER = 87
    ENTER_REASON_FUNGUS_FIGHTER_TRANSFER = 88
    ENTER_REASON_BRICK_BREAKER = 89
    ENTER_REASON_BRICK_BREAKER_SINGLE = 90
    ENTER_REASON_TRANSFER_GUARD_STOP = 91
    ENTER_REASON_COIN_COLLECT_SINGLE = 92


class RogueDiaryAvatarDisableStatus(betterproto.Enum):
    ROGUE_DIARY_AVATAR_DISABLE_STATUS_NONE = 0
    ROGUE_DIARY_AVATAR_DISABLE_STATUS_DEATH = 1
    ROGUE_DIARY_AVATAR_DISABLE_STATUS_TIRED = 2
    ROGUE_DIARY_AVATAR_DISABLE_STATUS_DUPLICATED = 3


class RogueCellState(betterproto.Enum):
    ROGUE_CELL_STATE_NONE = 0
    ROGUE_CELL_STATE_BATTLE = 1
    ROGUE_CELL_STATE_SUCCESS = 2
    ROGUE_CELL_STATE_FINISH = 3
    ROGUE_CELL_STATE_TAKEN_CHEST = 4


class EnterType(betterproto.Enum):
    ENTER_TYPE_NONE = 0
    ENTER_TYPE_SELF = 1
    ENTER_TYPE_GOTO = 2
    ENTER_TYPE_JUMP = 3
    ENTER_TYPE_OTHER = 4
    ENTER_TYPE_BACK = 5
    ENTER_TYPE_DUNGEON = 6
    ENTER_TYPE_DUNGEON_REPLAY = 7
    ENTER_TYPE_GOTO_BY_PORTAL = 8
    ENTER_TYPE_SELF_HOME = 9
    ENTER_TYPE_OTHER_HOME = 10
    ENTER_TYPE_GOTO_RECREATE = 11


class EntityJumpNotifyType(betterproto.Enum):
    TYPE_NULL = 0
    TYPE_ACTIVE = 1
    TYPE_PASSIVE = 2


class FetterState(betterproto.Enum):
    FETTER_STATE_NONE = 0
    FETTER_STATE_NOT_OPEN = 1
    FETTER_STATE_OPEN = 2
    FETTER_STATE_FINISH = 3
    FETTER_STATE_CONCEAL = 4


class FireworksLaunchParamType(betterproto.Enum):
    FIREWORKS_LAUNCH_PARAM_TYPE_NONE = 0
    FIREWORKS_LAUNCH_PARAM_TYPE_REPEAT = 1
    FIREWORKS_LAUNCH_PARAM_TYPE_INTERVAL = 2
    FIREWORKS_LAUNCH_PARAM_TYPE_DELAY = 3
    FIREWORKS_LAUNCH_PARAM_TYPE_ROUND_INTERVAL = 4
    FIREWORKS_LAUNCH_PARAM_TYPE_MAX = 5


class FireworksReformParamType(betterproto.Enum):
    FIREWORKS_REFORM_PARAM_TYPE_NONE = 0
    FIREWORKS_REFORM_PARAM_TYPE_COLOR = 1
    FIREWORKS_REFORM_PARAM_TYPE_HEIGHT = 2
    FIREWORKS_REFORM_PARAM_TYPE_SIZE = 3
    FIREWORKS_REFORM_PARAM_TYPE_DENSITY = 4
    FIREWORKS_REFORM_PARAM_TYPE_ROTATION = 5


class FishBattleResult(betterproto.Enum):
    FISH_BATTLE_RESULT_NONE = 0
    FISH_BATTLE_RESULT_SUCC = 1
    FISH_BATTLE_RESULT_FAIL = 2
    FISH_BATTLE_RESULT_TIMEOUT = 3
    FISH_BATTLE_RESULT_CANCEL = 4
    FISH_BATTLE_RESULT_EXIT = 5


class FishBattleEndRspFishNoRewardReason(betterproto.Enum):
    FISH_NO_REWARD_REASON_NONE = 0
    FISH_NO_REWARD_REASON_ACTIVITY_LIMIT = 1
    FISH_NO_REWARD_REASON_BAG_LIMIT = 2
    FISH_NO_REWARD_REASON_POOL_LIMIT = 3


class FishEscapeReason(betterproto.Enum):
    FISH_ESCAPE_REASON_NONE = 0
    FISH_ESCAPE_REASON_SHOCKED = 1
    FISH_ESCAPE_REASON_UNHOOK = 2


class ForgeQueueManipulateType(betterproto.Enum):
    FORGE_QUEUE_MANIPULATE_TYPE_RECEIVE_OUTPUT = 0
    FORGE_QUEUE_MANIPULATE_TYPE_STOP_FORGE = 1


class FoundationOpType(betterproto.Enum):
    FOUNDATION_OP_TYPE_NONE = 0
    FOUNDATION_OP_TYPE_BUILD = 1
    FOUNDATION_OP_TYPE_DEMOLITION = 2
    FOUNDATION_OP_TYPE_REBUILD = 3
    FOUNDATION_OP_TYPE_ROTATE = 4
    FOUNDATION_OP_TYPE_LOCK = 5
    FOUNDATION_OP_TYPE_UNLOCK = 6


class InterOpType(betterproto.Enum):
    INTER_OP_TYPE_FINISH = 0
    INTER_OP_TYPE_START = 1


class ResinCostType(betterproto.Enum):
    RESIN_COST_TYPE_NONE = 0
    RESIN_COST_TYPE_NORMAL = 1
    RESIN_COST_TYPE_CONDENSE = 2
    RESIN_COST_TYPE_REUNION_PRIVILEGE = 3
    RESIN_COST_TYPE_OP_ACTIVITY = 4
    RESIN_COST_TYPE_MATERIAL = 5


class InteractType(betterproto.Enum):
    INTERACT_TYPE_NONE = 0
    INTERACT_TYPE_PICK_ITEM = 1
    INTERACT_TYPE_GATHER = 2
    INTERACT_TYPE_OPEN_CHEST = 3
    INTERACT_TYPE_OPEN_STATUE = 4
    INTERACT_TYPE_CONSUME = 5
    INTERACT_TYPE_MP_PLAY_REWARD = 6
    INTERACT_TYPE_VIEW = 7
    INTERACT_TYPE_GENERAL_REWARD = 8
    INTERACT_TYPE_MIRACLE_RING = 9
    INTERACT_TYPE_FOUNDATION = 10
    INTERACT_TYPE_ECHO_SHELL = 11
    INTERACT_TYPE_HOME_GATHER = 12
    INTERACT_TYPE_ENV_ANIMAL = 13
    INTERACT_TYPE_QUEST_GADGET = 14
    INTERACT_TYPE_UI_INTERACT = 15
    INTERACT_TYPE_DESHRET_OBELISK = 16


class GadgetPlayType(betterproto.Enum):
    GADGET_PLAY_TYPE_NONE = 0
    GADGET_PLAY_TYPE_CRUSIBLE = 1


class GalleryStageType(betterproto.Enum):
    GALLERY_STAGE_TYPE_NONE = 0
    GALLERY_STAGE_TYPE_PRESTART = 1
    GALLERY_STAGE_TYPE_START = 2


class GalleryStartSource(betterproto.Enum):
    GALLERY_START_SOURCE_BY_NONE = 0
    GALLERY_START_SOURCE_BY_MATCH = 1
    GALLERY_START_SOURCE_BY_DRAFT = 2


class GcgActionType(betterproto.Enum):
    GCG_ACTION_TYPE_NONE = 0
    GCG_ACTION_TYPE_SPECIAL_PHASE = 1
    GCG_ACTION_TYPE_NEXT_PHASE = 2
    GCG_ACTION_TYPE_DRAW = 3
    GCG_ACTION_TYPE_REDRAW = 4
    GCG_ACTION_TYPE_SELECT_ONSTAGE = 5
    GCG_ACTION_TYPE_ROLL = 6
    GCG_ACTION_TYPE_REROLL = 7
    GCG_ACTION_TYPE_ATTACK = 8
    GCG_ACTION_TYPE_PLAY_CARD = 9
    GCG_ACTION_TYPE_PASS = 10
    GCG_ACTION_TYPE_REBOOT = 11
    GCG_ACTION_TYPE_GAME_OVER = 12
    GCG_ACTION_TYPE_TRIGGER = 13
    GCG_ACTION_TYPE_PHASE_EXIT = 14
    GCG_ACTION_TYPE_CUSTOM = 15
    GCG_ACTION_TYPE_NOTIFY_COST = 16
    GCG_ACTION_TYPE_AFTER_OPERATION = 17
    GCG_ACTION_TYPE_USE_SKILL = 18
    GCG_ACTION_TYPE_NOTIFY_SKILL_PREVIEW = 19
    GCG_ACTION_TYPE_PREVIEW_ATTACK = 20
    GCG_ACTION_TYPE_PREVIEW_AFTER_ATTACK = 21
    GCG_ACTION_TYPE_SEND_MESSAGE = 22
    GCG_ACTION_TYPE_WAITING_CHARACTER = 23
    GCG_ACTION_TYPE_TRIGGER_SKILL = 24
    GCG_ACTION_TYPE_BEFORE_NEXT_OPERATION = 25


class GcgGameBusinessType(betterproto.Enum):
    GCG_GAME_BUSINESS_TYPE_NONE = 0
    GCG_GAME_BUSINESS_TYPE_GM = 1
    GCG_GAME_BUSINESS_TYPE_MATCH = 2
    GCG_GAME_BUSINESS_TYPE_PVP = 3
    GCG_GAME_BUSINESS_TYPE_TAVERN_CHALLENGE = 4
    GCG_GAME_BUSINESS_TYPE_CONST_CHALLENGE = 5
    GCG_GAME_BUSINESS_TYPE_WORLD_CHALLENGE = 6
    GCG_GAME_BUSINESS_TYPE_BOSS_CHALLENGE = 7
    GCG_GAME_BUSINESS_TYPE_WEEK_CHALLENGE = 8
    GCG_GAME_BUSINESS_TYPE_BREAK_CHALLENGE = 9
    GCG_GAME_BUSINESS_TYPE_QUEST = 10
    GCG_GAME_BUSINESS_TYPE_GUIDE_GROUP = 11


class GcgReason(betterproto.Enum):
    GCG_REASON_DEFAULT = 0
    GCG_REASON_EFFECT = 1
    GCG_REASON_COST = 2
    GCG_REASON_GM = 3
    GCG_REASON_ATTACK = 4
    GCG_REASON_REBOOT = 5
    GCG_REASON_PLAY_CARD = 6
    GCG_REASON_QUICKLY_ONSTAGE = 7
    GCG_REASON_REMOVE_AFTER_DIE = 8
    GCG_REASON_INIT = 9
    GCG_REASON_EFFECT_DAMAGE = 10
    GCG_REASON_EFFECT_HEAL = 11
    GCG_REASON_EFFECT_REVIVE = 12


class GcgZoneType(betterproto.Enum):
    GCG_ZONE_TYPE_INVALID = 0
    GCG_ZONE_TYPE_DECK = 1
    GCG_ZONE_TYPE_HAND = 2
    GCG_ZONE_TYPE_CHARACTER = 3
    GCG_ZONE_TYPE_MODIFY = 4
    GCG_ZONE_TYPE_SUMMON = 5
    GCG_ZONE_TYPE_ASSIST = 7
    GCG_ZONE_TYPE_ONSTAGE = 8
    GCG_ZONE_TYPE_RULE = 9


class GcgDiceSideType(betterproto.Enum):
    GCG_DICE_SIDE_TYPE_INVALID = 0
    GCG_DICE_SIDE_TYPE_CRYO = 1
    GCG_DICE_SIDE_TYPE_HYDRO = 2
    GCG_DICE_SIDE_TYPE_PYRO = 3
    GCG_DICE_SIDE_TYPE_ELECTRO = 4
    GCG_DICE_SIDE_TYPE_GEO = 5
    GCG_DICE_SIDE_TYPE_DENDRO = 6
    GCG_DICE_SIDE_TYPE_ANEMO = 7
    GCG_DICE_SIDE_TYPE_PAIMON = 8


class GcgClientPerformType(betterproto.Enum):
    GCG_CLIENT_PERFORM_TYPE_INVALID = 0
    GCG_CLIENT_PERFORM_TYPE_CARD_EXCHANGE = 1
    GCG_CLIENT_PERFORM_TYPE_FIRST_HAND = 2
    GCG_CLIENT_PERFORM_TYPE_REROLL = 3


class GcgEndReason(betterproto.Enum):
    GCG_END_REASON_DEFAULT = 0
    GCG_END_REASON_DIE = 1
    GCG_END_REASON_SURRENDER = 2
    GCG_END_REASON_DISCONNECTED = 3
    GCG_END_REASON_ROUND_LIMIT = 4
    GCG_END_REASON_GM = 5
    GCG_END_REASON_NO_PLAYER = 6
    GCG_END_REASON_GIVE_UP = 7
    GCG_END_REASON_INIT_TIMEOUT = 8
    GCG_END_REASON_EFFECT = 9
    GCG_END_REASON_Unk3300_INAPHKAKKHF = 10


class GcgPhaseType(betterproto.Enum):
    GCG_PHASE_TYPE_INVALID = 0
    GCG_PHASE_TYPE_START = 1
    GCG_PHASE_TYPE_DRAW = 2
    GCG_PHASE_TYPE_ON_STAGE = 3
    GCG_PHASE_TYPE_DICE = 4
    GCG_PHASE_TYPE_MAIN = 5
    GCG_PHASE_TYPE_END = 6
    GCG_PHASE_TYPE_DIE = 7
    GCG_PHASE_TYPE_FIN = 8
    GCG_PHASE_TYPE_PRE_MAIN = 9
    GCG_PHASE_TYPE_REROLL = 10


class GcgIntentionChangeType(betterproto.Enum):
    GCG_INTENTION_CHANGE_TYPE_NONE = 0
    GCG_INTENTION_CHANGE_TYPE_RM = 1


class GcgSkillHpChangeType(betterproto.Enum):
    GCG_SKILL_HP_CHANGE_TYPE_NONE = 0
    GCG_SKILL_HP_CHANGE_TYPE_DAMAGE = 1
    GCG_SKILL_HP_CHANGE_TYPE_HEAL = 2


class GcgGameCreateFailReasonNotifyGcgGameCreateReason(betterproto.Enum):
    GCG_GAME_CREATE_REASON_NONE = 0
    GCG_GAME_CREATE_REASON_GAME_MAX = 1
    GCG_GAME_CREATE_REASON_CLIENT_VERSION_NOT_LATEST = 2
    GCG_GAME_CREATE_REASON_RESOURCE_NOT_COMPLETE = 3
    GCG_GAME_CREATE_REASON_TIMEOUT = 4
    GCG_GAME_CREATE_REASON_Unk3300_EMCDFGGFFAH = 5


class GcgLevelType(betterproto.Enum):
    GCG_LEVEL_TYPE_NONE = 0
    GCG_LEVEL_TYPE_CONST = 1
    GCG_LEVEL_TYPE_WEEK = 2
    GCG_LEVEL_TYPE_WORLD = 3
    GCG_LEVEL_TYPE_BOSS = 4
    GCG_LEVEL_TYPE_CHARACTER = 5
    GCG_LEVEL_TYPE_BREAK = 6
    GCG_LEVEL_TYPE_QUEST = 7
    GCG_LEVEL_TYPE_GUIDE_GROUP = 8


class GcgSettleOption(betterproto.Enum):
    GCG_SETTLE_OPTION_OPT_NONE = 0
    GCG_SETTLE_OPTION_OPT_EXIT = 1
    GCG_SETTLE_OPTION_OPT_CONTINUE = 2
    GCG_SETTLE_OPTION_OPT_RESTART = 3


class MailCollectState(betterproto.Enum):
    MAIL_COLLECT_STATE_COLLECTIBLE_UNKNOWN = 0
    MAIL_COLLECT_STATE_NOT_COLLECTIBLE = 1
    MAIL_COLLECT_STATE_COLLECTIBLE_UNCOLLECTED = 2
    MAIL_COLLECT_STATE_COLLECTIBLE_COLLECTED = 3


class IslandPartySailStage(betterproto.Enum):
    ISLAND_PARTY_SAIL_STAGE_NONE = 0
    ISLAND_PARTY_SAIL_STAGE_SAIL = 1
    ISLAND_PARTY_SAIL_STAGE_BATTLE = 2


class HuntingOfferState(betterproto.Enum):
    HUNTING_OFFER_STATE_NONE = 0
    HUNTING_OFFER_STATE_STARTED = 1
    HUNTING_OFFER_STATE_UNSTARTED = 2
    HUNTING_OFFER_STATE_SUCC = 3


class InvestigationMonsterLockState(betterproto.Enum):
    LOCK_STATE_NONE = 0
    LOCK_STATE_QUEST = 1


class MapMarkTipsType(betterproto.Enum):
    MAP_MARK_TIPS_TYPE_DUNGEON_ELEMENT_TRIAL = 0


class GetUgcType(betterproto.Enum):
    GET_UGC_TYPE_NONE = 0
    GET_UGC_TYPE_MINE = 1
    GET_UGC_TYPE_PUBLISH = 2


class RecordUsage(betterproto.Enum):
    RECORD_USAGE_UGC_RECORD_USAGE_NONE = 0
    RECORD_USAGE_UGC_RECORD_USAGE_IMPORT = 1
    RECORD_USAGE_UGC_RECORD_USAGE_PLAY = 2
    RECORD_USAGE_UGC_RECORD_USAGE_TRIAL = 3
    RECORD_USAGE_UGC_RECORD_USAGE_COMPARE = 4


class GmObstacleInfoShapeType(betterproto.Enum):
    SHAPE_TYPE_OBSTACLE_SHAPE_CAPSULE = 0
    SHAPE_TYPE_OBSTACLE_SHAPE_BOX = 1


class PbNavMeshPolyEdgeType(betterproto.Enum):
    EDGE_TYPE_INNER = 0
    EDGE_TYPE_TILE_BOUND = 1
    EDGE_TYPE_TILE_BOUND_UNCONNECT = 2
    EDGE_TYPE_TILE_BOUND_OVERIDE = 3


class HideAndSeekSettleNotifySettleReason(betterproto.Enum):
    SETTLE_REASON_TIME_OUT = 0
    SETTLE_REASON_PLAY_END = 1
    SETTLE_REASON_PLAYER_QUIT = 2


class HideAndSeekStageType(betterproto.Enum):
    HIDE_AND_SEEK_STAGE_TYPE_PREPARE = 0
    HIDE_AND_SEEK_STAGE_TYPE_PICK = 1
    HIDE_AND_SEEK_STAGE_TYPE_GAME = 2
    HIDE_AND_SEEK_STAGE_TYPE_HIDE = 3
    HIDE_AND_SEEK_STAGE_TYPE_SEEK = 4
    HIDE_AND_SEEK_STAGE_TYPE_SETTLE = 5


class HomePlantFieldStatus(betterproto.Enum):
    HOME_PLANT_FIELD_STATUS_STATUE_NONE = 0
    HOME_PLANT_FIELD_STATUS_STATUE_SEED = 1
    HOME_PLANT_FIELD_STATUS_STATUE_SPROUT = 2
    HOME_PLANT_FIELD_STATUS_STATUE_GATHER = 3


class LanguageType(betterproto.Enum):
    LANGUAGE_TYPE_NONE = 0
    LANGUAGE_TYPE_EN = 1
    LANGUAGE_TYPE_SC = 2
    LANGUAGE_TYPE_TC = 3
    LANGUAGE_TYPE_FR = 4
    LANGUAGE_TYPE_DE = 5
    LANGUAGE_TYPE_ES = 6
    LANGUAGE_TYPE_PT = 7
    LANGUAGE_TYPE_RU = 8
    LANGUAGE_TYPE_JP = 9
    LANGUAGE_TYPE_KR = 10
    LANGUAGE_TYPE_TH = 11
    LANGUAGE_TYPE_VN = 12
    LANGUAGE_TYPE_ID = 13
    LANGUAGE_TYPE_TR = 14
    LANGUAGE_TYPE_IT = 15


class InBattleMechanicusCardChallengeState(betterproto.Enum):
    IN_BATTLE_MECHANICUS_CARD_CHALLENGE_STATE_NONE = 0
    IN_BATTLE_MECHANICUS_CARD_CHALLENGE_STATE_ON_GOING = 1
    IN_BATTLE_MECHANICUS_CARD_CHALLENGE_STATE_FAIL = 2
    IN_BATTLE_MECHANICUS_CARD_CHALLENGE_STATE_SUCCESS = 3


class InBattleMechanicusStageType(betterproto.Enum):
    IN_BATTLE_MECHANICUS_STAGE_TYPE_NONE = 0
    IN_BATTLE_MECHANICUS_STAGE_TYPE_BUILD = 1
    IN_BATTLE_MECHANICUS_STAGE_TYPE_CARD_FLIP = 2
    IN_BATTLE_MECHANICUS_STAGE_TYPE_KILL = 3


class InvestigationState(betterproto.Enum):
    STATE_INVALID = 0
    STATE_IN_PROGRESS = 1
    STATE_COMPLETE = 2
    STATE_REWARD_TAKEN = 3


class InvestigationTargetState(betterproto.Enum):
    STATE_INVALID = 0
    STATE_IN_PROGRESS = 1
    STATE_COMPLETE = 2
    STATE_REWARD_TAKEN = 3


class ItemGivingReqItemGivingType(betterproto.Enum):
    ITEM_GIVING_TYPE_QUEST = 0
    ITEM_GIVING_TYPE_GADGET = 1


class LockedPersonallineDataLockReason(betterproto.Enum):
    LOCK_REASON_LEVEL = 0
    LOCK_REASON_QUEST = 1


class LoginRewardConfigType(betterproto.Enum):
    LOGIN_REWARD_CONFIG_TYPE_IMMEDIDATE = 0
    LOGIN_REWARD_CONFIG_TYPE_FIRST = 1


class LuaSetOptionNotifyLuaOptionType(betterproto.Enum):
    LUA_OPTION_TYPE_NONE = 0
    LUA_OPTION_TYPE_PLAYER_INPUT = 1


class LuaShellType(betterproto.Enum):
    LUA_SHELL_TYPE_LUASHELL_NONE = 0
    LUA_SHELL_TYPE_LUASHELL_NORMAL = 1
    LUA_SHELL_TYPE_LUASHELL_SECURITY = 2
    LUA_SHELL_TYPE_LUASHELL_SHELL_CODE = 3


class MarkMapReqOperation(betterproto.Enum):
    OPERATION_ADD = 0
    OPERATION_MOD = 1
    OPERATION_DEL = 2
    OPERATION_GET = 3


class MatchReason(betterproto.Enum):
    MATCH_REASON_NONE = 0
    MATCH_REASON_FINISH = 1
    MATCH_REASON_PLAYER_CANCEL = 2
    MATCH_REASON_TIMEOUT = 3
    MATCH_REASON_PLAYER_CONFIRM = 4
    MATCH_REASON_FAILED = 5
    MATCH_REASON_SYSTEM_ERROR = 6
    MATCH_REASON_INTERRUPTED = 7
    MATCH_REASON_MP_UNAVAILABLE = 8
    MATCH_REASON_CONFIRM_TIMEOUT = 9


class MatchType(betterproto.Enum):
    MATCH_TYPE_NONE = 0
    MATCH_TYPE_DUNGEON = 1
    MATCH_TYPE_MP_PLAY = 2
    MATCH_TYPE_MECHANICUS = 3
    MATCH_TYPE_GENERAL = 4
    MATCH_TYPE_GCG = 5


class MaterialDeleteReturnType(betterproto.Enum):
    MATERIAL_DELETE_RETURN_TYPE_BAG = 0
    MATERIAL_DELETE_RETURN_TYPE_SEED = 1


class MathExpressionType(betterproto.Enum):
    MATH_EXPRESSION_TYPE_EXPR_NONE = 0
    MATH_EXPRESSION_TYPE_EXPR_LEVEL = 1
    MATH_EXPRESSION_TYPE_EXPR_REGISTER_TIME = 2
    MATH_EXPRESSION_TYPE_EXPR_LAST_LOGIN_TIME = 3
    MATH_EXPRESSION_TYPE_EXPR_TOTAL_LOGIN_DAYS = 4
    MATH_EXPRESSION_TYPE_EXPR_PLATFORM = 5


class NpcTalkState(betterproto.Enum):
    NPC_TALK_STATE_NONE = 0
    NPC_TALK_STATE_AUTO = 1
    NPC_TALK_STATE_MANUAL = 2


class ObstacleInfoShapeType(betterproto.Enum):
    SHAPE_TYPE_OBSTACLE_SHAPE_CAPSULE = 0
    SHAPE_TYPE_OBSTACLE_SHAPE_BOX = 1


class OtherPlayerEnterHomeNotifyReason(betterproto.Enum):
    REASON_INVALID = 0
    REASON_ENTER = 1
    REASON_LEAVE = 2


class PerformOperationNotifyOperateType(betterproto.Enum):
    OPERATE_TYPE_NONE = 0
    OPERATE_TYPE_EFFECT = 1


class PlayerApplyEnterHomeResultNotifyReason(betterproto.Enum):
    REASON_PLAYER_JUDGE = 0
    REASON_PLAYER_ENTER_OPTION_REFUSE = 1
    REASON_PLAYER_ENTER_OPTION_DIRECT = 2
    REASON_SYSTEM_JUDGE = 3
    REASON_HOST_IN_MATCH = 4
    REASON_PS_PLAYER_NOT_ACCEPT_OTHERS = 5
    REASON_OPEN_STATE_NOT_OPEN = 6
    REASON_HOST_IN_EDIT_MODE = 7
    REASON_PRIOR_CHECK = 8


class PlayerApplyEnterMpResultNotifyReason(betterproto.Enum):
    REASON_PLAYER_JUDGE = 0
    REASON_SCENE_CANNOT_ENTER = 1
    REASON_PLAYER_CANNOT_ENTER_MP = 2
    REASON_SYSTEM_JUDGE = 3
    REASON_ALLOW_ENTER_PLAYER_FULL = 4
    REASON_WORLD_LEVEL_LOWER_THAN_HOST = 5
    REASON_HOST_IN_MATCH = 6
    REASON_PLAYER_IN_BLACKLIST = 7
    REASON_PS_PLAYER_NOT_ACCEPT_OTHERS = 8
    REASON_HOST_IS_BLOCKED = 9
    REASON_OTHER_DATA_VERSION_NOT_LATEST = 10
    REASON_DATA_VERSION_NOT_LATEST = 11
    REASON_PLAYER_NOT_IN_PLAYER_WORLD = 12
    REASON_MAX_PLAYER = 13


class PlayerLogoutReqReason(betterproto.Enum):
    REASON_DISCONNECT = 0
    REASON_CLIENT_REQ = 1
    REASON_TIMEOUT = 2
    REASON_ADMIN_REQ = 3
    REASON_SERVER_CLOSE = 4
    REASON_GM_CLEAR = 5
    REASON_PLAYER_TRANSFER = 6
    REASON_CLIENT_CHECKSUM_INVALID = 7


class PlayerMatchAgreedResultNotifyReason(betterproto.Enum):
    REASON_SUCC = 0
    REASON_TARGET_SCENE_CANNOT_ENTER = 1
    REASON_SELF_MP_UNAVAILABLE = 2
    REASON_OTHER_DATA_VERSION_NOT_LATEST = 3
    REASON_DATA_VERSION_NOT_LATEST = 4


class PlayerPreEnterMpNotifyState(betterproto.Enum):
    STATE_INVALID = 0
    STATE_START = 1
    STATE_TIMEOUT = 2


class PlayerQuitFromHomeNotifyQuitReason(betterproto.Enum):
    QUIT_REASON_INVALID = 0
    QUIT_REASON_KICK_BY_HOST = 1
    QUIT_REASON_BACK_TO_MY_WORLD = 2
    QUIT_REASON_HOME_BLOCKED = 3
    QUIT_REASON_HOME_IN_EDIT_MODE = 4
    QUIT_REASON_BY_MUIP = 5
    QUIT_REASON_CUR_MODULE_CLOSED = 6


class PlayerQuitFromMpNotifyQuitReason(betterproto.Enum):
    QUIT_REASON_INVALID = 0
    QUIT_REASON_HOST_NO_OTHER_PLAYER = 1
    QUIT_REASON_KICK_BY_HOST = 2
    QUIT_REASON_BACK_TO_MY_WORLD = 3
    QUIT_REASON_KICK_BY_HOST_LOGOUT = 4
    QUIT_REASON_KICK_BY_HOST_BLOCK = 5
    QUIT_REASON_BE_BLOCKED = 6
    QUIT_REASON_KICK_BY_HOST_ENTER_HOME = 7
    QUIT_REASON_HOST_SCENE_INVALID = 8
    QUIT_REASON_KICK_BY_PLAY = 9
    QUIT_REASON_KICK_BY_ISLAND_PARTY_GALLERY_START_FAILED = 10


class ReportReasonType(betterproto.Enum):
    REPORT_REASON_TYPE_NONE = 0
    REPORT_REASON_TYPE_DECEPTIVE_ADS = 1
    REPORT_REASON_TYPE_ABUSING = 2
    REPORT_REASON_TYPE_CHEAT = 3
    REPORT_REASON_TYPE_POLITICAL = 4
    REPORT_REASON_TYPE_OTHER = 5
    REPORT_REASON_TYPE_HOME = 6


class ProjectorOptionReqProjectorOpType(betterproto.Enum):
    PROJECTOR_OP_TYPE_NONE = 0
    PROJECTOR_OP_TYPE_CREATE = 1
    PROJECTOR_OP_TYPE_DESTROY = 2


class QueryPathReqOptionType(betterproto.Enum):
    OPTION_TYPE_NONE = 0
    OPTION_TYPE_NORMAL = 1
    OPTION_TYPE_FIRST_CAN_GO = 2


class QueryPathRspPathStatusType(betterproto.Enum):
    PATH_STATUS_TYPE_FAIL = 0
    PATH_STATUS_TYPE_SUCC = 1
    PATH_STATUS_TYPE_PARTIAL = 2


class WidgetCreatorOpType(betterproto.Enum):
    WIDGET_CREATOR_OP_TYPE_NONE = 0
    WIDGET_CREATOR_OP_TYPE_RETRACT = 1
    WIDGET_CREATOR_OP_TYPE_RETRACT_AND_CREATE = 2


class RegionSearchState(betterproto.Enum):
    REGION_SEARCH_STATE_NONE = 0
    REGION_SEARCH_STATE_UNSTARTED = 1
    REGION_SEARCH_STATE_STARTED = 2
    REGION_SEARCH_STATE_WAIT_REWARD = 3
    REGION_SEARCH_STATE_FINISHED = 4


class RegionSearchChangeRegionNotifyRegionEvent(betterproto.Enum):
    REGION_EVENT_NONE = 0
    REGION_EVENT_ENTER = 1
    REGION_EVENT_LEAVE = 2


class RegionType(betterproto.Enum):
    REGION_TYPE_PRODUCT = 0
    REGION_TYPE_EXAM = 1
    REGION_TYPE_DEV_PUB = 2
    REGION_TYPE_DEV_PRI = 3


class ReliquaryFilterKey(betterproto.Enum):
    RELIQUARY_FILTER_KEY_NONE = 0
    RELIQUARY_FILTER_KEY_LOCK = 1
    RELIQUARY_FILTER_KEY_LEVEL = 2
    RELIQUARY_FILTER_KEY_WEARING = 3


class ReliquaryFilterLevelState(betterproto.Enum):
    RELIQUARY_FILTER_LEVEL_STATE_NONE = 0
    RELIQUARY_FILTER_LEVEL_STATE_FULL_LEVEL = 1
    RELIQUARY_FILTER_LEVEL_STATE_NOT_FULL_LEVEL = 2


class ReliquaryFilterLockState(betterproto.Enum):
    RELIQUARY_FILTER_LOCK_STATE_NONE = 0
    RELIQUARY_FILTER_LOCK_STATE_LOCK = 1
    RELIQUARY_FILTER_LOCK_STATE_UNLOCK = 2


class ReliquaryFilterWearedState(betterproto.Enum):
    RELIQUARY_FILTER_WEARED_STATE_NONE = 0
    RELIQUARY_FILTER_WEARED_STATE_HAS_BEEN_WEARED = 1
    RELIQUARY_FILTER_WEARED_STATE_HAS_NOT_BEEN_WEARED = 2


class RemoveRandTaskInfoNotifyFinishReason(betterproto.Enum):
    FINISH_REASON_DEFAULT = 0
    FINISH_REASON_CLEAR = 1
    FINISH_REASON_DISTANCE = 2
    FINISH_REASON_FINISH = 3


class Retcode(betterproto.Enum):
    RET_SUCC = 0
    RET_FAIL = -1
    RET_SVR_ERROR = 1
    RET_UNKNOWN_ERROR = 2
    RET_FREQUENT = 3
    RET_NODE_FORWARD_ERROR = 4
    RET_NOT_FOUND_CONFIG = 5
    RET_SYSTEM_BUSY = 6
    RET_GM_UID_BIND = 7
    RET_FORBIDDEN = 8
    RET_STOP_REGISTER = 10
    RET_STOP_SERVER = 11
    RET_ACCOUNT_VEIRFY_ERROR = 12
    RET_ACCOUNT_FREEZE = 13
    RET_REPEAT_LOGIN = 14
    RET_CLIENT_VERSION_ERROR = 15
    RET_TOKEN_ERROR = 16
    RET_ACCOUNT_NOT_EXIST = 17
    RET_WAIT_OTHER_LOGIN = 18
    RET_ANOTHER_LOGIN = 19
    RET_CLIENT_FORCE_UPDATE = 20
    RET_BLACK_UID = 21
    RET_LOGIN_DB_FAIL = 22
    RET_LOGIN_INIT_FAIL = 23
    RET_MYSQL_DUPLICATE = 24
    RET_MAX_PLAYER = 25
    RET_ANTI_ADDICT = 26
    RET_PS_PLAYER_WITHOUT_ONLINE_ID = 27
    RET_ONLINE_ID_NOT_FOUND = 28
    RET_ONLNE_ID_NOT_MATCH = 29
    RET_REGISTER_IS_FULL = 30
    RET_CHECKSUM_INVALID = 31
    RET_BLACK_REGISTER_IP = 32
    RET_EXCEED_REGISTER_RATE = 33
    RET_UNKNOWN_PLATFORM = 34
    RET_TOKEN_PARAM_ERROR = 35
    RET_ANTI_OFFLINE_ERROR = 36
    RET_BLACK_LOGIN_IP = 37
    RET_GET_TOKEN_SESSION_HAS_UID = 38
    RET_ENVIRONMENT_ERROR = 39
    RET_CHECK_CLIENT_VERSION_HASH_FAIL = 40
    RET_MINOR_REGISTER_FOBIDDEN = 41
    RET_SECURITY_LIBRARY_ERROR = 42
    RET_AVATAR_IN_CD = 101
    RET_AVATAR_NOT_ALIVE = 102
    RET_AVATAR_NOT_ON_SCENE = 103
    RET_CAN_NOT_FIND_AVATAR = 104
    RET_CAN_NOT_DEL_CUR_AVATAR = 105
    RET_DUPLICATE_AVATAR = 106
    RET_AVATAR_IS_SAME_ONE = 107
    RET_AVATAR_LEVEL_LESS_THAN = 108
    RET_AVATAR_CAN_NOT_CHANGE_ELEMENT = 109
    RET_AVATAR_BREAK_LEVEL_LESS_THAN = 110
    RET_AVATAR_ON_MAX_BREAK_LEVEL = 111
    RET_AVATAR_ID_ALREADY_EXIST = 112
    RET_AVATAR_NOT_DEAD = 113
    RET_AVATAR_IS_REVIVING = 114
    RET_AVATAR_ID_ERROR = 115
    RET_REPEAT_SET_PLAYER_BORN_DATA = 116
    RET_PLAYER_LEVEL_LESS_THAN = 117
    RET_AVATAR_LIMIT_LEVEL_ERROR = 118
    RET_CUR_AVATAR_NOT_ALIVE = 119
    RET_CAN_NOT_FIND_TEAM = 120
    RET_CAN_NOT_FIND_CUR_TEAM = 121
    RET_AVATAR_NOT_EXIST_IN_TEAM = 122
    RET_CAN_NOT_REMOVE_CUR_AVATAR_FROM_TEAM = 123
    RET_CAN_NOT_USE_REVIVE_ITEM_FOR_CUR_AVATAR = 124
    RET_TEAM_COST_EXCEED_LIMIT = 125
    RET_TEAM_AVATAR_IN_EXPEDITION = 126
    RET_TEAM_CAN_NOT_CHOSE_REPLACE_USE = 127
    RET_AVATAR_IN_COMBAT = 128
    RET_NICKNAME_UTF8_ERROR = 130
    RET_NICKNAME_TOO_LONG = 131
    RET_NICKNAME_WORD_ILLEGAL = 132
    RET_NICKNAME_TOO_MANY_DIGITS = 133
    RET_NICKNAME_IS_EMPTY = 134
    RET_NICKNAME_MONTHLY_LIMIT = 135
    RET_NICKNAME_NOT_CHANGED = 136
    RET_PLAYER_NOT_ONLINE = 140
    RET_OPEN_STATE_NOT_OPEN = 141
    RET_FEATURE_CLOSED = 142
    RET_AVATAR_EXPEDITION_AVATAR_DIE = 152
    RET_AVATAR_EXPEDITION_COUNT_LIMIT = 153
    RET_AVATAR_EXPEDITION_MAIN_FORBID = 154
    RET_AVATAR_EXPEDITION_TRIAL_FORBID = 155
    RET_TEAM_NAME_ILLEGAL = 156
    RET_IS_NOT_IN_STANDBY = 157
    RET_IS_IN_DUNGEON = 158
    RET_IS_IN_LOCK_AVATAR_QUEST = 159
    RET_IS_USING_TRIAL_AVATAR = 160
    RET_IS_USING_TEMP_AVATAR = 161
    RET_NOT_HAS_FLYCLOAK = 162
    RET_FETTER_REWARD_ALREADY_GOT = 163
    RET_FETTER_REWARD_LEVEL_NOT_ENOUGH = 164
    RET_WORLD_LEVEL_ADJUST_MIN_LEVEL = 165
    RET_WORLD_LEVEL_ADJUST_CD = 166
    RET_NOT_HAS_COSTUME = 167
    RET_COSTUME_AVATAR_ERROR = 168
    RET_FLYCLOAK_PLATFORM_TYPE_ERR = 169
    RET_IN_TRANSFER = 170
    RET_IS_IN_LOCK_AVATAR = 171
    RET_FULL_BACKUP_TEAM = 172
    RET_BACKUP_TEAM_ID_NOT_VALID = 173
    RET_BACKUP_TEAM_IS_CUR_TEAM = 174
    RET_AVATAR_RENAME_IN_CD = 175
    RET_AVATAR_RENAME_IN_AUDIT = 176
    RET_AVATAR_RENAME_IN_IP_BLACK_LIST = 177
    RET_FLOAT_ERROR = 201
    RET_NPC_NOT_EXIST = 301
    RET_NPC_TOO_FAR = 302
    RET_NOT_CURRENT_TALK = 303
    RET_NPC_CREATE_FAIL = 304
    RET_NPC_MOVE_FAIL = 305
    RET_QUEST_NOT_EXIST = 401
    RET_QUEST_IS_FAIL = 402
    RET_QUEST_CONTENT_ERROR = 403
    RET_BARGAIN_NOT_ACTIVATED = 404
    RET_BARGAIN_FINISHED = 405
    RET_INFERENCE_ASSOCIATE_WORD_ERROR = 406
    RET_INFERENCE_SUBMIT_WORD_NO_CONCLUSION = 407
    RET_POINT_NOT_UNLOCKED = 501
    RET_POINT_TOO_FAR = 502
    RET_POINT_ALREAY_UNLOCKED = 503
    RET_ENTITY_NOT_EXIST = 504
    RET_ENTER_SCENE_FAIL = 505
    RET_PLAYER_IS_ENTER_SCENE = 506
    RET_CITY_MAX_LEVEL = 507
    RET_AREA_LOCKED = 508
    RET_JOIN_OTHER_WAIT = 509
    RET_WEATHER_AREA_NOT_FOUND = 510
    RET_WEATHER_IS_LOCKED = 511
    RET_NOT_IN_SELF_SCENE = 512
    RET_GROUP_NOT_EXIST = 513
    RET_MARK_NAME_ILLEGAL = 514
    RET_MARK_ALREADY_EXISTS = 515
    RET_MARK_OVERFLOW = 516
    RET_MARK_NOT_EXISTS = 517
    RET_MARK_UNKNOWN_TYPE = 518
    RET_MARK_NAME_TOO_LONG = 519
    RET_DISTANCE_LONG = 520
    RET_ENTER_SCENE_TOKEN_INVALID = 521
    RET_NOT_IN_WORLD_SCENE = 522
    RET_ANY_GALLERY_STARTED = 523
    RET_GALLERY_NOT_START = 524
    RET_GALLERY_INTERRUPT_ONLY_ON_SINGLE_MODE = 525
    RET_GALLERY_CANNOT_INTERRUPT = 526
    RET_GALLERY_WORLD_NOT_MEET = 527
    RET_GALLERY_SCENE_NOT_MEET = 528
    RET_CUR_PLAY_CANNOT_TRANSFER = 529
    RET_CANT_USE_WIDGET_IN_HOME_SCENE = 530
    RET_SCENE_GROUP_NOT_MATCH = 531
    RET_POS_ROT_INVALID = 551
    RET_MARK_INVALID_SCENE_ID = 552
    RET_INVALID_SCENE_TO_USE_ANCHOR_POINT = 553
    RET_ENTER_HOME_SCENE_FAIL = 554
    RET_CUR_SCENE_IS_NULL = 555
    RET_GROUP_ID_ERROR = 556
    RET_GALLERY_INTERRUPT_NOT_OWNER = 557
    RET_NO_SPRING_IN_AREA = 558
    RET_AREA_NOT_IN_SCENE = 559
    RET_INVALID_CITY_ID = 560
    RET_INVALID_SCENE_ID = 561
    RET_DEST_SCENE_IS_NOT_ALLOW = 562
    RET_LEVEL_TAG_SWITCH_IN_CD = 563
    RET_LEVEL_TAG_ALREADY_EXIST = 564
    RET_INVALID_AREA_ID = 565
    RET_ITEM_NOT_EXIST = 601
    RET_PACK_EXCEED_MAX_WEIGHT = 602
    RET_ITEM_NOT_DROPABLE = 603
    RET_ITEM_NOT_USABLE = 604
    RET_ITEM_INVALID_USE_COUNT = 605
    RET_ITEM_INVALID_DROP_COUNT = 606
    RET_ITEM_ALREADY_EXIST = 607
    RET_ITEM_IN_COOLDOWN = 608
    RET_ITEM_COUNT_NOT_ENOUGH = 609
    RET_ITEM_INVALID_TARGET = 610
    RET_RECIPE_NOT_EXIST = 611
    RET_RECIPE_LOCKED = 612
    RET_RECIPE_UNLOCKED = 613
    RET_COMPOUND_QUEUE_FULL = 614
    RET_COMPOUND_NOT_FINISH = 615
    RET_MAIL_ITEM_NOT_GET = 616
    RET_ITEM_EXCEED_LIMIT = 617
    RET_AVATAR_CAN_NOT_USE = 618
    RET_ITEM_NEED_PLAYER_LEVEL = 619
    RET_RECIPE_NOT_AUTO_QTE = 620
    RET_COMPOUND_BUSY_QUEUE = 621
    RET_NEED_MORE_SCOIN = 622
    RET_SKILL_DEPOT_NOT_FOUND = 623
    RET_HCOIN_NOT_ENOUGH = 624
    RET_SCOIN_NOT_ENOUGH = 625
    RET_HCOIN_EXCEED_LIMIT = 626
    RET_SCOIN_EXCEED_LIMIT = 627
    RET_MAIL_EXPIRED = 628
    RET_REWARD_HAS_TAKEN = 629
    RET_COMBINE_COUNT_TOO_LARGE = 630
    RET_GIVING_ITEM_WRONG = 631
    RET_GIVING_IS_FINISHED = 632
    RET_GIVING_NOT_ACTIVED = 633
    RET_FORGE_QUEUE_FULL = 634
    RET_FORGE_QUEUE_CAPACITY = 635
    RET_FORGE_QUEUE_NOT_FOUND = 636
    RET_FORGE_QUEUE_EMPTY = 637
    RET_NOT_SUPPORT_ITEM = 638
    RET_ITEM_EMPTY = 639
    RET_VIRTUAL_EXCEED_LIMIT = 640
    RET_MATERIAL_EXCEED_LIMIT = 641
    RET_EQUIP_EXCEED_LIMIT = 642
    RET_ITEM_SHOULD_HAVE_NO_LEVEL = 643
    RET_WEAPON_PROMOTE_LEVEL_EXCEED_LIMIT = 644
    RET_WEAPON_LEVEL_INVALID = 645
    RET_UNKNOW_ITEM_TYPE = 646
    RET_ITEM_COUNT_IS_ZERO = 647
    RET_ITEM_IS_EXPIRED = 648
    RET_ITEM_EXCEED_OUTPUT_LIMIT = 649
    RET_EQUIP_LEVEL_HIGHER = 650
    RET_EQUIP_CAN_NOT_WAKE_OFF_WEAPON = 651
    RET_EQUIP_HAS_BEEN_WEARED = 652
    RET_EQUIP_WEARED_CANNOT_DROP = 653
    RET_AWAKEN_LEVEL_MAX = 654
    RET_MCOIN_NOT_ENOUGH = 655
    RET_MCOIN_EXCEED_LIMIT = 656
    RET_RESIN_NOT_ENOUGH = 660
    RET_RESIN_EXCEED_LIMIT = 661
    RET_RESIN_OPENSTATE_OFF = 662
    RET_RESIN_BOUGHT_COUNT_EXCEEDED = 663
    RET_RESIN_CARD_DAILY_REWARD_HAS_TAKEN = 664
    RET_RESIN_CARD_EXPIRED = 665
    RET_AVATAR_CAN_NOT_COOK = 666
    RET_ATTACH_AVATAR_CD = 667
    RET_AUTO_RECOVER_OPENSTATE_OFF = 668
    RET_AUTO_RECOVER_BOUGHT_COUNT_EXCEEDED = 669
    RET_RESIN_GAIN_FAILED = 670
    RET_WIDGET_ORNAMENTS_TYPE_ERROR = 671
    RET_ALL_TARGET_SATIATION_FULL = 672
    RET_FORGE_WORLD_LEVEL_NOT_MATCH = 673
    RET_FORGE_POINT_NOT_ENOUGH = 674
    RET_WIDGET_ANCHOR_POINT_FULL = 675
    RET_WIDGET_ANCHOR_POINT_NOT_FOUND = 676
    RET_ALL_BONFIRE_EXCEED_MAX_COUNT = 677
    RET_BONFIRE_EXCEED_MAX_COUNT = 678
    RET_LUNCH_BOX_DATA_ERROR = 679
    RET_INVALID_QUICK_USE_WIDGET = 680
    RET_INVALID_REPLACE_RESIN_COUNT = 681
    RET_PREV_DETECTED_GATHER_NOT_FOUND = 682
    RET_GOT_ALL_ONEOFF_GAHTER = 683
    RET_INVALID_WIDGET_MATERIAL_ID = 684
    RET_WIDGET_DETECTOR_NO_HINT_TO_CLEAR = 685
    RET_WIDGET_ALREADY_WITHIN_NEARBY_RADIUS = 686
    RET_WIDGET_CLIENT_COLLECTOR_NEED_POINTS = 687
    RET_WIDGET_IN_COMBAT = 688
    RET_WIDGET_NOT_SET_QUICK_USE = 689
    RET_ALREADY_ATTACH_WIDGET = 690
    RET_EQUIP_IS_LOCKED = 691
    RET_FORGE_IS_LOCKED = 692
    RET_COMBINE_IS_LOCKED = 693
    RET_FORGE_OUTPUT_STACK_LIMIT = 694
    RET_ALREADY_DETTACH_WIDGET = 695
    RET_GADGET_BUILDER_EXCEED_MAX_COUNT = 696
    RET_REUNION_PRIVILEGE_RESIN_TYPE_IS_NORMAL = 697
    RET_BONUS_COUNT_EXCEED_DOUBLE_LIMIT = 698
    RET_RELIQUARY_DECOMPOSE_PARAM_ERROR = 699
    RET_ITEM_COMBINE_COUNT_NOT_ENOUGH = 700
    RET_GOODS_NOT_EXIST = 701
    RET_GOODS_MATERIAL_NOT_ENOUGH = 702
    RET_GOODS_NOT_IN_TIME = 703
    RET_GOODS_BUY_NUM_NOT_ENOUGH = 704
    RET_GOODS_BUY_NUM_ERROR = 705
    RET_SHOP_NOT_OPEN = 706
    RET_SHOP_CONTENT_NOT_MATCH = 707
    RET_SHOP_BATCH_BUY_SHOP_LIMIT = 708
    RET_SHOP_BATCH_BUY_COUNT_LIMIT = 709
    RET_CHAT_FORBIDDEN = 798
    RET_CHAT_CD = 799
    RET_CHAT_FREQUENTLY = 800
    RET_GADGET_NOT_EXIST = 801
    RET_GADGET_NOT_INTERACTIVE = 802
    RET_GADGET_NOT_GATHERABLE = 803
    RET_CHEST_IS_LOCKED = 804
    RET_GADGET_CREATE_FAIL = 805
    RET_WORKTOP_OPTION_NOT_EXIST = 806
    RET_GADGET_STATUE_NOT_ACTIVE = 807
    RET_GADGET_STATUE_OPENED = 808
    RET_BOSS_CHEST_NO_QUALIFICATION = 809
    RET_BOSS_CHEST_LIFE_TIME_OVER = 810
    RET_BOSS_CHEST_WEEK_NUM_LIMIT = 811
    RET_BOSS_CHEST_GUEST_WORLD_LEVEL = 812
    RET_BOSS_CHEST_HAS_TAKEN = 813
    RET_BLOSSOM_CHEST_NO_QUALIFICATION = 814
    RET_BLOSSOM_CHEST_LIFE_TIME_OVER = 815
    RET_BLOSSOM_CHEST_HAS_TAKEN = 816
    RET_BLOSSOM_CHEST_GUEST_WORLD_LEVEL = 817
    RET_MP_PLAY_REWARD_NO_QUALIFICATION = 818
    RET_MP_PLAY_REWARD_HAS_TAKEN = 819
    RET_GENERAL_REWARD_NO_QUALIFICATION = 820
    RET_GENERAL_REWARD_LIFE_TIME_OVER = 821
    RET_GENERAL_REWARD_HAS_TAKEN = 822
    RET_GADGET_NOT_VEHICLE = 823
    RET_VEHICLE_SLOT_OCCUPIED = 824
    RET_NOT_IN_VEHICLE = 825
    RET_CREATE_VEHICLE_IN_CD = 826
    RET_CREATE_VEHICLE_POS_INVALID = 827
    RET_VEHICLE_POINT_NOT_UNLOCK = 828
    RET_GADGET_INTERACT_COND_NOT_MEET = 829
    RET_GADGET_INTERACT_PARAM_ERROR = 830
    RET_GADGET_CUSTOM_COMBINATION_INVALID = 831
    RET_DESHRET_OBELISK_DUPLICATE_INTERACT = 832
    RET_DESHRET_OBELISK_NO_AVAIL_CHEST = 833
    RET_ACTIVITY_CLOSE = 860
    RET_ACTIVITY_ITEM_ERROR = 861
    RET_ACTIVITY_CONTRIBUTION_NOT_ENOUGH = 862
    RET_SEA_LAMP_PHASE_NOT_FINISH = 863
    RET_SEA_LAMP_FLY_NUM_LIMIT = 864
    RET_SEA_LAMP_FLY_LAMP_WORD_ILLEGAL = 865
    RET_ACTIVITY_WATCHER_REWARD_TAKEN = 866
    RET_ACTIVITY_WATCHER_REWARD_NOT_FINISHED = 867
    RET_SALESMAN_ALREADY_DELIVERED = 868
    RET_SALESMAN_REWARD_COUNT_NOT_ENOUGH = 869
    RET_SALESMAN_POSITION_INVALID = 870
    RET_DELIVER_NOT_FINISH_ALL_QUEST = 871
    RET_DELIVER_ALREADY_TAKE_DAILY_REWARD = 872
    RET_ASTER_PROGRESS_EXCEED_LIMIT = 873
    RET_ASTER_CREDIT_EXCEED_LIMIT = 874
    RET_ASTER_TOKEN_EXCEED_LIMIT = 875
    RET_ASTER_CREDIT_NOT_ENOUGH = 876
    RET_ASTER_TOKEN_NOT_ENOUGH = 877
    RET_ASTER_SPECIAL_REWARD_HAS_TAKEN = 878
    RET_FLIGHT_GROUP_ACTIVITY_NOT_STARTED = 879
    RET_ASTER_MID_PREVIOUS_BATTLE_NOT_FINISHED = 880
    RET_DRAGON_SPINE_SHIMMERING_ESSENCE_EXCEED_LIMIT = 881
    RET_DRAGON_SPINE_WARM_ESSENCE_EXCEED_LIMIT = 882
    RET_DRAGON_SPINE_WONDROUS_ESSENCE_EXCEED_LIMIT = 883
    RET_DRAGON_SPINE_SHIMMERING_ESSENCE_NOT_ENOUGH = 884
    RET_DRAGON_SPINE_WARM_ESSENCE_NOT_ENOUGH = 885
    RET_DRAGON_SPINE_WONDROUS_ESSENCE_NOT_ENOUGH = 886
    RET_EFFIGY_FIRST_PASS_REWARD_HAS_TAKEN = 891
    RET_EFFIGY_REWARD_HAS_TAKEN = 892
    RET_TREASURE_MAP_ADD_TOKEN_EXCEED_LIMIT = 893
    RET_TREASURE_MAP_TOKEN_NOT_ENOUGHT = 894
    RET_SEA_LAMP_COIN_EXCEED_LIMIT = 895
    RET_SEA_LAMP_COIN_NOT_ENOUGH = 896
    RET_SEA_LAMP_POPULARITY_EXCEED_LIMIT = 897
    RET_ACTIVITY_AVATAR_REWARD_NOT_OPEN = 898
    RET_ACTIVITY_AVATAR_REWARD_HAS_TAKEN = 899
    RET_ARENA_ACTIVITY_ALREADY_STARTED = 900
    RET_TALENT_ALREAY_UNLOCKED = 901
    RET_PREV_TALENT_NOT_UNLOCKED = 902
    RET_BIG_TALENT_POINT_NOT_ENOUGH = 903
    RET_SMALL_TALENT_POINT_NOT_ENOUGH = 904
    RET_PROUD_SKILL_ALREADY_GOT = 905
    RET_PREV_PROUD_SKILL_NOT_GET = 906
    RET_PROUD_SKILL_MAX_LEVEL = 907
    RET_CANDIDATE_SKILL_DEPOT_ID_NOT_FIND = 910
    RET_SKILL_DEPOT_IS_THE_SAME = 911
    RET_MONSTER_NOT_EXIST = 1001
    RET_MONSTER_CREATE_FAIL = 1002
    RET_DUNGEON_ENTER_FAIL = 1101
    RET_DUNGEON_QUIT_FAIL = 1102
    RET_DUNGEON_ENTER_EXCEED_DAY_COUNT = 1103
    RET_DUNGEON_REVIVE_EXCEED_MAX_COUNT = 1104
    RET_DUNGEON_REVIVE_FAIL = 1105
    RET_DUNGEON_NOT_SUCCEED = 1106
    RET_DUNGEON_CAN_NOT_CANCEL = 1107
    RET_DEST_DUNGEON_SETTLED = 1108
    RET_DUNGEON_CANDIDATE_TEAM_IS_FULL = 1109
    RET_DUNGEON_CANDIDATE_TEAM_IS_DISMISS = 1110
    RET_DUNGEON_CANDIDATE_TEAM_NOT_ALL_READY = 1111
    RET_DUNGEON_CANDIDATE_TEAM_HAS_REPEAT_AVATAR = 1112
    RET_DUNGEON_CANDIDATE_NOT_SINGEL_PASS = 1113
    RET_DUNGEON_REPLAY_NEED_ALL_PLAYER_DIE = 1114
    RET_DUNGEON_REPLAY_HAS_REVIVE_COUNT = 1115
    RET_DUNGEON_OTHERS_LEAVE = 1116
    RET_DUNGEON_ENTER_LEVEL_LIMIT = 1117
    RET_DUNGEON_CANNOT_ENTER_PLOT_IN_MP = 1118
    RET_DUNGEON_DROP_SUBFIELD_LIMIT = 1119
    RET_DUNGEON_BE_INVITE_PLAYER_AVATAR_ALL_DIE = 1120
    RET_DUNGEON_CANNOT_KICK = 1121
    RET_DUNGEON_CANDIDATE_TEAM_SOMEONE_LEVEL_LIMIT = 1122
    RET_DUNGEON_IN_FORCE_QUIT = 1123
    RET_DUNGEON_GUEST_QUIT_DUNGEON = 1124
    RET_DUNGEON_TICKET_FAIL = 1125
    RET_CUR_DUNGEON_SETTLED = 1126
    RET_MP_NOT_IN_MY_WORLD = 1201
    RET_MP_IN_MP_MODE = 1202
    RET_MP_SCENE_IS_FULL = 1203
    RET_MP_MODE_NOT_AVAILABLE = 1204
    RET_MP_PLAYER_NOT_ENTERABLE = 1205
    RET_MP_QUEST_BLOCK_MP = 1206
    RET_MP_IN_ROOM_SCENE = 1207
    RET_MP_WORLD_IS_FULL = 1208
    RET_MP_PLAYER_NOT_ALLOW_ENTER = 1209
    RET_MP_PLAYER_DISCONNECTED = 1210
    RET_MP_NOT_IN_MP_MODE = 1211
    RET_MP_OWNER_NOT_ENTER = 1212
    RET_MP_ALLOW_ENTER_PLAYER_FULL = 1213
    RET_MP_TARGET_PLAYER_IN_TRANSFER = 1214
    RET_MP_TARGET_ENTERING_OTHER = 1215
    RET_MP_OTHER_ENTERING = 1216
    RET_MP_ENTER_MAIN_PLAYER_IN_PLOT = 1217
    RET_MP_NOT_PS_PLAYER = 1218
    RET_MP_PLAY_NOT_ACTIVE = 1219
    RET_MP_PLAY_REMAIN_REWARDS = 1220
    RET_MP_PLAY_NO_REWARD = 1221
    RET_MP_OPEN_STATE_FAIL = 1223
    RET_MP_PLAYER_IN_BLACKLIST = 1224
    RET_MP_REPLY_TIMEOUT = 1225
    RET_MP_IS_BLOCK = 1226
    RET_MP_ENTER_MAIN_PLAYER_IN_MP_PLAY = 1227
    RET_MP_IN_MP_PLAY_BATTLE = 1228
    RET_MP_GUEST_HAS_REWARD_REMAINED = 1229
    RET_MP_QUIT_MP_INVALID = 1230
    RET_MP_OTHER_DATA_VERSION_NOT_LATEST = 1231
    RET_MP_DATA_VERSION_NOT_LATEST = 1232
    RET_MP_CUR_WORLD_NOT_ENTERABLE = 1233
    RET_MP_ANY_GALLERY_STARTED = 1234
    RET_MP_HAS_ACTIVE_DRAFT = 1235
    RET_MP_PLAYER_IN_DUNGEON = 1236
    RET_MP_MATCH_FULL = 1237
    RET_MP_MATCH_LIMIT = 1238
    RET_MP_MATCH_IN_PUNISH = 1239
    RET_MP_IS_IN_MULTISTAGE = 1240
    RET_MP_MATCH_PLAY_NOT_OPEN = 1241
    RET_MP_ONLY_MP_WITH_PS_PLAYER = 1242
    RET_MP_GUEST_LOADING_FIRST_ENTER = 1243
    RET_MP_SUMMER_TIME_SPRINT_BOAT_ONGOING = 1244
    RET_MP_BLITZ_RUSH_PARKOUR_CHALLENGE_ONGOING = 1245
    RET_MP_MUSIC_GAME_ONGOING = 1246
    RET_MP_IN_MPING_MODE = 1247
    RET_MP_OWNER_IN_SINGLE_SCENE = 1248
    RET_MP_IN_SINGLE_SCENE = 1249
    RET_MP_REPLY_NO_VALID_AVATAR = 1250
    RET_MP_IS_NOT_IN_TRANSFER_GUARD = 1251
    RET_MAIL_PARA_ERR = 1301
    RET_MAIL_MAX_NUM = 1302
    RET_MAIL_ITEM_NUM_EXCEED = 1303
    RET_MAIL_TITLE_LEN_EXCEED = 1304
    RET_MAIL_CONTENT_LEN_EXCEED = 1305
    RET_MAIL_SENDER_LEN_EXCEED = 1306
    RET_MAIL_PARSE_PACKET_FAIL = 1307
    RET_OFFLINE_MSG_MAX_NUM = 1308
    RET_OFFLINE_MSG_SAME_TICKET = 1309
    RET_MAIL_EXCEL_MAIL_TYPE_ERROR = 1310
    RET_MAIL_CANNOT_SEND_MCOIN = 1311
    RET_MAIL_HCOIN_EXCEED_LIMIT = 1312
    RET_MAIL_SCOIN_EXCEED_LIMIT = 1313
    RET_MAIL_MATERIAL_ID_INVALID = 1314
    RET_MAIL_AVATAR_EXCEED_LIMIT = 1315
    RET_MAIL_GACHA_TICKET_ETC_EXCEED_LIMIT = 1316
    RET_MAIL_ITEM_EXCEED_CEHUA_LIMIT = 1317
    RET_MAIL_SPACE_OR_REST_NUM_NOT_ENOUGH = 1318
    RET_MAIL_TICKET_IS_EMPTY = 1319
    RET_MAIL_TRANSACTION_IS_EMPTY = 1320
    RET_MAIL_DELETE_COLLECTED = 1321
    RET_DAILY_TASK_NOT_FINISH = 1330
    RET_DAILY_TAKS_HAS_TAKEN = 1331
    RET_SOCIAL_OFFLINE_MSG_NUM_EXCEED = 1332
    RET_DAILY_TASK_FILTER_CITY_NOT_OPEN = 1333
    RET_GACHA_INAVAILABLE = 1401
    RET_GACHA_RANDOM_NOT_MATCH = 1402
    RET_GACHA_SCHEDULE_NOT_MATCH = 1403
    RET_GACHA_INVALID_TIMES = 1404
    RET_GACHA_COST_ITEM_NOT_ENOUGH = 1405
    RET_GACHA_TIMES_LIMIT = 1406
    RET_GACHA_WISH_SAME_ITEM = 1407
    RET_GACHA_WISH_INVALID_ITEM = 1408
    RET_GACHA_MINORS_TIMES_LIMIT = 1409
    RET_GACHA_GENERAL_TIMES_LIMIT = 1410
    RET_INVESTIGAITON_NOT_IN_PROGRESS = 1501
    RET_INVESTIGAITON_UNCOMPLETE = 1502
    RET_INVESTIGAITON_REWARD_TAKEN = 1503
    RET_INVESTIGAITON_TARGET_STATE_ERROR = 1504
    RET_PUSH_TIPS_NOT_FOUND = 1505
    RET_SIGN_IN_RECORD_NOT_FOUND = 1506
    RET_ALREADY_HAVE_SIGNED_IN = 1507
    RET_SIGN_IN_COND_NOT_SATISFIED = 1508
    RET_BONUS_ACTIVITY_NOT_UNREWARDED = 1509
    RET_SIGN_IN_REWARDED = 1510
    RET_TOWER_NOT_OPEN = 1521
    RET_TOWER_HAVE_DAILY_RECORD = 1522
    RET_TOWER_NOT_RECORD = 1523
    RET_TOWER_HAVE_RECORD = 1524
    RET_TOWER_TEAM_NUM_ERROR = 1525
    RET_TOWER_FLOOR_NOT_OPEN = 1526
    RET_TOWER_NO_FLOOR_STAR_RECORD = 1527
    RET_ALREADY_HAS_TOWER_BUFF = 1528
    RET_DUPLICATE_ENTER_LEVEL = 1529
    RET_NOT_IN_TOWER_LEVEL = 1530
    RET_IN_TOWER_LEVEL = 1531
    RET_TOWER_PREV_FLOOR_NOT_FINISH = 1532
    RET_TOWER_STAR_NOT_ENOUGH = 1533
    RET_BATTLE_PASS_NO_SCHEDULE = 1541
    RET_BATTLE_PASS_HAS_BUYED = 1542
    RET_BATTLE_PASS_LEVEL_OVERFLOW = 1543
    RET_BATTLE_PASS_PRODUCT_EXPIRED = 1544
    RET_MATCH_HOST_QUIT = 1561
    RET_MATCH_ALREADY_IN_MATCH = 1562
    RET_MATCH_NOT_IN_MATCH = 1563
    RET_MATCH_APPLYING_ENTER_MP = 1564
    RET_MATCH_INCORRECT_SCENE = 1565
    RET_WIDGET_TREASURE_SPOT_NOT_FOUND = 1581
    RET_WIDGET_TREASURE_ENTITY_EXISTS = 1582
    RET_WIDGET_TREASURE_SPOT_FAR_AWAY = 1583
    RET_WIDGET_TREASURE_FINISHED_TODAY = 1584
    RET_WIDGET_QUICK_USE_REQ_PARAM_ERROR = 1585
    RET_WIDGET_CAMERA_SCAN_ID_ERROR = 1586
    RET_WIDGET_NOT_ACTIVE = 1587
    RET_WIDGET_FEATHER_NOT_ACTIVE = 1588
    RET_WIDGET_FEATHER_GADGET_TOO_FAR_AWAY = 1589
    RET_WIDGET_CAPTURE_ANIMAL_NOT_EXIST = 1590
    RET_WIDGET_CAPTURE_ANIMAL_DROP_BAG_LIMIT = 1591
    RET_WIDGET_CAPTURE_ANIMAL_CAN_NOT_CAPTURE = 1592
    RET_WIDGET_SKY_CRYSTAL_ALL_COLLECTED = 1593
    RET_WIDGET_SKY_CRYSTAL_HINT_ALREADY_EXIST = 1594
    RET_WIDGET_SKY_CRYSTAL_NOT_FOUND = 1595
    RET_WIDGET_SKY_CRYSTAL_NO_HINT_TO_CLEAR = 1596
    RET_WIDGET_LIGHT_STONE_ENERGY_NOT_ENOUGH = 1597
    RET_WIDGET_TOY_CRYSTAL_ENERGY_NOT_ENOUGH = 1598
    RET_WIDGET_LIGHT_STONE_LEVEL_NOT_ENOUGH = 1599
    RET_UID_NOT_EXIST = 2001
    RET_PARSE_BIN_ERROR = 2002
    RET_ACCOUNT_INFO_NOT_EXIST = 2003
    RET_ORDER_INFO_NOT_EXIST = 2004
    RET_SNAPSHOT_INDEX_ERROR = 2005
    RET_MAIL_HAS_BEEN_SENT = 2006
    RET_PRODUCT_NOT_EXIST = 2007
    RET_UNFINISH_ORDER = 2008
    RET_ID_NOT_EXIST = 2009
    RET_ORDER_TRADE_EARLY = 2010
    RET_ORDER_FINISHED = 2011
    RET_GAMESERVER_VERSION_WRONG = 2012
    RET_OFFLINE_OP_FULL_LENGTH = 2013
    RET_CONCERT_PRODUCT_OBTAIN_LIMIT = 2014
    RET_CONCERT_PRODUCT_TICKET_DUPLICATED = 2015
    RET_CONCERT_PRODUCT_TICKET_EMPTY = 2016
    RET_REDIS_MODIFIED = 5001
    RET_REDIS_UID_NOT_EXIST = 5002
    RET_PATHFINDING_DATA_NOT_EXIST = 6001
    RET_PATHFINDING_DESTINATION_NOT_EXIST = 6002
    RET_PATHFINDING_ERROR_SCENE = 6003
    RET_PATHFINDING_SCENE_DATA_LOADING = 6004
    RET_FRIEND_COUNT_EXCEEDED = 7001
    RET_PLAYER_NOT_EXIST = 7002
    RET_ALREADY_SENT_ADD_REQUEST = 7003
    RET_ASK_FRIEND_LIST_FULL = 7004
    RET_PLAYER_ALREADY_IS_FRIEND = 7005
    RET_PLAYER_NOT_ASK_FRIEND = 7006
    RET_TARGET_FRIEND_COUNT_EXCEED = 7007
    RET_NOT_FRIEND = 7008
    RET_BIRTHDAY_CANNOT_BE_SET_TWICE = 7009
    RET_CANNOT_ADD_SELF_FRIEND = 7010
    RET_SIGNATURE_ILLEGAL = 7011
    RET_PS_PLAYER_CANNOT_ADD_FRIENDS = 7012
    RET_PS_PLAYER_CANNOT_REMOVE_FRIENDS = 7013
    RET_NAME_CARD_NOT_UNLOCKED = 7014
    RET_ALREADY_IN_BLACKLIST = 7015
    RET_PS_PALEYRS_CANNOT_ADD_BLACKLIST = 7016
    RET_PLAYER_BLACKLIST_FULL = 7017
    RET_PLAYER_NOT_IN_BLACKLIST = 7018
    RET_BLACKLIST_PLAYER_CANNOT_ADD_FRIEND = 7019
    RET_IN_TARGET_BLACKLIST = 7020
    RET_CANNOT_ADD_TARGET_FRIEND = 7021
    RET_BIRTHDAY_FORMAT_ERROR = 7022
    RET_ONLINE_ID_NOT_EXISTS = 7023
    RET_FIRST_SHARE_REWARD_HAS_TAKEN = 7024
    RET_PS_PLAYER_CANNOT_REMOVE_BLACKLIST = 7025
    RET_REPORT_CD = 7026
    RET_REPORT_CONTENT_ILLEGAL = 7027
    RET_REMARK_WORD_ILLEGAL = 7028
    RET_REMARK_TOO_LONG = 7029
    RET_REMARK_UTF8_ERROR = 7030
    RET_REMARK_IS_EMPTY = 7031
    RET_ASK_ADD_FRIEND_CD = 7032
    RET_SHOW_AVATAR_INFO_NOT_EXIST = 7033
    RET_PLAYER_NOT_SHOW_AVATAR = 7034
    RET_SOCIAL_UPDATE_SHOW_LIST_REPEAT_ID = 7035
    RET_PSN_ID_NOT_FOUND = 7036
    RET_EMOJI_COLLECTION_NUM_EXCEED_LIMIT = 7037
    RET_REMARK_EMPTY = 7038
    RET_IN_TARGET_PSN_BLACKLIST = 7039
    RET_SIGNATURE_NOT_CHANGED = 7040
    RET_SIGNATURE_MONTHLY_LIMIT = 7041
    RET_REQ_FRIEND_AVATAR_FREQUENTLY = 7042
    RET_PSN_GET_PLAYER_SOCIAL_DETAIL_FAIL = 7043
    RET_OFFERING_NOT_OPEN = 7081
    RET_OFFERING_LEVEL_LIMIT = 7082
    RET_OFFERING_LEVEL_NOT_REACH = 7083
    RET_OFFERING_LEVEL_HAS_TAKEN = 7084
    RET_CITY_REPUTATION_NOT_OPEN = 7101
    RET_CITY_REPUTATION_LEVEL_TAKEN = 7102
    RET_CITY_REPUTATION_LEVEL_NOT_REACH = 7103
    RET_CITY_REPUTATION_PARENT_QUEST_TAKEN = 7104
    RET_CITY_REPUTATION_PARENT_QUEST_UNFINISH = 7105
    RET_CITY_REPUTATION_ACCEPT_REQUEST = 7106
    RET_CITY_REPUTATION_NOT_ACCEPT_REQUEST = 7107
    RET_CITY_REPUTATION_ACCEPT_REQUEST_LIMIT = 7108
    RET_CITY_REPUTATION_ENTRANCE_NOT_OPEN = 7109
    RET_CITY_REPUTATION_TAKEN_REQUEST_REWARD = 7110
    RET_CITY_REPUTATION_SWITCH_CLOSE = 7111
    RET_CITY_REPUTATION_ENTRACE_SWITCH_CLOSE = 7112
    RET_CITY_REPUTATION_TAKEN_EXPLORE_REWARD = 7113
    RET_CITY_REPUTATION_EXPLORE_NOT_REACH = 7114
    RET_MECHANICUS_NOT_OPEN = 7120
    RET_MECHANICUS_GEAR_UNLOCK = 7121
    RET_MECHANICUS_GEAR_LOCK = 7122
    RET_MECHANICUS_GEAR_LEVEL_LIMIT = 7123
    RET_MECHANICUS_COIN_NOT_ENOUGH = 7124
    RET_MECHANICUS_NO_SEQUENCE = 7125
    RET_MECHANICUS_SEQUENCE_LIMIT_LEVEL = 7126
    RET_MECHANICUS_SEQUENCE_LIMIT_OPEN = 7127
    RET_MECHANICUS_DIFFICULT_NOT_SUPPORT = 7128
    RET_MECHANICUS_TICKET_NOT_ENOUGH = 7129
    RET_MECHANICUS_TEACH_NOT_FINISH = 7130
    RET_MECHANICUS_TEACH_FINISHED = 7131
    RET_MECHANICUS_PREV_DIFFICULT_LEVEL_BLOCK = 7132
    RET_MECHANICUS_PLAYER_LIMIT = 7133
    RET_MECHANICUS_PUNISH_TIME = 7134
    RET_MECHANICUS_SWITCH_CLOSE = 7135
    RET_MECHANICUS_BATTLE_NOT_IN_DUNGEON = 7150
    RET_MECHANICUS_BATTLE_PLAY_NOT_FOUND = 7151
    RET_MECHANICUS_BATTLE_DUPLICATE_PICK_CARD = 7152
    RET_MECHANICUS_BATTLE_PLAYER_NOT_IN_PLAY = 7153
    RET_MECHANICUS_BATTLE_CARD_NOT_AVAILABLE = 7154
    RET_MECHANICUS_BATTLE_NOT_IN_CARD_STAGE = 7155
    RET_MECHANICUS_BATTLE_CARD_IS_WAITING = 7156
    RET_MECHANICUS_BATTLE_CARD_ALL_CONFIRMED = 7157
    RET_MECHANICUS_BATTLE_CARD_ALREADY_CONFIRMED = 7158
    RET_MECHANICUS_BATTLE_CARD_CONFIRMED_BY_OTHER = 7159
    RET_MECHANICUS_BATTLE_CARD_NOT_ENOUGH_POINTS = 7160
    RET_MECHANICUS_BATTLE_CARD_ALREADY_SKIPPED = 7161
    RET_LEGENDARY_KEY_NOT_ENOUGH = 8001
    RET_LEGENDARY_KEY_EXCEED_LIMIT = 8002
    RET_DAILY_TASK_NOT_ENOUGH_TO_REDEEM = 8003
    RET_PERSONAL_LINE_OPEN_STATE_OFF = 8004
    RET_PERSONAL_LINE_LEVEL_NOT_ENOUGH = 8005
    RET_PERSONAL_LINE_NOT_OPEN = 8006
    RET_PERSONAL_LINE_PRE_QUEST_NOT_FINISH = 8007
    RET_HUNTING_ALREADY_FINISH_OFFER_LIMIT = 8201
    RET_HUNTING_HAS_UNFINISHED_OFFER = 8202
    RET_HUNTING_FAILED_OFFER_NOT_CD_READY = 8203
    RET_HUNTING_NOT_TAKE_OFFER = 8204
    RET_HUNTING_CANNOT_TAKE_TWICE = 8205
    RET_RPIVATE_CHAT_INVALID_CONTENT_TYPE = 8901
    RET_PRIVATE_CHAT_TARGET_IS_NOT_FRIEND = 8902
    RET_PRIVATE_CHAT_CONTENT_NOT_SUPPORTED = 8903
    RET_PRIVATE_CHAT_CONTENT_TOO_LONG = 8904
    RET_PRIVATE_CHAT_PULL_TOO_FAST = 8905
    RET_PRIVATE_CHAT_REPEAT_READ = 8906
    RET_PRIVATE_CHAT_READ_NOT_FRIEND = 8907
    RET_REUNION_FINISHED = 9001
    RET_REUNION_NOT_ACTIVATED = 9002
    RET_REUNION_ALREADY_TAKE_FIRST_REWARD = 9003
    RET_REUNION_SIGN_IN_REWARDED = 9004
    RET_REUNION_WATCHER_REWARDED = 9005
    RET_REUNION_WATCHER_NOT_FINISH = 9006
    RET_REUNION_MISSION_REWARDED = 9007
    RET_REUNION_MISSION_NOT_FINISH = 9008
    RET_REUNION_WATCHER_REWARD_NOT_UNLOCKED = 9009
    RET_BLESSING_CONTENT_CLOSED = 9101
    RET_BLESSING_NOT_ACTIVE = 9102
    RET_BLESSING_NOT_TODAY_ENTITY = 9103
    RET_BLESSING_ENTITY_EXCEED_SCAN_NUM_LIMIT = 9104
    RET_BLESSING_DAILY_SCAN_NUM_EXCEED_LIMIT = 9105
    RET_BLESSING_REDEEM_REWARD_NUM_EXCEED_LIMIT = 9106
    RET_BLESSING_REDEEM_PIC_NUM_NOT_ENOUGH = 9107
    RET_BLESSING_PIC_NOT_ENOUGH = 9108
    RET_BLESSING_PIC_HAS_RECEIVED = 9109
    RET_BLESSING_TARGET_RECV_NUM_EXCEED = 9110
    RET_FLEUR_FAIR_CREDIT_EXCEED_LIMIT = 9111
    RET_FLEUR_FAIR_CREDIT_NOT_ENOUGH = 9112
    RET_FLEUR_FAIR_TOKEN_EXCEED_LIMIT = 9113
    RET_FLEUR_FAIR_TOKEN_NOT_ENOUGH = 9114
    RET_FLEUR_FAIR_MINIGAME_NOT_OPEN = 9115
    RET_FLEUR_FAIR_MUSIC_GAME_DIFFICULTY_NOT_UNLOCK = 9116
    RET_FLEUR_FAIR_DUNGEON_LOCKED = 9117
    RET_FLEUR_FAIR_DUNGEON_PUNISH_TIME = 9118
    RET_FLEUR_FAIR_ONLY_OWNER_CAN_RESTART_MINIGAM = 9119
    RET_WATER_SPIRIT_COIN_EXCEED_LIMIT = 9120
    RET_WATER_SPIRIT_COIN_NOT_ENOUGH = 9121
    RET_REGION_SEARCH_NO_SEARCH = 9122
    RET_REGION_SEARCH_STATE_ERROR = 9123
    RET_CHANNELLER_SLAB_LOOP_DUNGEON_STAGE_NOT_OPEN = 9130
    RET_CHANNELLER_SLAB_LOOP_DUNGEON_NOT_OPEN = 9131
    RET_CHANNELLER_SLAB_LOOP_DUNGEON_FIRST_PASS_REWARD_HAS_TAKEN = 9132
    RET_CHANNELLER_SLAB_LOOP_DUNGEON_SCORE_REWARD_HAS_TAKEN = 9133
    RET_CHANNELLER_SLAB_INVALID_ONE_OFF_DUNGEON = 9134
    RET_CHANNELLER_SLAB_ONE_OFF_DUNGEON_DONE = 9135
    RET_CHANNELLER_SLAB_ONE_OFF_DUNGEON_STAGE_NOT_OPEN = 9136
    RET_CHANNELLER_SLAB_TOKEN_EXCEED_LIMIT = 9137
    RET_CHANNELLER_SLAB_TOKEN_NOT_ENOUGH = 9138
    RET_CHANNELLER_SLAB_PLAYER_NOT_IN_ONE_OFF_DUNGEON = 9139
    RET_MIST_TRIAL_SELECT_CHARACTER_NUM_NOT_ENOUGH = 9150
    RET_MIST_TRIAL_ALREADY_USING_TRIAL_AVATAR = 9151
    RET_HIDE_AND_SEEK_PLAY_NOT_OPEN = 9160
    RET_HIDE_AND_SEEK_PLAY_MAP_NOT_OPEN = 9161
    RET_HIDE_AND_SEEK_PLAY_MAP_NOT_CHOSEN = 9162
    RET_SUMMER_TIME_DRAFT_WOORD_EXCEED_LIMIT = 9170
    RET_SUMMER_TIME_DRAFT_WOORD_NOT_ENOUGH = 9171
    RET_SUMMER_TIME_MINI_HARPASTUM_EXCEED_LIMIT = 9172
    RET_SUMMER_TIME_MINI_HARPASTUMNOT_ENOUGH = 9173
    RET_BOUNCE_CONJURING_COIN_EXCEED_LIMIT = 9180
    RET_BOUNCE_CONJURING_COIN_NOT_ENOUGH = 9181
    RET_CHESS_TEACH_MAP_FINISHED = 9183
    RET_CHESS_TEACH_MAP_UNFINISHED = 9184
    RET_CHESS_COIN_EXCEED_LIMIT = 9185
    RET_CHESS_COIN_NOT_ENOUGH = 9186
    RET_CHESS_IN_PUNISH_TIME = 9187
    RET_CHESS_PREV_MAP_UNFINISHED = 9188
    RET_CHESS_MAP_LOCKED = 9189
    RET_BLITZ_RUSH_NOT_OPEN = 9192
    RET_BLITZ_RUSH_DUNGEON_NOT_OPEN = 9193
    RET_BLITZ_RUSH_COIN_A_EXCEED_LIMIT = 9194
    RET_BLITZ_RUSH_COIN_B_EXCEED_LIMIT = 9195
    RET_BLITZ_RUSH_COIN_A_NOT_ENOUGH = 9196
    RET_BLITZ_RUSH_COIN_B_NOT_ENOUGH = 9197
    RET_MIRACLE_RING_VALUE_NOT_ENOUGH = 9201
    RET_MIRACLE_RING_CD = 9202
    RET_MIRACLE_RING_REWARD_NOT_TAKEN = 9203
    RET_MIRACLE_RING_NOT_DELIVER = 9204
    RET_MIRACLE_RING_DELIVER_EXCEED = 9205
    RET_MIRACLE_RING_HAS_CREATED = 9206
    RET_MIRACLE_RING_HAS_NOT_CREATED = 9207
    RET_MIRACLE_RING_NOT_YOURS = 9208
    RET_GADGET_FOUNDATION_UNAUTHORIZED = 9251
    RET_GADGET_FOUNDATION_SCENE_NOT_FOUND = 9252
    RET_GADGET_FOUNDATION_NOT_IN_INIT_STATE = 9253
    RET_GADGET_FOUNDATION_BILDING_POINT_NOT_ENOUGHT = 9254
    RET_GADGET_FOUNDATION_NOT_IN_BUILT_STATE = 9255
    RET_GADGET_FOUNDATION_OP_NOT_SUPPORTED = 9256
    RET_GADGET_FOUNDATION_REQ_PLAYER_NOT_IN_SCENE = 9257
    RET_GADGET_FOUNDATION_LOCKED_BY_ANOTHER_PLAYER = 9258
    RET_GADGET_FOUNDATION_NOT_LOCKED = 9259
    RET_GADGET_FOUNDATION_DUPLICATE_LOCK = 9260
    RET_GADGET_FOUNDATION_PLAYER_NOT_FOUND = 9261
    RET_GADGET_FOUNDATION_PLAYER_GEAR_NOT_FOUND = 9262
    RET_GADGET_FOUNDATION_ROTAION_DISABLED = 9263
    RET_GADGET_FOUNDATION_REACH_DUNGEON_GEAR_LIMIT = 9264
    RET_GADGET_FOUNDATION_REACH_SINGLE_GEAR_LIMIT = 9265
    RET_GADGET_FOUNDATION_ROTATION_ON_GOING = 9266
    RET_OP_ACTIVITY_BONUS_NOT_FOUND = 9301
    RET_OP_ACTIVITY_NOT_OPEN = 9302
    RET_MULTISTAGE_PLAY_PLAYER_NOT_IN_SCENE = 9501
    RET_MULTISTAGE_PLAY_NOT_FOUND = 9502
    RET_MULTISTAGE_PLAY_IN_OTHER_STAGE = 9503
    RET_COOP_CHAPTER_NOT_OPEN = 9601
    RET_COOP_COND_NOT_MEET = 9602
    RET_COOP_POINT_LOCKED = 9603
    RET_COOP_NOT_HAVE_PROGRESS = 9604
    RET_COOP_REWARD_HAS_TAKEN = 9605
    RET_DRAFT_HAS_ACTIVE_DRAFT = 9651
    RET_DRAFT_NOT_IN_MY_WORLD = 9652
    RET_DRAFT_NOT_SUPPORT_MP = 9653
    RET_DRAFT_PLAYER_NOT_ENOUGH = 9654
    RET_DRAFT_INCORRECT_SCENE = 9655
    RET_DRAFT_OTHER_PLAYER_ENTERING = 9656
    RET_DRAFT_GUEST_IS_TRANSFERRING = 9657
    RET_DRAFT_GUEST_NOT_IN_DRAFT_SCENE = 9658
    RET_DRAFT_INVITE_OVER_TIME = 9659
    RET_DRAFT_TWICE_CONFIRM_OVER_TIMER = 9660
    RET_DRAFT_GUEST_NOT_IN_WORLD_SCENE = 9661
    RET_HOME_UNKOWN = 9701
    RET_HOME_INVALID_CLIENT_PARAM = 9702
    RET_HOME_TARGE_PLAYER_HAS_NO_HOME = 9703
    RET_HOME_NOT_ONLINE = 9704
    RET_HOME_PLAYER_FULL = 9705
    RET_HOME_BLOCKED = 9706
    RET_HOME_ALREADY_IN_TARGET_HOME_WORLD = 9707
    RET_HOME_IN_EDIT_MODE = 9708
    RET_HOME_NOT_IN_EDIT_MODE = 9709
    RET_HOME_HAS_GUEST = 9710
    RET_HOME_CANT_ENTER_BY_IN_EDIT_MODE = 9711
    RET_HOME_CLIENT_PARAM_INVALID = 9712
    RET_HOME_PLAYER_NOT_IN_HOME_WORLD = 9713
    RET_HOME_PLAYER_NOT_IN_SELF_HOME_WORLD = 9714
    RET_HOME_NOT_FOUND_IN_MEM = 9715
    RET_HOME_PLAYER_IN_HOME_ROOM_SCENE = 9716
    RET_HOME_HOME_REFUSE_GUEST_ENTER = 9717
    RET_HOME_OWNER_REFUSE_TO_ENTER_HOME = 9718
    RET_HOME_OWNER_OFFLINE = 9719
    RET_HOME_FURNITURE_EXCEED_LIMIT = 9720
    RET_HOME_FURNITURE_COUNT_NOT_ENOUGH = 9721
    RET_HOME_IN_TRY_ENTER_PROCESS = 9722
    RET_HOME_ALREADY_IN_TARGET_SCENE = 9723
    RET_HOME_COIN_EXCEED_LIMIT = 9724
    RET_HOME_COIN_NOT_ENOUGH = 9725
    RET_HOME_MODULE_NOT_UNLOCKED = 9726
    RET_HOME_CUR_MODULE_CLOSED = 9727
    RET_HOME_FURNITURE_SUITE_NOT_UNLOCKED = 9728
    RET_HOME_IN_MATCH = 9729
    RET_HOME_IN_COMBAT = 9730
    RET_HOME_EDIT_MODE_CD = 9731
    RET_HOME_UPDATE_FURNITURE_CD = 9732
    RET_HOME_BLOCK_FURNITURE_LIMIT = 9733
    RET_HOME_NOT_SUPPORT = 9734
    RET_HOME_STATE_NOT_OPEN = 9735
    RET_HOME_TARGET_STATE_NOT_OPEN = 9736
    RET_HOME_APPLY_ENTER_OTHER_HOME_FAIL = 9737
    RET_HOME_SAVE_NO_MAIN_HOUSE = 9738
    RET_HOME_IN_DUNGEON = 9739
    RET_HOME_ANY_GALLERY_STARTED = 9740
    RET_HOME_QUEST_BLOCK_HOME = 9741
    RET_HOME_WAITING_PRIOR_CHECK = 9742
    RET_HOME_PERSISTENT_CHECK_FAIL = 9743
    RET_HOME_FIND_ONLINE_HOME_FAIL = 9744
    RET_HOME_JOIN_SCENE_FAIL = 9745
    RET_HOME_MAX_PLAYER = 9746
    RET_HOME_IN_TRANSFER = 9747
    RET_HOME_ANY_HOME_GALLERY_STARTED = 9748
    RET_HOME_CAN_NOT_ENTER_IN_AUDIT = 9749
    RET_FURNITURE_MAKE_INDEX_ERROR = 9750
    RET_FURNITURE_MAKE_LOCKED = 9751
    RET_FURNITURE_MAKE_CONFIG_ERROR = 9752
    RET_FURNITURE_MAKE_SLOT_FULL = 9753
    RET_FURNITURE_MAKE_ADD_FURNITURE_FAIL = 9754
    RET_FURNITURE_MAKE_UNFINISH = 9755
    RET_FURNITURE_MAKE_IS_FINISH = 9756
    RET_FURNITURE_MAKE_NOT_IN_CORRECT_HOME = 9757
    RET_FURNITURE_MAKE_NO_COUNT = 9758
    RET_FURNITURE_MAKE_ACCELERATE_LIMIT = 9759
    RET_FURNITURE_MAKE_NO_MAKE_DATA = 9760
    RET_HOME_LIMITED_SHOP_CLOSE = 9761
    RET_HOME_AVATAR_NOT_SHOW = 9762
    RET_HOME_EVENT_COND_NOT_SATISFIED = 9763
    RET_HOME_INVALID_ARRANGE_ANIMAL_PARAM = 9764
    RET_HOME_INVALID_ARRANGE_NPC_PARAM = 9765
    RET_HOME_INVALID_ARRANGE_SUITE_PARAM = 9766
    RET_HOME_INVALID_ARRANGE_MAIN_HOUSE_PARAM = 9767
    RET_HOME_AVATAR_STATE_NOT_OPEN = 9768
    RET_HOME_PLANT_FIELD_NOT_EMPTY = 9769
    RET_HOME_PLANT_FIELD_EMPTY = 9770
    RET_HOME_PLANT_FIELD_TYPE_ERROR = 9771
    RET_HOME_PLANT_TIME_NOT_ENOUGH = 9772
    RET_HOME_PLANT_SUB_FIELD_NUM_NOT_ENOUGH = 9773
    RET_HOME_PLANT_FIELD_PARAM_ERROR = 9774
    RET_HOME_FURNITURE_GUID_ERROR = 9775
    RET_HOME_FURNITURE_ARRANGE_LIMIT = 9776
    RET_HOME_FISH_FARMING_LIMIT = 9777
    RET_HOME_FISH_COUNT_NOT_ENOUGH = 9778
    RET_HOME_FURNITURE_COST_LIMIT = 9779
    RET_HOME_CUSTOM_FURNITURE_INVALID = 9780
    RET_HOME_INVALID_ARRANGE_GROUP_PARAM = 9781
    RET_HOME_FURNITURE_ARRANGE_GROUP_LIMIT = 9782
    RET_HOME_PICTURE_FRAME_COOP_CG_GENDER_ERROR = 9783
    RET_HOME_PICTURE_FRAME_COOP_CG_NOT_UNLOCK = 9784
    RET_HOME_FURNITURE_CANNOT_ARRANGE = 9785
    RET_HOME_FURNITURE_IN_DUPLICATE_SUITE = 9786
    RET_HOME_FURNITURE_CUSTOM_SUITE_TOO_SMALL = 9787
    RET_HOME_FURNITURE_CUSTOM_SUITE_TOO_BIG = 9788
    RET_HOME_FURNITURE_SUITE_EXCEED_LIMIT = 9789
    RET_HOME_FURNITURE_CUSTOM_SUITE_EXCEED_LIMIT = 9790
    RET_HOME_FURNITURE_CUSTOM_SUITE_INVALID_SURFACE_TYPE = 9791
    RET_HOME_BGM_ID_NOT_FOUND = 9792
    RET_HOME_BGM_NOT_UNLOCKED = 9793
    RET_HOME_BGM_FURNITURE_NOT_FOUND = 9794
    RET_HOME_BGM_NOT_SUPPORT_BY_CUR_SCENE = 9795
    RET_HOME_LIMITED_SHOP_GOODS_DISABLE = 9796
    RET_HOME_WORLD_WOOD_MATERIAL_EMPTY = 9797
    RET_HOME_WORLD_WOOD_MATERIAL_NOT_FOUND = 9798
    RET_HOME_WORLD_WOOD_MATERIAL_COUNT_INVALID = 9799
    RET_HOME_WORLD_WOOD_EXCHANGE_EXCEED_LIMIT = 9800
    RET_HOME_BLUEPRINT_SEARCH_SELF = 9801
    RET_HOME_BLUEPRINT_SHARE_CODE_INVALID = 9802
    RET_HOME_BLUEPRINT_NOT_EXIST = 9803
    RET_HOME_BLUEPRINT_SLOT_HAS_EXIST_SHARE_CODE = 9804
    RET_HOME_BLUEPRINT_SLOT_NOT_EXIST_SHARE_CODE = 9805
    RET_HOME_BLUEPRINT_CAN_NOT_CREATE_IN_AUDIT = 9806
    RET_HOME_BLOCK_NOT_UNLOCKED = 9807
    RET_HOME_BLUEPRINT_CREATE_CD = 9808
    RET_HOME_BLUEPRINT_SET_OPTION_CD = 9809
    RET_HOME_BLUEPRINT_NOT_ALLOW_FRIEND_COPY = 9810
    RET_HOME_FURNITURE_POS_UNDER_DIE_Y = 9811
    RET_HOME_BLUEPRINT_GEN_SHARE_CODE_FAIL = 9812
    RET_HOME_BLUEPRINT_SEARCH_CD = 9813
    RET_HOME_BLUEPRINT_PREVIEW_CD = 9814
    RET_HOME_BLUEPRINT_PREVIEW_SCENE_NOT_MATCH = 9815
    RET_SUMO_ACTIVITY_STAGE_NOT_OPEN = 10000
    RET_SUMO_ACTIVITY_SWITCH_TEAM_IN_CD = 10001
    RET_SUMO_ACTIVITY_TEAM_NUM_INCORRECT = 10002
    RET_LUNA_RITE_ACTIVITY_AREA_ID_ERROR = 10004
    RET_LUNA_RITE_ACTIVITY_BATTLE_NOT_FINISH = 10005
    RET_LUNA_RITE_ACTIVITY_ALREADY_SACRIFICE = 10006
    RET_LUNA_RITE_ACTIVITY_ALREADY_TAKE_REWARD = 10007
    RET_LUNA_RITE_ACTIVITY_SACRIFICE_NOT_ENOUGH = 10008
    RET_LUNA_RITE_ACTIVITY_SEARCHING_COND_NOT_MEET = 10009
    RET_DIG_GADGET_CONFIG_ID_NOT_MATCH = 10015
    RET_DIG_FIND_NEAREST_POS_FAIL = 10016
    RET_MUSIC_GAME_LEVEL_NOT_OPEN = 10021
    RET_MUSIC_GAME_LEVEL_NOT_UNLOCK = 10022
    RET_MUSIC_GAME_LEVEL_NOT_STARTED = 10023
    RET_MUSIC_GAME_LEVEL_CONFIG_NOT_FOUND = 10024
    RET_MUSIC_GAME_LEVEL_ID_NOT_MATCH = 10025
    RET_ROGUELIKE_COIN_A_NOT_ENOUGH = 10031
    RET_ROGUELIKE_COIN_B_NOT_ENOUGH = 10032
    RET_ROGUELIKE_COIN_C_NOT_ENOUGH = 10033
    RET_ROGUELIKE_COIN_A_EXCEED_LIMIT = 10034
    RET_ROGUELIKE_COIN_B_EXCEED_LIMIT = 10035
    RET_ROGUELIKE_COIN_C_EXCEED_LIMIT = 10036
    RET_ROGUELIKE_RUNE_COUNT_NOT_ENOUGH = 10037
    RET_ROGUELIKE_NOT_IN_ROGUE_DUNGEON = 10038
    RET_ROGUELIKE_CELL_NOT_FOUND = 10039
    RET_ROGUELIKE_CELL_TYPE_INCORRECT = 10040
    RET_ROGUELIKE_CELL_ALREADY_FINISHED = 10041
    RET_ROGUELIKE_DUNGEON_HAVE_UNFINISHED_PROGRESS = 10042
    RET_ROGUELIKE_STAGE_NOT_FINISHED = 10043
    RET_ROGUELIKE_STAGE_FIRST_PASS_REWARD_HAS_TAKEN = 10045
    RET_ROGUELIKE_ACTIVITY_CONTENT_CLOSED = 10046
    RET_ROGUELIKE_DUNGEON_PRE_QUEST_NOT_FINISHED = 10047
    RET_ROGUELIKE_DUNGEON_NOT_OPEN = 10048
    RET_ROGUELIKE_SPRINT_IS_BANNED = 10049
    RET_ROGUELIKE_DUNGEON_PRE_STAGE_NOT_FINISHED = 10050
    RET_ROGUELIKE_ALL_AVATAR_DIE_CANNOT_RESUME = 10051
    RET_PLANT_FLOWER_ALREADY_TAKE_SEED = 10056
    RET_PLANT_FLOWER_FRIEND_HAVE_FLOWER_LIMIT = 10057
    RET_PLANT_FLOWER_CAN_GIVE_FLOWER_NOT_ENOUGH = 10058
    RET_PLANT_FLOWER_WISH_FLOWER_KINDS_LIMIT = 10059
    RET_PLANT_FLOWER_HAVE_FLOWER_NOT_ENOUGH = 10060
    RET_PLANT_FLOWER_FLOWER_COMBINATION_INVALID = 10061
    RET_HACHI_DUNGEON_NOT_VALID = 10052
    RET_HACHI_DUNGEON_STAGE_NOT_OPEN = 10053
    RET_HACHI_DUNGEON_TEAMMATE_NOT_PASS = 10054
    RET_WINTER_CAMP_COIN_A_NOT_ENOUGH = 10071
    RET_WINTER_CAMP_COIN_B_NOT_ENOUGH = 10072
    RET_WINTER_CAMP_COIN_A_EXCEED_LIMIT = 10073
    RET_WINTER_CAMP_COIN_B_EXCEED_LIMIT = 10074
    RET_WINTER_CAMP_WISH_ID_INVALID = 10075
    RET_WINTER_CAMP_NOT_FOUND_RECV_ITEM_DATA = 10076
    RET_WINTER_CAMP_FRIEND_ITEM_COUNT_OVERFLOW = 10077
    RET_WINTER_CAMP_SELECT_ITEM_DATA_INVALID = 10078
    RET_WINTER_CAMP_ITEM_LIST_EMPTY = 10079
    RET_WINTER_CAMP_REWARD_ALREADY_TAKEN = 10080
    RET_WINTER_CAMP_STAGE_NOT_FINISH = 10081
    RET_WINTER_CAMP_GADGET_INVALID = 10082
    RET_LANTERN_RITE_COIN_A_NOT_ENOUGH = 10090
    RET_LANTERN_RITE_COIN_B_NOT_ENOUGH = 10091
    RET_LANTERN_RITE_COIN_C_NOT_ENOUGH = 10092
    RET_LANTERN_RITE_COIN_A_EXCEED_LIMIT = 10093
    RET_LANTERN_RITE_COIN_B_EXCEED_LIMIT = 10094
    RET_LANTERN_RITE_COIN_C_EXCEED_LIMIT = 10095
    RET_LANTERN_RITE_PROJECTION_CONTENT_CLOSED = 10096
    RET_LANTERN_RITE_PROJECTION_CAN_NOT_START = 10097
    RET_LANTERN_RITE_DUNGEON_NOT_OPEN = 10098
    RET_LANTERN_RITE_HAS_TAKEN_SKIN_REWARD = 10099
    RET_LANTERN_RITE_NOT_FINISHED_SKIN_WATCHERS = 10100
    RET_LANTERN_RITE_FIREWORKS_CONTENT_CLOSED = 10101
    RET_LANTERN_RITE_FIREWORKS_CHALLENGE_NOT_START = 10102
    RET_LANTERN_RITE_FIREWORKS_REFORM_PARAM_ERROR = 10103
    RET_LANTERN_RITE_FIREWORKS_REFORM_SKILL_LOCK = 10104
    RET_LANTERN_RITE_FIREWORKS_REFORM_STAMINA_NOT_ENOUGH = 10105
    RET_POTION_ACTIVITY_STAGE_NOT_OPEN = 10110
    RET_POTION_ACTIVITY_LEVEL_HAVE_PASS = 10111
    RET_POTION_ACTIVITY_TEAM_NUM_INCORRECT = 10112
    RET_POTION_ACTIVITY_AVATAR_IN_CD = 10113
    RET_POTION_ACTIVITY_BUFF_IN_CD = 10114
    RET_IRODORI_POETRY_INVALID_LINE_ID = 10120
    RET_IRODORI_POETRY_INVALID_THEME_ID = 10121
    RET_IRODORI_POETRY_NOT_GET_ALL_INSPIRATION = 10122
    RET_IRODORI_POETRY_INSPIRATION_REACH_LIMIE = 10123
    RET_IRODORI_POETRY_ENTITY_ALREADY_SCANNED = 10124
    RET_ACTIVITY_BANNER_ALREADY_CLEARED = 10300
    RET_IRODORI_CHESS_NOT_OPEN = 10301
    RET_IRODORI_CHESS_LEVEL_NOT_OPEN = 10302
    RET_IRODORI_CHESS_MAP_NOT_OPEN = 10303
    RET_IRODORI_CHESS_MAP_CARD_ALREADY_EQUIPED = 10304
    RET_IRODORI_CHESS_EQUIP_CARD_EXCEED_LIMIT = 10305
    RET_IRODORI_CHESS_MAP_CARD_NOT_EQUIPED = 10306
    RET_IRODORI_CHESS_ENTER_FAIL_CARD_EXCEED_LIMIT = 10307
    RET_ACTIVITY_FRIEND_HAVE_GIFT_LIMIT = 10310
    RET_GACHA_ACTIVITY_HAVE_REWARD_LIMIT = 10315
    RET_GACHA_ACTIVITY_HAVE_ROBOT_LIMIT = 10316
    RET_SUMMER_TIME_V2_COIN_EXCEED_LIMIT = 10317
    RET_SUMMER_TIME_V2_COIN_NOT_ENOUGH = 10318
    RET_SUMMER_TIME_V2_DUNGEON_STAGE_NOT_OPEN = 10319
    RET_SUMMER_TIME_V2_PREV_DUNGEON_NOT_COMPLETE = 10320
    RET_ROGUE_DIARY_AVATAR_DEATH = 10350
    RET_ROGUE_DIARY_AVATAR_TIRED = 10351
    RET_ROGUE_DIARY_AVATAR_DUPLICATED = 10352
    RET_ROGUE_DIARY_COIN_NOT_ENOUGH = 10353
    RET_ROGUE_DIARY_VIRTUAL_COIN_EXCEED_LIMIT = 10354
    RET_ROGUE_DIARY_VIRTUAL_COIN_NOT_ENOUGH = 10355
    RET_ROGUE_DIARY_CONTENT_CLOSED = 10366
    RET_GRAVEN_INNOCENCE_COIN_A_NOT_ENOUGH = 10380
    RET_GRAVEN_INNOCENCE_COIN_B_NOT_ENOUGH = 10381
    RET_GRAVEN_INNOCENCE_COIN_A_EXCEED_LIMIT = 10382
    RET_GRAVEN_INNOCENCE_COIN_B_EXCEED_LIMIT = 10383
    RET_ISLAND_PARTY_STAGE_NOT_OPEN = 10371
    RET_WIND_FIELD_STAGE_NOT_OPEN = 10390
    RET_VINTAGE_CONTENT_CLOSED = 10396
    RET_VINTAGE_STORE_CONTENT_FINISHED = 10397
    RET_VINTAGE_STORE_ATTR_TOO_SMALL = 10398
    RET_VINTAGE_STORE_ATTR_TOO_LARGE = 10399
    RET_VINTAGE_STORE_CONTENT_INTERRUPT = 10400
    RET_VINTAGE_VIRTUAL_COIN_NOT_ENOUGH = 10401
    RET_VINTAGE_STORE_ATTR_LESS_THAN_ZERO = 10402
    RET_FUNGUS_FIGHTER_CAPTURE_COIN_NOT_ENOUGH = 10406
    RET_FUNGUS_FIGHTER_TRAINING_COIN_NOT_ENOUGH = 10407
    RET_FUNGUS_FIGHTER_CAPTURE_COIN_EXCEED_LIMIT = 10408
    RET_FUNGUS_FIGHTER_TRAINING_COIN_EXCEED_LIMIT = 10409
    RET_FUNGUS_FIGHTER_CONTENT_CLOSED = 10410
    RET_FUNGUS_FIGHTER_PLOT_STAGE_NOT_OPEN = 10411
    RET_FUNGUS_FIGHTER_FUNGUS_ID_CONFIG_NOT_VALID = 10412
    RET_FUNGUS_FIGHTER_FUNGUS_NOT_CULTIVATED = 10413
    RET_FUNGUS_FIGHTER_TRAINING_DUNGEON_NOT_OPEN = 10414
    RET_EFFIGY_CHALLENGE_V2_COIN_NOT_ENOUGH = 10427
    RET_EFFIGY_CHALLENGE_V2_COIN_EXCEED_LIMIT = 10428
    RET_CHAR_AMUSEMENT_STAGE_NOT_OPEN = 10436
    RET_COIN_COLLECT_LEVEL_NOT_OPEN = 10446
    RET_COIN_COLLECT_NOT_EQUIP_WIDGET = 10447
    RET_COIN_COLLECT_SCENE_NOT_MATCH = 10448
    RET_COIN_COLLECT_CANT_ENTER_MP_MODE = 10449
    RET_COIN_COLLECT_PLAYER_NUM_FAIL = 10450
    RET_BRICK_BREAKER_PLAYER_NUM_FAIL = 10456
    RET_BRICK_BREAKER_STAGE_NOT_UNLOCK = 10457
    RET_BRICK_BREAKER_NORMAL_LEVEL_NOT_FINISH = 10458
    RET_BRICK_BREAKER_PRE_LEVEL_NOT_FINISH = 10459
    RET_BRICK_BREAKER_PRE_STAGE_NOT_FINISH = 10460
    RET_BRICK_BREAKER_WORLD_LEVEL_NOT_UNLOCK = 10461
    RET_BRICK_BREAKER_DUNGEON_LEVEL_NOT_UNLOCK = 10462
    RET_BRICK_BREAKER_COIN_NOT_ENOUGH = 10463
    RET_BRICK_BREAKER_COIN_EXCEED_LIMIT = 10464
    RET_ACTIVITY_CONTENT_CLOSED = 10901
    RET_NOT_IN_FISHING = 11001
    RET_FISH_STATE_ERROR = 11002
    RET_FISH_BAIT_LIMIT = 11003
    RET_FISHING_MAX_DISTANCE = 11004
    RET_FISHING_IN_COMBAT = 11005
    RET_FISHING_BATTLE_TOO_SHORT = 11006
    RET_FISH_GONE_AWAY = 11007
    RET_CAN_NOT_EDIT_OTHER_DUNGEON = 11051
    RET_CUSTOM_DUNGEON_DISMATCH = 11052
    RET_NO_CUSTOM_DUNGEON_DATA = 11053
    RET_BUILD_CUSTOM_DUNGEON_FAIL = 11054
    RET_CUSTOM_DUNGEON_ROOM_CHECK_FAIL = 11055
    RET_CUSTOM_DUNGEON_SAVE_MAY_FAIL = 11056
    RET_NOT_IN_CUSTOM_DUNGEON = 11057
    RET_CUSTOM_DUNGEON_INTERNAL_FAIL = 11058
    RET_CUSTOM_DUNGEON_CAN_NOT_TRY = 11059
    RET_CUSTOM_DUNGEON_NO_START_ROOM = 11060
    RET_CUSTOM_DUNGEON_NO_ROOM_DATA = 11061
    RET_CUSTOM_DUNGEON_SAVE_TOO_FREQUENT = 11062
    RET_CUSTOM_DUNGEON_NOT_SELF_PASS = 11063
    RET_CUSTOM_DUNGEON_LACK_COIN = 11064
    RET_CUSTOM_DUNGEON_NO_FINISH_BRICK = 11065
    RET_CUSTOM_DUNGEON_MULTI_FINISH = 11066
    RET_CUSTOM_DUNGEON_NOT_PUBLISHED = 11067
    RET_CUSTOM_DUNGEON_FULL_STORE = 11068
    RET_CUSTOM_DUNGEON_STORE_REPEAT = 11069
    RET_CUSTOM_DUNGEON_CAN_NOT_STORE_SELF = 11070
    RET_CUSTOM_DUNGEON_NOT_SAVE_SUCC = 11071
    RET_CUSTOM_DUNGEON_CAN_NOT_LIKE_SELF = 11072
    RET_CUSTOM_DUNGEON_NOT_FOUND = 11073
    RET_CUSTOM_DUNGEON_INVALID_SETTING = 11074
    RET_CUSTOM_DUNGEON_NO_FINISH_SETTING = 11075
    RET_CUSTOM_DUNGEON_SAVE_NOTHING = 11076
    RET_CUSTOM_DUNGEON_NOT_IN_GROUP = 11077
    RET_CUSTOM_DUNGEON_NOT_OFFICIAL = 11078
    RET_CUSTOM_DUNGEON_LIFE_NUM_ERROR = 11079
    RET_CUSTOM_DUNGEON_NO_OPEN_ROOM = 11080
    RET_CUSTOM_DUNGEON_BRICK_EXCEED_LIMIT = 11081
    RET_CUSTOM_DUNGEON_OFFICIAL_NOT_UNLOCK = 11082
    RET_CAN_NOT_EDIT_OFFICIAL_SETTING = 11083
    RET_CUSTOM_DUNGEON_BAN_PUBLISH = 11084
    RET_CUSTOM_DUNGEON_CAN_NOT_REPLAY = 11085
    RET_CUSTOM_DUNGEON_NOT_OPEN_GROUP = 11086
    RET_CUSTOM_DUNGEON_MAX_EDIT_NUM = 11087
    RET_CUSTOM_DUNGEON_CAN_NOT_OUT_STUCK = 11088
    RET_CUSTOM_DUNGEON_MAX_TAG = 11089
    RET_CUSTOM_DUNGEON_INVALID_TAG = 11090
    RET_CUSTOM_DUNGEON_MAX_COST = 11091
    RET_CUSTOM_DUNGEON_REQUEST_TOO_FREQUENT = 11092
    RET_CUSTOM_DUNGEON_NOT_OPEN = 11093
    RET_SHARE_CD_ID_ERROR = 11101
    RET_SHARE_CD_INDEX_ERROR = 11102
    RET_SHARE_CD_IN_CD = 11103
    RET_SHARE_CD_TOKEN_NOT_ENOUGH = 11104
    RET_UGC_DISMATCH = 11151
    RET_UGC_DATA_NOT_FOUND = 11152
    RET_UGC_BRIEF_NOT_FOUND = 11153
    RET_UGC_DISABLED = 11154
    RET_UGC_LIMITED = 11155
    RET_UGC_LOCKED = 11156
    RET_UGC_NOT_AUTH = 11157
    RET_UGC_NOT_OPEN = 11158
    RET_UGC_BAN_PUBLISH = 11159
    RET_COMPOUND_BOOST_ITEM_NOT_EXIST = 11201
    RET_COMPOUND_BOOST_TARGET_NOT_EXIST = 11202
    RET_QUICK_HIT_TREE_EMPTY_TREES = 11211
    RET_GCG_FIND_GAME_MODE_FAIL = 12000
    RET_GCG_OPERATION_PARAM_ERROR = 12001
    RET_GCG_GAME_NOT_RUNNING = 12002
    RET_GCG_OP_NOT_ALLOW = 12003
    RET_GCG_OP_NOT_MATCH_PHASE = 12004
    RET_GCG_SELECT_HAND_CARD_GUID_ERROR = 12005
    RET_GCG_DICE_INDEX_INVALID = 12006
    RET_GCG_CHARACTER_GUID_INVALID = 12007
    RET_GCG_CHARACTER_ALREADY_DIE = 12008
    RET_GCG_CHARACTER_ALREADY_ON_STAGE = 12009
    RET_GCG_CHARACTER_FORBIDDEN_ATTACK = 12010
    RET_GCG_SELECT_DICE_NOT_MATCH = 12011
    RET_GCG_FIND_SKILL_FAIL = 12012
    RET_GCG_SKILL_CAN_NOT_ACTIVE_USE = 12013
    RET_GCG_ENERGY_NOT_ENOUGH = 12014
    RET_GCG_PLAY_CARD_TARGET_NOT_MATCH = 12015
    RET_GCG_PLAY_CARD_ZONE_CANNOT_ADD = 12016
    RET_GCG_REBOOT_SELECT_DICE_INVALID = 12017
    RET_GCG_REBOOT_SELECT_CARD_INVALID = 12018
    RET_GCG_PLAY_CARD_CONDITION_CHECK_FAIL = 12019
    RET_GCG_PLAY_CARD_PARAM_INVALID = 12020
    RET_GCG_MAX_GAME = 12021
    RET_GCG_SEND_PACKET_FAIL = 12022
    RET_GCG_ALREADY_SETTLE = 12023
    RET_GCG_COIN_EXCEED_LIMIT = 12101
    RET_GCG_COIN_NOT_ENOUGH = 12102
    RET_GCG_NOT_IN_SELF_WORLD = 12103
    RET_GCG_ALREADY_IN_DUEL = 12104
    RET_GCG_NOT_IN_PLAYER_WORLD = 12105
    RET_GCG_GALLERY_STARTED = 12106
    RET_GCG_INVITE_TARGET_IS_SELF = 12107
    RET_GCG_INVITE_TARGET_NOT_IN_WORLD = 12108
    RET_GCG_APPLY_INVITE_NOT_ALLOW = 12109
    RET_GCG_APPLY_INVITE_TIMEOUT = 12110
    RET_GCG_CUR_DECK_INVALID = 12111
    RET_GCG_NEED_RESOURCE_COMPLETE = 12112
    RET_GCG_OPPONENT_PLAYER_IS_SELF = 12113
    RET_GCG_GAME_ID_INVALID = 12114
    RET_GCG_MATCH_IN_PUNISH = 12115
    RET_GCG_SETTLE_STILL_IN_DUEL = 12116
    RET_GCG_SETTLE_NOT_IN_DUNGEON = 12117
    RET_GCG_UNSUPPORT_SETTLE_OPTION = 12118
    RET_GCG_NOT_IN_GCG_DUNGEON = 12119
    RET_GCG_WORLD_LEVEL_LOCKED = 12120
    RET_GCG_BOSS_LEVEL_LOCKED = 12121
    RET_GCG_NOT_IN_TAVERN = 12122
    RET_GCG_WEEK_NPC_NOT_EXIST = 12123
    RET_GCG_ENTER_GAME_FREQUENT = 12124
    RET_GCG_BREAK_LEVEL_QUEST_NOT_UNFINISHED = 12125
    RET_GCG_GUIDE_LEVEL_ALREADY_FINISHED = 12126
    RET_GCG_LEVEL_CANNOT_RESTART = 12127
    RET_GCG_TARGET_CHECK_ENTER_FAIL = 12128
    RET_GCG_ALREADY_IN_DUNGEON = 12129
    RET_GCG_BACK_DUEL_NO_GAME = 12130
    RET_GCG_CONST_LEVEL_LOCKED = 12131
    RET_GCG_QUEST_ID_ERROR = 12132
    RET_GCG_QUEST_NEED_UNFINISHED = 12133
    RET_GCG_IN_MATCH = 12134
    RET_GCG_DATA_VERSION_NOT_LATEST = 12135
    RET_GCG_INVITE_TARGET_ENTER_GAME_FREQUENT = 12136
    RET_GCG_INVITE_TARGET_NEED_RESOURCE_COMPLETE = 12137
    RET_GCG_INVITE_TARGET_SCENE_IS_NULL = 12138
    RET_GCG_INVITE_TARGET_IN_TRANSFER = 12139
    RET_GCG_INVITE_TARGET_DATA_VERSION_NOT_LATEST = 12140
    RET_GCG_INVITE_TARGET_CUR_DECK_INVALID = 12141
    RET_GCG_CLIENT_DATA_VERSION_NOT_MATCH = 12142
    RET_GCG_CLIENT_DATA_VERSOIN_FORBID = 12143
    RET_GCG_MP_CANT_MATCH = 12144
    RET_GCG_INVITE_TARGET_STATE_NOT_OPEN = 12145
    RET_GCG_CREATE_TIME_OUT = 12146
    RET_GCG_BAN_MATCH = 12147
    RET_GCG_BAN_INVITE = 12148
    RET_GCG_TARGET_BAN_INVITE = 12149
    RET_GCG_INVITE_ALREADY_INVITE = 12150
    RET_GCG_BACK_DUEL_PS_TO_OTHER = 12153
    RET_GCG_BACK_DUEL_OTHER_TO_PS = 12154
    RET_GCG_DS_DECK_LOCKED = 12201
    RET_GCG_DS_DECK_NAME_INVALID = 12202
    RET_GCG_DS_DECK_CHAR_CARD_NUM_INVALID = 12204
    RET_GCG_DS_DECK_CARD_NUM_INVALID = 12205
    RET_GCG_DS_CARD_NUM_EXCEED_LIMIT = 12206
    RET_GCG_DS_DECK_INVALID = 12207
    RET_GCG_DS_CARD_ID_INVALID = 12208
    RET_GCG_DS_CARD_FACE_ALREADY_UNLOCK = 12209
    RET_GCG_DS_CARD_FACE_IS_LOCK = 12210
    RET_GCG_DS_FIELD_LOCK = 12211
    RET_GCG_DS_FIELD_ALREADY_UNLOCK = 12212
    RET_GCG_DS_FIELD_ID_INVALID = 12213
    RET_GCG_DS_CARD_BACK_LOCKED = 12214
    RET_GCG_DS_CARD_BACK_ALREADY_UNLOCK = 12215
    RET_GCG_DS_CARD_BACK_ID_INVALID = 12216
    RET_GCG_DS_CARD_FACE_ID_INVALID = 12217
    RET_GCG_DS_DECK_NAME_ILLEGAL = 12218
    RET_GCG_DS_DECK_SAVE_CD = 12219
    RET_GCG_DS_DECK_CHANGE_NAME_CD = 12220
    RET_GCG_MATCH_DECK_INVALID = 12221
    RET_GCG_DS_DECK_ALREADY_UNLOCKED = 12222
    RET_GCG_DS_AT_LEAST_ONE_DECK = 12223
    RET_GCG_TC_CHARACTERNOT_MATCH_LEVEL = 12251
    RET_GCG_TC_MUST_IN_SELF_WORLD = 12252
    RET_GCG_TC_MUST_IN_TAVERN = 12253
    RET_GCG_TC_ALREADY_IN_GAME = 12254
    RET_GCG_TC_ALREADY_IN_MATCH = 12255
    RET_GCG_TC_UNLOCK_CHARACTER_QUEST_NOT_FINISH = 12256
    RET_GCG_TC_LEVEL_LOCKED = 12257
    RET_GCG_TC_NO_INVITE_DATA = 12258
    RET_GCG_TC_CUR_DECK_INVALID = 12259
    RET_GCG_TC_COND_QUEST = 12260
    RET_GCG_LEVEL_REWARD_LEVEL_ERROR = 12301
    RET_GCG_LEVEL_REWARD_ALREADY_TAKEN = 12302
    RET_GCG_LEVEL_REWARD_NO_REWARD = 12303


class RogueEliteCellDifficultyType(betterproto.Enum):
    ROGUE_ELITE_CELL_DIFFICULTY_TYPE_NORMAL = 0
    ROGUE_ELITE_CELL_DIFFICULTY_TYPE_HARD = 1


class SalvageEscortStopReason(betterproto.Enum):
    SALVAGE_ESCORT_STOP_REASON_NONE = 0
    SALVAGE_ESCORT_STOP_REASON_SUCCESS = 1
    SALVAGE_ESCORT_STOP_REASON_DUMP = 2
    SALVAGE_ESCORT_STOP_REASON_TIME = 3
    SALVAGE_ESCORT_STOP_REASON_INTERRUPT = 4
    SALVAGE_ESCORT_STOP_REASON_LEAVE = 5
    SALVAGE_ESCORT_STOP_REASON_FULL = 6


class SalvagePreventStopReason(betterproto.Enum):
    SALVAGE_PREVENT_STOP_REASON_NONE = 0
    SALVAGE_PREVENT_STOP_REASON_SUCCESS = 1
    SALVAGE_PREVENT_STOP_REASON_ARRIVAL = 2
    SALVAGE_PREVENT_STOP_REASON_INTERRUPT = 3
    SALVAGE_PREVENT_STOP_REASON_LEAVE = 4
    SALVAGE_PREVENT_STOP_REASON_FULL = 5
    SALVAGE_PREVENT_STOP_REASON_AWAY = 6


class VisionType(betterproto.Enum):
    VISION_TYPE_NONE = 0
    VISION_TYPE_MEET = 1
    VISION_TYPE_REBORN = 2
    VISION_TYPE_REPLACE = 3
    VISION_TYPE_WAYPOINT_REBORN = 4
    VISION_TYPE_MISS = 5
    VISION_TYPE_DIE = 6
    VISION_TYPE_GATHER_ESCAPE = 7
    VISION_TYPE_REFRESH = 8
    VISION_TYPE_TRANSPORT = 9
    VISION_TYPE_REPLACE_DIE = 10
    VISION_TYPE_REPLACE_NO_NOTIFY = 11
    VISION_TYPE_BORN = 12
    VISION_TYPE_PICKUP = 13
    VISION_TYPE_REMOVE = 14
    VISION_TYPE_CHANGE_COSTUME = 15
    VISION_TYPE_FISH_REFRESH = 16
    VISION_TYPE_FISH_BIG_SHOCK = 17
    VISION_TYPE_FISH_QTE_SUCC = 18
    VISION_TYPE_CAPTURE_DISAPPEAR = 19


class ScenePlayerSoundNotifyPlaySoundType(betterproto.Enum):
    PLAY_SOUND_TYPE_NONE = 0
    PLAY_SOUND_TYPE_START = 1
    PLAY_SOUND_TYPE_STOP = 2


class SealBattleType(betterproto.Enum):
    SEAL_BATTLE_TYPE_KEEP_ALIVE = 0
    SEAL_BATTLE_TYPE_KILL_MONSTER = 1
    SEAL_BATTLE_TYPE_ENERGY_CHARGE = 2


class ServerBuffChangeNotifyServerBuffChangeType(betterproto.Enum):
    SERVER_BUFF_CHANGE_TYPE_ADD_SERVER_BUFF = 0
    SERVER_BUFF_CHANGE_TYPE_DEL_SERVER_BUFF = 1


class ServerLogLevel(betterproto.Enum):
    SERVER_LOG_LEVEL_NONE = 0
    SERVER_LOG_LEVEL_DEBUG = 1
    SERVER_LOG_LEVEL_INFO = 2
    SERVER_LOG_LEVEL_WARNING = 3
    SERVER_LOG_LEVEL_ERROR = 4


class ServerLogType(betterproto.Enum):
    SERVER_LOG_TYPE_NONE = 0
    SERVER_LOG_TYPE_ABILITY = 1
    SERVER_LOG_TYPE_LEVEL = 2
    SERVER_LOG_TYPE_ENTITY = 3
    SERVER_LOG_TYPE_LUA = 4


class ServerUpdateGlobalValueNotifyUpdateType(betterproto.Enum):
    UPDATE_TYPE_INVALID = 0
    UPDATE_TYPE_ADD = 1
    UPDATE_TYPE_SET = 2


class ServiceType(betterproto.Enum):
    SERVICE_TYPE_NONE = 0
    SERVICE_TYPE_CLIENT = 1
    SERVICE_TYPE_GATE = 2
    SERVICE_TYPE_GAME = 3
    SERVICE_TYPE_NODE = 4
    SERVICE_TYPE_DB = 5
    SERVICE_TYPE_SNS = 6
    SERVICE_TYPE_DISPATCH = 7
    SERVICE_TYPE_MUIP = 8
    SERVICE_TYPE_OFFLINE_MSG = 9
    SERVICE_TYPE_MAIL = 10
    SERVICE_TYPE_MP = 11
    SERVICE_TYPE_HTTPPROXY = 12
    SERVICE_TYPE_ACTIVITY = 13
    SERVICE_TYPE_PATHFINDING = 14
    SERVICE_TYPE_SOCIAL = 15
    SERVICE_TYPE_OA = 16
    SERVICE_TYPE_MATCH = 17
    SERVICE_TYPE_OFFLINE_OP = 18
    SERVICE_TYPE_TOTHEMOON = 19
    SERVICE_TYPE_GCG = 20


class WidgetSlotOp(betterproto.Enum):
    WIDGET_SLOT_OP_ATTACH = 0
    WIDGET_SLOT_OP_DETACH = 1


class SvrMsgId(betterproto.Enum):
    SVR_MSG_ID_UNKNOWN = 0
    SVR_MSG_ID_BLOCK_REFRESH_COUNTDOWN = 1
    SVR_MSG_ID_AVATAR_REVIVE_BY_STATUE = 2
    SVR_MSG_ID_DAILY_TASK_REWARD_MAX_NUM = 3
    SVR_MSG_ID_ROUTINE_TYPE_NOT_OPEN = 4
    SVR_MSG_ID_ROUTINE_TYPE_REWARD_MAX_NUM = 5
    SVR_MSG_ID_MECHANICUS_COIN_LIMIT = 6


class ToTheMoonObstacleInfoShapeType(betterproto.Enum):
    SHAPE_TYPE_OBSTACLE_SHAPE_CAPSULE = 0
    SHAPE_TYPE_OBSTACLE_SHAPE_BOX = 1


class ToTheMoonQueryPathReqOptionType(betterproto.Enum):
    OPTION_TYPE_NONE = 0
    OPTION_TYPE_NORMAL = 1


class ToTheMoonQueryPathReqAStarMethod(betterproto.Enum):
    A_STAR_METHOD_CLASSIC = 0
    A_STAR_METHOD_TENDENCY = 1
    A_STAR_METHOD_ADAPTIVE = 2
    A_STAR_METHOD_INFLECTION = 3


class ToTheMoonQueryPathReqFilterType(betterproto.Enum):
    FILTER_TYPE_ALL = 0
    FILTER_TYPE_AIR = 1
    FILTER_TYPE_WATER = 2


class ToTheMoonQueryPathRspPathStatusType(betterproto.Enum):
    PATH_STATUS_TYPE_FAIL = 0
    PATH_STATUS_TYPE_SUCC = 1
    PATH_STATUS_TYPE_PARTIAL = 2


class ToTheMoonRemoveObstacleReqObstacleType(betterproto.Enum):
    OBSTACLE_TYPE_BOX = 0
    OBSTACLE_TYPE_CAPSULE = 1


class Unk3300LoingbjljemUnk3300Kdbjpjadjkf(betterproto.Enum):
    Unk3300_KDBJPJADJKF_Unk3300_EKBFJPGGECM = 0
    Unk3300_KDBJPJADJKF_Unk3300_NALHJBKMPCH = 1


class UpdateAbilityCreatedMovingPlatformNotifyOpType(betterproto.Enum):
    OP_TYPE_NONE = 0
    OP_TYPE_ACTIVATE = 1
    OP_TYPE_DEACTIVATE = 2


class UseMiracleRingReqMiracleRingOpType(betterproto.Enum):
    MIRACLE_RING_OP_TYPE_NONE = 0
    MIRACLE_RING_OP_TYPE_PLACE = 1
    MIRACLE_RING_OP_TYPE_RETRACT = 2


class VehicleInteractType(betterproto.Enum):
    VEHICLE_INTERACT_TYPE_NONE = 0
    VEHICLE_INTERACT_TYPE_IN = 1
    VEHICLE_INTERACT_TYPE_OUT = 2


class VehicleSlot(betterproto.Enum):
    VEHICLE_SLOT_OPERATOR = 0


class VirtualItem(betterproto.Enum):
    VIRTUAL_ITEM_VIRTUAL_NONE = 0
    VIRTUAL_ITEM_VIRTUAL_AVATAR_EXP = 101
    VIRTUAL_ITEM_VIRTUAL_PLAYER_EXP = 102
    VIRTUAL_ITEM_VIRTUAL_FETTER_EXP = 105
    VIRTUAL_ITEM_VIRTUAL_RESIN = 106
    VIRTUAL_ITEM_VIRTUAL_LEGENDARY_KEY = 107
    VIRTUAL_ITEM_VIRTUAL_ASTER_PROGRESS = 108
    VIRTUAL_ITEM_VIRTUAL_ASTER_CREDIT = 109
    VIRTUAL_ITEM_VIRTUAL_ASTER_TOKEN = 110
    VIRTUAL_ITEM_VIRTUAL_SHIMMERING_ESSENCE = 111
    VIRTUAL_ITEM_VIRTUAL_WARM_ESSENCE = 112
    VIRTUAL_ITEM_VIRTUAL_WONDROUS_ESSENCE = 113
    VIRTUAL_ITEM_VIRTUAL_TREASURE_MAP_TOKEN = 114
    VIRTUAL_ITEM_VIRTUAL_SEA_LAMP_COIN = 115
    VIRTUAL_ITEM_VIRTUAL_SEA_LAMP_POPULARITY = 116
    VIRTUAL_ITEM_VIRTUAL_MECHANICUS_COIN = 117
    VIRTUAL_ITEM_VIRTUAL_FLEUR_FAIR_CREDIT = 118
    VIRTUAL_ITEM_VIRTUAL_FLEUR_FAIR_TOKEN = 119
    VIRTUAL_ITEM_VIRTUAL_WATER_SPIRIT_COIN = 120
    VIRTUAL_ITEM_VIRTUAL_HOME_EXP = 121
    VIRTUAL_ITEM_VIRTUAL_CHANNELLER_SLAB_TOKEN = 122
    VIRTUAL_ITEM_VIRTUAL_HIDE_AND_SEEK_COIN = 123
    VIRTUAL_ITEM_VIRTUAL_SUMMER_TIME_DRAFT_WOOD = 124
    VIRTUAL_ITEM_VIRTUAL_SUMMER_TIME_MINI_HARPASTUM = 125
    VIRTUAL_ITEM_VIRTUAL_BOUNCE_CONJURING_COIN = 126
    VIRTUAL_ITEM_VIRTUAL_BLITZ_RUSH_COIN_A = 127
    VIRTUAL_ITEM_VIRTUAL_BLITZ_RUSH_COIN_B = 128
    VIRTUAL_ITEM_VIRTUAL_CHESS_EXP = 129
    VIRTUAL_ITEM_VIRTUAL_CHESS_COIN = 130
    VIRTUAL_ITEM_VIRTUAL_LUNA_RITE_ATMOSPHERE = 131
    VIRTUAL_ITEM_VIRTUAL_ROGUELIKE_COIN_A = 132
    VIRTUAL_ITEM_VIRTUAL_ROGUELIKE_COIN_B = 133
    VIRTUAL_ITEM_VIRTUAL_ROGUELIKE_COIN_C = 134
    VIRTUAL_ITEM_VIRTUAL_WINTER_CAMP_COIN_A = 135
    VIRTUAL_ITEM_VIRTUAL_WINTER_CAMP_COIN_B = 136
    VIRTUAL_ITEM_VIRTUAL_LANTERN_RITE_COIN_A = 137
    VIRTUAL_ITEM_VIRTUAL_LANTERN_RITE_COIN_B = 138
    VIRTUAL_ITEM_VIRTUAL_LANTERN_RITE_COIN_C = 139
    VIRTUAL_ITEM_VIRTUAL_ROGUE_DIARY_COIN = 140
    VIRTUAL_ITEM_VIRTUAL_SUMMER_TIME_V2_COIN = 141
    VIRTUAL_ITEM_VIRTUAL_ROGUE_DIARY_DUNGEON_COIN = 142
    VIRTUAL_ITEM_VIRTUAL_GRAVEN_INNOCENCE_COIN_A = 143
    VIRTUAL_ITEM_VIRTUAL_GRAVEN_INNOCENCE_COIN_B = 144
    VIRTUAL_ITEM_VIRTUAL_TREASURE_SEELIE_COIN = 145
    VIRTUAL_ITEM_VIRTUAL_VINTAGE_POPULARITY = 147
    VIRTUAL_ITEM_VIRTUAL_GCG_EXP = 146
    VIRTUAL_ITEM_VIRTUAL_VINTAGE_MARKET_COIN_A = 148
    VIRTUAL_ITEM_VIRTUAL_VINTAGE_MARKET_COIN_B = 149
    VIRTUAL_ITEM_VIRTUAL_VINTAGE_MARKET_COIN_C = 150
    VIRTUAL_ITEM_VIRTUAL_FUNGUS_FIGHTER_CAPTURE_COIN = 151
    VIRTUAL_ITEM_VIRTUAL_FUNGUS_FIGHTER_TRAINING_COIN = 152
    VIRTUAL_ITEM_VIRTUAL_EFFIGY_CHALLENGE_V2_COIN = 153
    VIRTUAL_ITEM_VIRTUAL_BRICK_BREAKER_COIN = 155
    VIRTUAL_ITEM_VIRTUAL_HCOIN = 201
    VIRTUAL_ITEM_VIRTUAL_SCOIN = 202
    VIRTUAL_ITEM_VIRTUAL_MCOIN = 203
    VIRTUAL_ITEM_VIRTUAL_HOME_COIN = 204
    VIRTUAL_ITEM_VIRTUAL_GCG_COIN = 205
    VIRTUAL_ITEM_VIRTUAL_INAZUMA_REPUTATION = 314
    VIRTUAL_ITEM_VIRTUAL_MENGDE_REPUTATION = 315
    VIRTUAL_ITEM_VIRTUAL_SUMERU_REPUTATION = 316
    VIRTUAL_ITEM_VIRTUAL_LIYUE_REPUTATION = 317


class WidgetExtraCdType(betterproto.Enum):
    WIDGET_EXTRA_CD_TYPE_NONE = 0
    WIDGET_EXTRA_CD_TYPE_E_SKILL_SHARED = 1


class WorldDataNotifyDataType(betterproto.Enum):
    DATA_TYPE_NONE = 0
    DATA_TYPE_WORLD_LEVEL = 1
    DATA_TYPE_IS_IN_MP_MODE = 2


@dataclass(eq=False, repr=False)
class Vector(betterproto.Message):
    x: float = betterproto.float_field(1)
    y: float = betterproto.float_field(2)
    z: float = betterproto.float_field(3)


@dataclass(eq=False, repr=False)
class AbilityActionBlink(betterproto.Message):
    rot: "Vector" = betterproto.message_field(8)
    pos: "Vector" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class AbilityActionCreateGadget(betterproto.Message):
    room_id: int = betterproto.uint32_field(5)
    rot: "Vector" = betterproto.message_field(13)
    pos: "Vector" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class AbilityActionCreateTile(betterproto.Message):
    pos: "Vector" = betterproto.message_field(15)
    rot: "Vector" = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class AbilityActionDeductStamina(betterproto.Message):
    is_swim: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class AbilityActionDestroyTile(betterproto.Message):
    pos: "Vector" = betterproto.message_field(13)
    rot: "Vector" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class AbilityActionFireAfterImage(betterproto.Message):
    dir: "Vector" = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class AbilityActionGenerateElemBall(betterproto.Message):
    room_id: int = betterproto.uint32_field(8)
    rot: "Vector" = betterproto.message_field(1)
    pos: "Vector" = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class AbilityActionHitEffect(betterproto.Message):
    trigger_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class AbilityActionServerMonsterLog(betterproto.Message):
    param_list: List[int] = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class AbilityActionSetBulletTrackTarget(betterproto.Message):
    unk3300_gkackbieohk: int = betterproto.uint32_field(10)
    unk3300_hgboffkepdj: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class AbilityActionSetCrashDamage(betterproto.Message):
    damage: float = betterproto.float_field(2)
    hit_pos: "Vector" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class AbilityActionSetRandomOverrideMapValue(betterproto.Message):
    random_value: float = betterproto.float_field(1)


@dataclass(eq=False, repr=False)
class AbilityActionSummon(betterproto.Message):
    pos: "Vector" = betterproto.message_field(3)
    rot: "Vector" = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class AbilityActionTriggerAbility(betterproto.Message):
    other_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class AbilityString(betterproto.Message):
    str: builtins.str = betterproto.string_field(1, group="type")
    hash: int = betterproto.uint32_field(2, group="type")


@dataclass(eq=False, repr=False)
class AbilityScalarValueEntry(betterproto.Message):
    key: "AbilityString" = betterproto.message_field(1)
    value_type: "AbilityScalarType" = betterproto.enum_field(2)
    float_value: float = betterproto.float_field(3, group="value")
    string_value: str = betterproto.string_field(4, group="value")
    int_value: int = betterproto.int32_field(5, group="value")
    uint_value: int = betterproto.uint32_field(6, group="value")


@dataclass(eq=False, repr=False)
class AbilityAppliedAbility(betterproto.Message):
    ability_name: "AbilityString" = betterproto.message_field(1)
    ability_override: "AbilityString" = betterproto.message_field(2)
    override_map: List["AbilityScalarValueEntry"] = betterproto.message_field(3)
    instanced_ability_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class AbilityAttachedModifier(betterproto.Message):
    is_invalid: bool = betterproto.bool_field(1)
    owner_entity_id: int = betterproto.uint32_field(2)
    instanced_modifier_id: int = betterproto.uint32_field(3)
    is_serverbuff_modifier: bool = betterproto.bool_field(4)
    attach_name_hash: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class ModifierDurability(betterproto.Message):
    reduce_ratio: float = betterproto.float_field(1)
    remaining_durability: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class AbilityAppliedModifier(betterproto.Message):
    modifier_local_id: int = betterproto.int32_field(1)
    parent_ability_entity_id: int = betterproto.uint32_field(2)
    parent_ability_name: "AbilityString" = betterproto.message_field(3)
    parent_ability_override: "AbilityString" = betterproto.message_field(4)
    instanced_ability_id: int = betterproto.uint32_field(5)
    instanced_modifier_id: int = betterproto.uint32_field(6)
    exist_duration: float = betterproto.float_field(7)
    attached_instanced_modifier: "AbilityAttachedModifier" = betterproto.message_field(
        8
    )
    apply_entity_id: int = betterproto.uint32_field(9)
    is_attached_parent_ability: bool = betterproto.bool_field(10)
    modifier_durability: "ModifierDurability" = betterproto.message_field(11)
    sbuff_uid: int = betterproto.uint32_field(12)
    is_serverbuff_modifier: bool = betterproto.bool_field(13)


@dataclass(eq=False, repr=False)
class AbilityApplyLevelModifier(betterproto.Message):
    apply_entity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AbilityArgument(betterproto.Message):
    int_arg: int = betterproto.uint32_field(14, group="arg")
    float_arg: float = betterproto.float_field(7, group="arg")
    str_arg: str = betterproto.string_field(9, group="arg")


@dataclass(eq=False, repr=False)
class AbilityBornType(betterproto.Message):
    move_dir: "Vector" = betterproto.message_field(3)
    rot: "Vector" = betterproto.message_field(15)
    pos: "Vector" = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class AbilityEmbryo(betterproto.Message):
    ability_id: int = betterproto.uint32_field(1)
    ability_name_hash: int = betterproto.fixed32_field(2)
    ability_override_name_hash: int = betterproto.fixed32_field(3)


@dataclass(eq=False, repr=False)
class AbilityControlBlock(betterproto.Message):
    ability_embryo_list: List["AbilityEmbryo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AbilityChangeNotify(betterproto.Message):
    ability_control_block: "AbilityControlBlock" = betterproto.message_field(6)
    entity_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class AbilityFloatValue(betterproto.Message):
    value: float = betterproto.float_field(1)


@dataclass(eq=False, repr=False)
class AbilityGadgetInfo(betterproto.Message):
    camp_id: int = betterproto.uint32_field(1)
    camp_target_type: int = betterproto.uint32_field(2)
    target_entity_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AbilityIdentifier(betterproto.Message):
    instanced_ability_id: int = betterproto.uint32_field(4)
    unk3300_ihckjklcici: int = betterproto.uint32_field(10)
    is_serverbuff_modifier: bool = betterproto.bool_field(14)
    local_id: int = betterproto.int32_field(7)
    unk3300_ooolelpbdhj: int = betterproto.uint32_field(1)
    instanced_modifier_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class AbilityInvokeEntryHead(betterproto.Message):
    instanced_ability_id: int = betterproto.uint32_field(8)
    target_id: int = betterproto.uint32_field(6)
    server_buff_uid: int = betterproto.uint32_field(1)
    local_id: int = betterproto.int32_field(12)
    modifier_config_local_id: int = betterproto.int32_field(7)
    is_serverbuff_modifier: bool = betterproto.bool_field(15)
    instanced_modifier_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class AbilityInvokeEntry(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(9)
    event_id: int = betterproto.uint32_field(13)
    entity_id: int = betterproto.uint32_field(7)
    forward_peer: int = betterproto.uint32_field(14)
    total_tick_time: float = betterproto.double_field(10)
    head: "AbilityInvokeEntryHead" = betterproto.message_field(3)
    ability_data: bytes = betterproto.bytes_field(2)
    argument_type: "AbilityInvokeArgument" = betterproto.enum_field(8)
    is_ignore_auth: bool = betterproto.bool_field(12)


@dataclass(eq=False, repr=False)
class AbilityInvocationFailNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(4)
    reason: str = betterproto.string_field(8)
    invoke: "AbilityInvokeEntry" = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class AbilityInvocationFixedNotify(betterproto.Message):
    unk3300_ldiaomfibpl: "AbilityInvokeEntry" = betterproto.message_field(7)
    unk3300_ongnohliibo: "AbilityInvokeEntry" = betterproto.message_field(3)
    unk3300_ahdfhhfhefm: "AbilityInvokeEntry" = betterproto.message_field(10)
    unk3300_gaffbffkdic: "AbilityInvokeEntry" = betterproto.message_field(1)
    unk3300_emgkkhklieg: "AbilityInvokeEntry" = betterproto.message_field(4)
    unk3300_kfmhllheccj: "AbilityInvokeEntry" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class AbilityInvocationsNotify(betterproto.Message):
    invokes: List["AbilityInvokeEntry"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class AbilityMetaAddAbility(betterproto.Message):
    ability: "AbilityAppliedAbility" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class AbilityMetaAddOrGetAbilityAndTrigger(betterproto.Message):
    trigger_argument: float = betterproto.float_field(4)
    ability_name: "AbilityString" = betterproto.message_field(12)
    ability_override: "AbilityString" = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class AbilityMetaDurabilityIsZero(betterproto.Message):
    is_zero: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class AbilityMetaElementReactionVisual(betterproto.Message):
    unk3300_phkfgihelfg: int = betterproto.uint32_field(6)
    unk3300_dgbgnehdodi: int = betterproto.uint32_field(1)
    hit_index: int = betterproto.int32_field(14)
    unk3300_ogiljcjphpb: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AbilityMetaLoseHp(betterproto.Message):
    lose_hp_config_idx: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class ModifierProperty(betterproto.Message):
    key: "AbilityString" = betterproto.message_field(7)
    value: float = betterproto.float_field(5)


@dataclass(eq=False, repr=False)
class AbilityMetaModifierChange(betterproto.Message):
    attached_instanced_modifier: "AbilityAttachedModifier" = betterproto.message_field(
        3
    )
    is_attached_parent_ability: bool = betterproto.bool_field(5)
    properties: List["ModifierProperty"] = betterproto.message_field(14)
    unk3300_nopkodkohjk: bool = betterproto.bool_field(12)
    modifier_local_id: int = betterproto.int32_field(2)
    unk3300_pbnenpbmnci: bool = betterproto.bool_field(8)
    parent_ability_name: "AbilityString" = betterproto.message_field(13)
    server_buff_uid: int = betterproto.uint32_field(9)
    apply_entity_id: int = betterproto.uint32_field(7)
    parent_ability_override: "AbilityString" = betterproto.message_field(15)
    action: "ModifierAction" = betterproto.enum_field(4)


@dataclass(eq=False, repr=False)
class AbilityMetaModifierDurabilityChange(betterproto.Message):
    unk3300_ldhnfnogogf: float = betterproto.float_field(13)
    unk3300_ifhfhehdoio: float = betterproto.float_field(1)


@dataclass(eq=False, repr=False)
class AbilityMetaReInitOverrideMap(betterproto.Message):
    override_map: List["AbilityScalarValueEntry"] = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class AbilityMetaSetAbilityTrigger(betterproto.Message):
    trigger_ability_entity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AbilityMetaSetKilledState(betterproto.Message):
    killed: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class AbilityMetaSetModifierApplyEntityId(betterproto.Message):
    apply_entity_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class AnimatorParameterValueInfo(betterproto.Message):
    para_type: int = betterproto.uint32_field(1)
    int_val: int = betterproto.int32_field(2, group="para_val")
    float_val: float = betterproto.float_field(3, group="para_val")
    bool_val: bool = betterproto.bool_field(4, group="para_val")


@dataclass(eq=False, repr=False)
class AnimatorParameterValueInfoPair(betterproto.Message):
    name_id: int = betterproto.int32_field(1)
    animator_para: "AnimatorParameterValueInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AbilityMetaSetPoseParameter(betterproto.Message):
    value: "AnimatorParameterValueInfoPair" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class AbilityMetaSpecialFloatArgument(betterproto.Message):
    argument_value: float = betterproto.float_field(4)
    is_on: bool = betterproto.bool_field(10)


@dataclass(eq=False, repr=False)
class AbilityMetaTriggerElementReaction(betterproto.Message):
    hit_index: int = betterproto.int32_field(7)
    trigger_entity_id: int = betterproto.uint32_field(14)
    unk3300_phkfgihelfg: int = betterproto.uint32_field(13)
    unk3300_ogiljcjphpb: int = betterproto.uint32_field(12)
    unk3300_dgbgnehdodi: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AbilityMetaUpdateBaseReactionDamage(betterproto.Message):
    unk3300_oipaegamcli: int = betterproto.uint32_field(2)
    unk3300_cakejcjkhoa: int = betterproto.uint32_field(13)
    ability_name: "AbilityString" = betterproto.message_field(6)
    global_value_key: "AbilityString" = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class AbilityMixinAvatarCombat(betterproto.Message):
    is_enter_combat: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class AbilityMixinAvatarSteerByCamera(betterproto.Message):
    target_dir: "Vector" = betterproto.message_field(7)
    target_pos: "Vector" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class BreakoutVector2(betterproto.Message):
    x: int = betterproto.int32_field(1)
    y: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class BreakoutAction(betterproto.Message):
    action_type: "BreakoutActionBreakoutActionType" = betterproto.enum_field(1)
    client_game_time: int = betterproto.uint64_field(2)
    server_game_time: int = betterproto.uint64_field(3)
    is_failed: bool = betterproto.bool_field(4)
    pre_index: int = betterproto.uint32_field(5)
    new_index: int = betterproto.uint32_field(6)
    pos: "BreakoutVector2" = betterproto.message_field(7)
    move_dir: "BreakoutVector2" = betterproto.message_field(8)
    speed: int = betterproto.int32_field(9)
    peer_id: int = betterproto.uint32_field(10)
    element_type: int = betterproto.uint32_field(11)
    element_reaction_buff: int = betterproto.uint32_field(12)
    speed_increase_count: int = betterproto.uint32_field(13)
    has_extra_ball: bool = betterproto.bool_field(14)
    extra_ball_dir: "BreakoutVector2" = betterproto.message_field(15)
    extra_ball_index: int = betterproto.uint32_field(16)
    offset: int = betterproto.int32_field(17)
    unk3300_aiebgjhbohl: int = betterproto.uint64_field(18)


@dataclass(eq=False, repr=False)
class BreakoutSyncAction(betterproto.Message):
    action: "BreakoutAction" = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class BreakoutSyncConnectUidInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    skill_id_list: List[int] = betterproto.uint32_field(2)
    skill_level_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class BreakoutSyncCreateConnect(betterproto.Message):
    uid_info_list: List["BreakoutSyncConnectUidInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class BreakoutSyncFinishGame(betterproto.Message):
    server_game_time: int = betterproto.uint64_field(8)
    is_win: bool = betterproto.bool_field(1)
    is_stop_gallery: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class BreakoutSyncPing(betterproto.Message):
    client_game_time: int = betterproto.uint64_field(8)
    server_game_time: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class BreakoutElementReactionCounter(betterproto.Message):
    element_reaction: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class BreakoutBrickInfo(betterproto.Message):
    hp: int = betterproto.uint32_field(1)
    element_type: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class BreakoutPhysicalObjectModifier(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    id: int = betterproto.uint32_field(2)
    param1: int = betterproto.int32_field(3)
    param2: int = betterproto.int32_field(4)
    param3: int = betterproto.int32_field(5)
    param4: int = betterproto.int32_field(6)
    param5: int = betterproto.int32_field(7)
    param6: int = betterproto.int32_field(8)
    bool1: bool = betterproto.bool_field(9)
    duration: int = betterproto.int32_field(10)
    end_time: int = betterproto.int32_field(11)
    combo: int = betterproto.uint32_field(12)
    peer_id: int = betterproto.uint32_field(13)
    skill_type: int = betterproto.uint32_field(14)
    level: int = betterproto.uint32_field(15)
    choose_player_count: int = betterproto.uint32_field(16)


@dataclass(eq=False, repr=False)
class BreakoutPhysicalObject(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    index: int = betterproto.uint32_field(2)
    is_active: bool = betterproto.bool_field(3)
    pos: "BreakoutVector2" = betterproto.message_field(4)
    move_dir: "BreakoutVector2" = betterproto.message_field(5)
    speed: int = betterproto.int32_field(6)
    init_peer_id: int = betterproto.uint32_field(7)
    state: int = betterproto.uint32_field(8)
    element_type: int = betterproto.uint32_field(9)
    element_reaction_buff: int = betterproto.uint32_field(10)
    modifier_list: List["BreakoutPhysicalObjectModifier"] = betterproto.message_field(
        11
    )
    total_rotation: int = betterproto.int32_field(12)
    info_list: List["BreakoutBrickInfo"] = betterproto.message_field(13)
    last_hit_peer_id: int = betterproto.uint32_field(14)
    speed_increase_count: int = betterproto.uint32_field(15)
    offset: int = betterproto.int32_field(16)


@dataclass(eq=False, repr=False)
class BreakoutSpawnPoint(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    brick_suite_id: int = betterproto.uint32_field(2)
    spawned_brick_list: List["BreakoutPhysicalObject"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class BreakoutSnapShot(betterproto.Message):
    client_game_time: int = betterproto.uint64_field(1)
    server_game_time: int = betterproto.uint64_field(2)
    ball_list: List["BreakoutPhysicalObject"] = betterproto.message_field(3)
    physical_object_list: List["BreakoutPhysicalObject"] = betterproto.message_field(4)
    action_list: List["BreakoutAction"] = betterproto.message_field(5)
    wave_index: int = betterproto.uint32_field(6)
    is_finish: bool = betterproto.bool_field(7)
    score: int = betterproto.uint32_field(8)
    combo: int = betterproto.uint32_field(9)
    max_combo: int = betterproto.uint32_field(10)
    life_count: int = betterproto.uint32_field(11)
    wave_suite_index: int = betterproto.uint32_field(12)
    spawn_point_list: List["BreakoutSpawnPoint"] = betterproto.message_field(13)
    remaining_boss_hp: int = betterproto.uint32_field(14)
    brick_element_reaction_list: List[
        "BreakoutElementReactionCounter"
    ] = betterproto.message_field(15)
    ball_element_reaction_list: List[
        "BreakoutElementReactionCounter"
    ] = betterproto.message_field(16)
    uid_info_list: List["BreakoutSyncConnectUidInfo"] = betterproto.message_field(17)
    dynamic_object_list: List["BreakoutPhysicalObject"] = betterproto.message_field(18)
    id_index_list: List[int] = betterproto.uint32_field(19)
    raw_client_game_time: int = betterproto.int32_field(20)


@dataclass(eq=False, repr=False)
class BreakoutSyncSnapShot(betterproto.Message):
    snap_shot: "BreakoutSnapShot" = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class AbilityMixinBreakout(betterproto.Message):
    retcode: int = betterproto.int32_field(8)
    sync_type: "AbilityMixinBreakoutSyncType" = betterproto.enum_field(4)
    sync_create_connect: "BreakoutSyncCreateConnect" = betterproto.message_field(
        2, group="sync"
    )
    sync_ping: "BreakoutSyncPing" = betterproto.message_field(1, group="sync")
    sync_finish_game: "BreakoutSyncFinishGame" = betterproto.message_field(
        5, group="sync"
    )
    sync_snap_shot: "BreakoutSyncSnapShot" = betterproto.message_field(14, group="sync")
    sync_action: "BreakoutSyncAction" = betterproto.message_field(3, group="sync")


@dataclass(eq=False, repr=False)
class AbilityMixinCostStamina(betterproto.Message):
    is_swim: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class AbilityMixinDoActionByElementReaction(betterproto.Message):
    target_entity_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class AbilityMixinDoActionBySelfModifierElementDurabilityRatio(betterproto.Message):
    last_durability_ratio: float = betterproto.float_field(14)


@dataclass(eq=False, repr=False)
class AbilityMixinElementShield(betterproto.Message):
    player_num: int = betterproto.uint32_field(9)
    shield: float = betterproto.float_field(5)
    is_shield_broken: bool = betterproto.bool_field(8)
    sub_shield: float = betterproto.float_field(4)
    max_shield: float = betterproto.float_field(13)
    absorb_type: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class AbilityMixinEliteShield(betterproto.Message):
    sub_shield: float = betterproto.float_field(9)


@dataclass(eq=False, repr=False)
class AbilityMixinEmpty(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class AbilityMixinEraseBrickActivity(betterproto.Message):
    data: List[int] = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class AbilityMixinFieldEntityCountChange(betterproto.Message):
    field_entity_count: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class AbilityMixinFireworksLauncher(betterproto.Message):
    unk3300_fhglejnjihk: int = betterproto.uint32_field(5)
    unk3300_bfjbdjlaojl: int = betterproto.uint32_field(4)
    unk3300_lppkofhkcph: int = betterproto.uint32_field(7)
    unk3300_bdgcglgnaib: int = betterproto.uint32_field(3)
    fireworks_config: List[int] = betterproto.uint32_field(12)
    phase: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AbilityMixinGlobalShield(betterproto.Message):
    max_shield: float = betterproto.float_field(14)
    is_create_effect: bool = betterproto.bool_field(4)
    shield_effect_name: str = betterproto.string_field(12)
    sub_shield: float = betterproto.float_field(10)
    avatar_id: int = betterproto.uint32_field(3)
    height_offset: float = betterproto.float_field(1)


@dataclass(eq=False, repr=False)
class MassivePropParam(betterproto.Message):
    type: int = betterproto.int32_field(1)
    reaction_info_list: List[int] = betterproto.uint32_field(2)
    param_list: List[float] = betterproto.float_field(3)
    sync_flag: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class MassivePropSyncInfo(betterproto.Message):
    id: int = betterproto.int64_field(1)
    prop_list: List["MassivePropParam"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AbilityMixinRecoverInfo(betterproto.Message):
    local_id: int = betterproto.uint32_field(3)
    data_list: List[int] = betterproto.uint32_field(4)
    is_serverbuff_modifier: bool = betterproto.bool_field(5)
    massive_prop_list: List["MassivePropSyncInfo"] = betterproto.message_field(6)
    breakout_snap_shot: "BreakoutSnapShot" = betterproto.message_field(7)
    instanced_ability_id: int = betterproto.uint32_field(1, group="source")
    instanced_modifier_id: int = betterproto.uint32_field(2, group="source")


@dataclass(eq=False, repr=False)
class AbilityMixinScenePropSync(betterproto.Message):
    massive_prop_list: List["MassivePropSyncInfo"] = betterproto.message_field(11)
    delete_id_list: List[int] = betterproto.int64_field(12)
    is_clear_all: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class AbilityMixinShieldBar(betterproto.Message):
    max_shield: float = betterproto.float_field(8)
    shield: float = betterproto.float_field(4)
    player_num: int = betterproto.uint32_field(3)
    element_type: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class AbilityMixinShootFromCamera(betterproto.Message):
    forward: "Vector" = betterproto.message_field(13)
    init_pos: "Vector" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class AbilityMixinUgcTimeControl(betterproto.Message):
    start_move_time_ms: int = betterproto.uint64_field(12)
    start_move_time: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class AbilityMixinUiInteract(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class AbilityMixinWidgetMpSupport(betterproto.Message):
    target_entity_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AbilityMixinWindSeedSpawner(betterproto.Message):
    add_signal: "AbilityMixinWindSeedSpawnerAddSignal" = betterproto.message_field(
        8, group="cmd"
    )
    refresh_seed: "AbilityMixinWindSeedSpawnerRefreshSeed" = betterproto.message_field(
        12, group="cmd"
    )
    catch_seed: "AbilityMixinWindSeedSpawnerCatchSeed" = betterproto.message_field(
        14, group="cmd"
    )


@dataclass(eq=False, repr=False)
class AbilityMixinWindSeedSpawnerAddSignal(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class AbilityMixinWindSeedSpawnerRefreshSeed(betterproto.Message):
    pos_list: List["Vector"] = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class AbilityMixinWindSeedSpawnerCatchSeed(betterproto.Message):
    entity_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class AbilityMixinWindZone(betterproto.Message):
    unk3300_ojpfaigiblg: List[int] = betterproto.uint32_field(3)
    unk3300_djelbgdedbh: List[int] = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class AbilitySyncStateInfo(betterproto.Message):
    is_inited: bool = betterproto.bool_field(1)
    dynamic_value_map: List["AbilityScalarValueEntry"] = betterproto.message_field(2)
    applied_abilities: List["AbilityAppliedAbility"] = betterproto.message_field(3)
    applied_modifiers: List["AbilityAppliedModifier"] = betterproto.message_field(4)
    mixin_recover_infos: List["AbilityMixinRecoverInfo"] = betterproto.message_field(5)
    sgv_dynamic_value_map: List["AbilityScalarValueEntry"] = betterproto.message_field(
        6
    )


@dataclass(eq=False, repr=False)
class AcceptCityReputationRequestReq(betterproto.Message):
    city_id: int = betterproto.uint32_field(14)
    request_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class AcceptCityReputationRequestRsp(betterproto.Message):
    city_id: int = betterproto.uint32_field(1)
    retcode: int = betterproto.int32_field(9)
    request_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class Achievement(betterproto.Message):
    finish_timestamp: int = betterproto.uint32_field(8)
    cur_progress: int = betterproto.uint32_field(11)
    total_progress: int = betterproto.uint32_field(6)
    id: int = betterproto.uint32_field(14)
    status: "AchievementStatus" = betterproto.enum_field(15)


@dataclass(eq=False, repr=False)
class AchievementAllDataNotify(betterproto.Message):
    reward_taken_goal_id_list: List[int] = betterproto.uint32_field(13)
    achievement_list: List["Achievement"] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class AchievementUpdateNotify(betterproto.Message):
    achievement_list: List["Achievement"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class ActivityAcceptAllGiveGiftReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class ActivityAcceptGiftResultInfo(betterproto.Message):
    unk3300_jfhleblofma: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    unk3300_cocfnbjcfgp: Dict[int, int] = betterproto.map_field(
        9, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    uid: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class ActivityAcceptAllGiveGiftRsp(betterproto.Message):
    accept_gift_result_info_list: List[
        "ActivityAcceptGiftResultInfo"
    ] = betterproto.message_field(7)
    schedule_id: int = betterproto.uint32_field(6)
    retcode: int = betterproto.int32_field(12)


@dataclass(eq=False, repr=False)
class ActivityAcceptGiveGiftReq(betterproto.Message):
    uid: int = betterproto.uint32_field(9)
    schedule_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class ActivityAcceptGiveGiftRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(4)
    accept_gift_result_info: "ActivityAcceptGiftResultInfo" = betterproto.message_field(
        2
    )
    schedule_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ActivityBannerClearReq(betterproto.Message):
    activity_id: int = betterproto.uint32_field(14)
    schedule_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class ActivityBannerClearRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)
    schedule_id: int = betterproto.uint32_field(5)
    activity_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class ActivityBannerNotify(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    schedule_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class ActivityCoinInfoNotify(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(8)
    activity_coin_map: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    activity_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class Uint32Pair(betterproto.Message):
    key: int = betterproto.uint32_field(1)
    value: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ActivityCondStateChangeNotify(betterproto.Message):
    activity_id: int = betterproto.uint32_field(5)
    schedule_id: int = betterproto.uint32_field(14)
    unk3300_hkknihnbhae: List[int] = betterproto.uint32_field(1)
    unk3300_bgniblkcpca: List[int] = betterproto.uint32_field(4)
    activated_sale_id_list: List[int] = betterproto.uint32_field(8)
    disable_transfer_point_interaction_list: List[
        "Uint32Pair"
    ] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class ActivityDisableTransferPointInteractionNotify(betterproto.Message):
    is_disable: bool = betterproto.bool_field(13)
    scene_point_pair: "Uint32Pair" = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class ActivityDungeonAvatar(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(1)
    is_trial: bool = betterproto.bool_field(2)
    costume_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ProfilePicture(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(1)
    costume_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ActivityFriendGiftWishData(betterproto.Message):
    gift_num_map: Dict[int, int] = betterproto.map_field(
        5, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    uid: int = betterproto.uint32_field(7)
    profile_picture: "ProfilePicture" = betterproto.message_field(11)
    remark_name: str = betterproto.string_field(12)
    nickname: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ActivityGetCanGiveFriendGiftReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ActivityGetCanGiveFriendGiftRsp(betterproto.Message):
    gift_num_map: Dict[int, int] = betterproto.map_field(
        7, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    retcode: int = betterproto.int32_field(11)
    schedule_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class ActivityGetFriendGiftWishListReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ActivityGetFriendGiftWishListRsp(betterproto.Message):
    friend_gift_wish_list: List[
        "ActivityFriendGiftWishData"
    ] = betterproto.message_field(12)
    schedule_id: int = betterproto.uint32_field(4)
    retcode: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class ActivityGetRecvGiftListReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ActivityRecvGiftData(betterproto.Message):
    profile_picture: "ProfilePicture" = betterproto.message_field(3)
    nickname: str = betterproto.string_field(7)
    gift_num_map: Dict[int, int] = betterproto.map_field(
        6, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    remark_name: str = betterproto.string_field(1)
    uid: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class ActivityGetRecvGiftListRsp(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(7)
    retcode: int = betterproto.int32_field(9)
    recv_gift_list: List["ActivityRecvGiftData"] = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class ActivityGiveFriendGiftReq(betterproto.Message):
    gift_num_map: Dict[int, int] = betterproto.map_field(
        10, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    schedule_id: int = betterproto.uint32_field(15)
    uid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ActivityGiveFriendGiftRsp(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(15)
    retcode: int = betterproto.int32_field(8)
    limit_gift_list: List[int] = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class ActivityHaveRecvGiftNotify(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ActivityPushTipsData(betterproto.Message):
    activity_push_tips_id: int = betterproto.uint32_field(14)
    state: "ActivityPushTipsState" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class ActivityWatcherInfo(betterproto.Message):
    is_taken_reward: bool = betterproto.bool_field(2)
    total_progress: int = betterproto.uint32_field(1)
    cur_progress: int = betterproto.uint32_field(8)
    watcher_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class ArenaChallengeMonsterLevel(betterproto.Message):
    unk3300_dbhaghmmlai: int = betterproto.uint32_field(8)
    unk3300_fdfnflakong: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class ArenaChallengeActivityDetailInfo(betterproto.Message):
    level_list: List["ArenaChallengeMonsterLevel"] = betterproto.message_field(15)
    level_open_time_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    is_finish_any_level: bool = betterproto.bool_field(4)
    world_level: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class AsterLargeDetailInfo(betterproto.Message):
    begin_time: int = betterproto.uint32_field(6)
    is_open: bool = betterproto.bool_field(9)


@dataclass(eq=False, repr=False)
class AsterLittleDetailInfo(betterproto.Message):
    stage_begin_time: int = betterproto.uint32_field(9)
    is_open: bool = betterproto.bool_field(8)
    stage_state: "AsterLittleStageState" = betterproto.enum_field(5)
    stage_id: int = betterproto.uint32_field(14)
    begin_time: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class AsterMidCampInfo(betterproto.Message):
    pos: "Vector" = betterproto.message_field(3)
    camp_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class AsterMidDetailInfo(betterproto.Message):
    is_open: bool = betterproto.bool_field(13)
    camp_list: List["AsterMidCampInfo"] = betterproto.message_field(11)
    begin_time: int = betterproto.uint32_field(4)
    collect_count: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class AsterProgressDetailInfo(betterproto.Message):
    count: int = betterproto.uint32_field(4)
    last_auto_add_time: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AsterActivityDetailInfo(betterproto.Message):
    content_close_time: int = betterproto.uint32_field(1)
    aster_little: "AsterLittleDetailInfo" = betterproto.message_field(5)
    unk3300_dchbfejnbhp: int = betterproto.uint32_field(13)
    aster_mid: "AsterMidDetailInfo" = betterproto.message_field(12)
    is_special_reward_taken: bool = betterproto.bool_field(3)
    unk3300_kfdgffpjgjc: int = betterproto.uint32_field(4)
    aster_progress: "AsterProgressDetailInfo" = betterproto.message_field(8)
    aster_large: "AsterLargeDetailInfo" = betterproto.message_field(10)
    is_content_closed: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class BartenderLevelInfo(betterproto.Message):
    id: int = betterproto.uint32_field(12)
    is_finish: bool = betterproto.bool_field(3)
    max_score: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class BartenderTaskInfo(betterproto.Message):
    id: int = betterproto.uint32_field(5)
    is_finish: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class BartenderActivityDetailInfo(betterproto.Message):
    is_content_closed: bool = betterproto.bool_field(15)
    unlock_level_list: List["BartenderLevelInfo"] = betterproto.message_field(10)
    unk3300_bpcboanpbhf: List[int] = betterproto.uint32_field(3)
    unk3300_ogplcbfdhcf: List[int] = betterproto.uint32_field(6)
    unlock_task_list: List["BartenderTaskInfo"] = betterproto.message_field(5)
    is_develop_module_open: bool = betterproto.bool_field(9)


@dataclass(eq=False, repr=False)
class BlessingActivityDetailInfo(betterproto.Message):
    cur_day_scan_num: int = betterproto.uint32_field(10)
    content_close_time: int = betterproto.uint32_field(8)
    unk3300_jladhekjpbp: int = betterproto.uint32_field(1)
    next_refresh_time: int = betterproto.uint32_field(6)
    is_activated: bool = betterproto.bool_field(5)
    unk3300_inohlelboam: int = betterproto.uint32_field(7)
    is_content_closed: bool = betterproto.bool_field(2)
    pic_num_map: Dict[int, int] = betterproto.map_field(
        11, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class BlitzRushStage(betterproto.Message):
    is_open: bool = betterproto.bool_field(8)
    open_time: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class ParkourLevelInfo(betterproto.Message):
    pos: "Vector" = betterproto.message_field(2)
    is_open: bool = betterproto.bool_field(7)
    best_record: int = betterproto.uint32_field(14)
    open_time: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class BlitzRushActivityDetailInfo(betterproto.Message):
    is_content_closed: bool = betterproto.bool_field(1)
    content_close_time: int = betterproto.uint32_field(8)
    parkour_level_info_list: List["ParkourLevelInfo"] = betterproto.message_field(4)
    stage_list: List["BlitzRushStage"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class BounceConjuringChapterInfo(betterproto.Message):
    best_score: int = betterproto.uint32_field(3)
    open_time: int = betterproto.uint32_field(2)
    chapter_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class BounceConjuringActivityDetailInfo(betterproto.Message):
    is_content_closed: bool = betterproto.bool_field(8)
    chapter_info_list: List["BounceConjuringChapterInfo"] = betterproto.message_field(
        15
    )
    content_close_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class BrickBreakerActivityStageInfo(betterproto.Message):
    stage_id: int = betterproto.uint32_field(3)
    unk3300_alogiknheim: bool = betterproto.bool_field(2)
    unk3300_ffkiedngngk: bool = betterproto.bool_field(10)


@dataclass(eq=False, repr=False)
class BrickBreakerLevelInfo(betterproto.Message):
    chosen_avatar_list: List[int] = betterproto.uint32_field(5)
    level_id: int = betterproto.uint32_field(3)
    is_finish: bool = betterproto.bool_field(13)
    max_score: int = betterproto.uint32_field(8)
    chosen_skill_list: List[int] = betterproto.uint32_field(14)
    is_can_start: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class BrickBreakerDetailInfo(betterproto.Message):
    stage_info_list: List["BrickBreakerActivityStageInfo"] = betterproto.message_field(
        13
    )
    unk3300_aiegoacoino: List["BrickBreakerLevelInfo"] = betterproto.message_field(9)
    unk3300_bcheelfpncd: List["BrickBreakerLevelInfo"] = betterproto.message_field(11)
    skill_info_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class BuoyantCombatDailyInfo(betterproto.Message):
    best_score: int = betterproto.uint32_field(5)
    start_time: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class BuoyantCombatDetailInfo(betterproto.Message):
    daily_info_list: List["BuoyantCombatDailyInfo"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class ChannelerSlabAssistInfo(betterproto.Message):
    avatar_level: int = betterproto.uint32_field(10)
    uid: int = betterproto.uint32_field(11)
    avatar_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class ChannelerSlabBuffSchemeInfo(betterproto.Message):
    unk3300_ncmddafneno: int = betterproto.uint32_field(9)
    slot_map: Dict[int, int] = betterproto.map_field(
        11, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    unk3300_ckmnfocnmgl: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ChannelerSlabBuffInfo(betterproto.Message):
    assist_info_list: List["ChannelerSlabAssistInfo"] = betterproto.message_field(11)
    unk3300_cdfliongkch: "ChannelerSlabBuffSchemeInfo" = betterproto.message_field(8)
    unk3300_anenhmaadln: "ChannelerSlabBuffSchemeInfo" = betterproto.message_field(14)
    buff_id_list: List[int] = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class ChannelerSlabCamp(betterproto.Message):
    buff_num: int = betterproto.uint32_field(11)
    reward_id: int = betterproto.uint32_field(9)
    group_id: int = betterproto.uint32_field(8)
    pos: "Vector" = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class ChannelerSlabChallenge(betterproto.Message):
    active_camp_index: int = betterproto.uint32_field(1)
    camp_list: List["ChannelerSlabCamp"] = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class ChannelerSlabOneoffDungeon(betterproto.Message):
    dungeon_id: int = betterproto.uint32_field(6)
    is_done: bool = betterproto.bool_field(1)
    reward_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ChannelerSlabChallengeStage(betterproto.Message):
    is_open: bool = betterproto.bool_field(4)
    dungeon_info: "ChannelerSlabOneoffDungeon" = betterproto.message_field(12)
    open_time: int = betterproto.uint32_field(13)
    stage_id: int = betterproto.uint32_field(1)
    challenge_list: List["ChannelerSlabChallenge"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ChannelerSlabLoopDungeonInfo(betterproto.Message):
    is_first_pass_reward_taken: bool = betterproto.bool_field(9)
    score: int = betterproto.uint32_field(7)
    last_condition_id_list: List[int] = betterproto.uint32_field(10)
    dungeon_index: int = betterproto.uint32_field(1)
    is_open: bool = betterproto.bool_field(4)
    open_time: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class ChannelerSlabLoopDungeonStageInfo(betterproto.Message):
    taken_reward_index_list: List[int] = betterproto.uint32_field(5)
    is_open: bool = betterproto.bool_field(9)
    open_time: int = betterproto.uint32_field(7)
    dungeon_info_list: List["ChannelerSlabLoopDungeonInfo"] = betterproto.message_field(
        3
    )
    last_difficulty_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class ChannelerSlabActivityDetailInfo(betterproto.Message):
    loop_dungeon_stage_info: "ChannelerSlabLoopDungeonStageInfo" = (
        betterproto.message_field(2)
    )
    buff_info: "ChannelerSlabBuffInfo" = betterproto.message_field(9)
    stage_list: List["ChannelerSlabChallengeStage"] = betterproto.message_field(8)
    play_end_time: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class CharAmusementStageData(betterproto.Message):
    finish_time: int = betterproto.uint32_field(3)
    is_open: bool = betterproto.bool_field(6)
    stage_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CharAmusementDetailInfo(betterproto.Message):
    stage_data_list: List["CharAmusementStageData"] = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class ChessActivityDetailInfo(betterproto.Message):
    punish_over_time: int = betterproto.uint32_field(9)
    unk3300_lpddfggkgbp: int = betterproto.uint32_field(4)
    level: int = betterproto.uint32_field(14)
    exp: int = betterproto.uint32_field(6)
    unk3300_hbgegipiang: int = betterproto.uint32_field(15)
    content_close_time: int = betterproto.uint32_field(1)
    is_teach_dungeon_finished: bool = betterproto.bool_field(11)
    is_content_closed: bool = betterproto.bool_field(5)
    finished_map_id_list: List[int] = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class CoinCollectTeamInfoData(betterproto.Message):
    unk3300_cpdgjeiojab: List[int] = betterproto.uint32_field(2)
    choose_skill_no: int = betterproto.uint32_field(11)
    unk3300_ifbdfeogolh: List[int] = betterproto.uint32_field(15)
    is_host: bool = betterproto.bool_field(13)
    player_uid: int = betterproto.uint32_field(6)
    avatar_id_list: List[int] = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class CoinCollectLevelData(betterproto.Message):
    is_level_open: bool = betterproto.bool_field(6)
    unk3300_gnfgefhkhef: int = betterproto.uint32_field(14)
    level_id: int = betterproto.uint32_field(7)
    unk3300_onpkniahphm: int = betterproto.uint32_field(4)
    unk3300_gdkmjjnfipp: bool = betterproto.bool_field(13)
    single_best_team_info: "CoinCollectTeamInfoData" = betterproto.message_field(8)
    unk3300_hinhocilnjc: int = betterproto.uint32_field(1)
    unk3300_alilgjbdomd: int = betterproto.uint32_field(3)
    unk3300_olnmjjhjagk: bool = betterproto.bool_field(10)
    unk3300_lophglmndcp: int = betterproto.uint32_field(11)
    double_best_team_info_list: List[
        "CoinCollectTeamInfoData"
    ] = betterproto.message_field(2)
    unk3300_jdboohbjfcp: bool = betterproto.bool_field(9)


@dataclass(eq=False, repr=False)
class CoinCollectDetailInfo(betterproto.Message):
    level_data_list: List["CoinCollectLevelData"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CrucibleBattleUidInfo(betterproto.Message):
    profile_picture: "ProfilePicture" = betterproto.message_field(8)
    uid: int = betterproto.uint32_field(14)
    icon: int = betterproto.uint32_field(4)
    online_id: str = betterproto.string_field(13)
    nickname: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CrucibleActivityDetailInfo(betterproto.Message):
    battle_world_level: int = betterproto.uint32_field(5)
    cost_time: int = betterproto.uint32_field(7)
    pos: "Vector" = betterproto.message_field(9)
    uid_info_list: List["CrucibleBattleUidInfo"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class CrystalLinkAvatarInfo(betterproto.Message):
    avatar_id: int = betterproto.uint64_field(10)
    is_trial: bool = betterproto.bool_field(15)


@dataclass(eq=False, repr=False)
class CrystalLinkBuffInfo(betterproto.Message):
    unk3300_bgklafcbnoa: int = betterproto.uint32_field(6)
    unk3300_pflaocmefil: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CrystalLinkTeamInfo(betterproto.Message):
    avatar_info_list: List["CrystalLinkAvatarInfo"] = betterproto.message_field(14)
    buff_info_list: List["CrystalLinkBuffInfo"] = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class CrystalLinkLevelInfo(betterproto.Message):
    is_open: bool = betterproto.bool_field(4)
    team_info_list: List["CrystalLinkTeamInfo"] = betterproto.message_field(3)
    level_id: int = betterproto.uint32_field(14)
    best_score: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class CrystalLinkActivityDetailInfo(betterproto.Message):
    level_info_list: List["CrystalLinkLevelInfo"] = betterproto.message_field(5)
    difficulty_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class DeliveryActivityDetailInfo(betterproto.Message):
    day_index: int = betterproto.uint32_field(1)
    is_taken_reward: bool = betterproto.bool_field(11)
    finished_delivery_quest_index: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class DigMarkPoint(betterproto.Message):
    pos: "Vector" = betterproto.message_field(11)
    bundle_id: int = betterproto.uint32_field(3)
    rot: "Vector" = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class DigActivityDetailInfo(betterproto.Message):
    stage_id: int = betterproto.uint32_field(3)
    dig_mark_point_list: List["DigMarkPoint"] = betterproto.message_field(12)
    stage_id_list: List[int] = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class DragonSpineChapterInfo(betterproto.Message):
    open_time: int = betterproto.uint32_field(1)
    progress: int = betterproto.uint32_field(12)
    chapter_id: int = betterproto.uint32_field(6)
    finished_mission_num: int = betterproto.uint32_field(5)
    is_open: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class DragonSpineActivityDetailInfo(betterproto.Message):
    is_content_closed: bool = betterproto.bool_field(9)
    unk3300_fohjdgcakek: int = betterproto.uint32_field(3)
    unk3300_ppabofmignm: int = betterproto.uint32_field(10)
    chapter_info_list: List["DragonSpineChapterInfo"] = betterproto.message_field(7)
    unk3300_neocmgjceoj: int = betterproto.uint32_field(4)
    unk3300_imlkijaoadf: int = betterproto.uint32_field(12)
    weapon_enhance_level: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class SummerTimeDungeonInfo(betterproto.Message):
    dungeon_id: int = betterproto.uint32_field(9)
    unk3300_gmkmnhibpep: int = betterproto.uint32_field(1)
    unk3300_hjhodmoimkg: int = betterproto.uint32_field(8)
    unk3300_galedjlaipm: int = betterproto.uint32_field(5)
    unk3300_eggfjcicobd: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class EchoShellDetailInfo(betterproto.Message):
    unk3300_oocdfanffdg: List[int] = betterproto.uint32_field(6)
    taken_reward_list: List[int] = betterproto.uint32_field(5)
    summer_time_dungeon_list: List["SummerTimeDungeonInfo"] = betterproto.message_field(
        3
    )
    unk3300_nefbjpkbehf: List[int] = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class EffigyDailyInfo(betterproto.Message):
    is_first_pass_reward_taken: bool = betterproto.bool_field(7)
    unk3300_nnhiccgelhp: int = betterproto.uint32_field(2)
    unk3300_nebcdalefec: int = betterproto.uint32_field(11)
    challenge_max_score: int = betterproto.uint32_field(12)
    begin_time: int = betterproto.uint32_field(8)
    challenge_id: int = betterproto.uint32_field(6)
    day_index: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class EffigyActivityDetailInfo(betterproto.Message):
    last_difficulty_id: int = betterproto.uint32_field(8)
    taken_reward_index_list: List[int] = betterproto.uint32_field(13)
    cur_score: int = betterproto.uint32_field(5)
    daily_info_list: List["EffigyDailyInfo"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class EffigyChallengeV2LevelData(betterproto.Message):
    unk3300_ppoemeilbia: int = betterproto.uint32_field(13)
    is_level_open: bool = betterproto.bool_field(4)
    unk3300_kjeoaddmjmi: int = betterproto.uint32_field(9)
    unk3300_jmgacodmjlg: int = betterproto.uint32_field(2)
    unk3300_ijagoakoabh: int = betterproto.uint32_field(7)
    level_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class EffigyChallengeV2DetailInfo(betterproto.Message):
    level_data_list: List["EffigyChallengeV2LevelData"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ExpeditionChallengeInfo(betterproto.Message):
    id: int = betterproto.uint32_field(5)
    is_finished: bool = betterproto.bool_field(2)
    open_time: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class ExpeditionPathInfo(betterproto.Message):
    start_time: int = betterproto.uint32_field(10)
    bonus_probability: float = betterproto.float_field(12)
    avatar_id_list: List[int] = betterproto.uint32_field(8)
    path_id: int = betterproto.uint32_field(11)
    unk3300_aiejkadflkg: int = betterproto.uint32_field(6)
    unk3300_lkahoebnbbi: int = betterproto.uint32_field(14)
    unk3300_afgpgiigaka: int = betterproto.uint32_field(7)
    unk3300_lfifdgagfdc: int = betterproto.uint32_field(5)
    state: "ExpeditionState" = betterproto.enum_field(13)
    challenge_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class ExpeditionActivityDetailInfo(betterproto.Message):
    unk3300_gjlcajofckl: int = betterproto.uint32_field(9)
    challenge_info_list: List["ExpeditionChallengeInfo"] = betterproto.message_field(15)
    unk3300_mnpbcnedkaj: int = betterproto.uint32_field(3)
    path_info_list: List["ExpeditionPathInfo"] = betterproto.message_field(11)
    is_content_closed: bool = betterproto.bool_field(4)
    content_close_time: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class FindHilichurlDayContentInfo(betterproto.Message):
    start_time: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class FindHilichurlDetailInfo(betterproto.Message):
    day_index: int = betterproto.uint32_field(8)
    is_content_closed: bool = betterproto.bool_field(12)
    min_open_player_level: int = betterproto.uint32_field(2)
    day_content_info_list: List[
        "FindHilichurlDayContentInfo"
    ] = betterproto.message_field(4)
    content_close_time: int = betterproto.uint32_field(7)
    is_end_quest_accept: bool = betterproto.bool_field(5)
    player_day_index: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class FleurFairChapterInfo(betterproto.Message):
    chapter_id: int = betterproto.uint32_field(12)
    open_time: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class FleurFairDungeonSectionInfo(betterproto.Message):
    is_open: bool = betterproto.bool_field(6)
    section_id: int = betterproto.uint32_field(14)
    open_time: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class FleurFairBalloonInfo(betterproto.Message):
    best_score: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class FleurFairFallInfo(betterproto.Message):
    best_score: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class FleurFairMusicRecord(betterproto.Message):
    max_score: int = betterproto.uint32_field(11)
    is_unlock: bool = betterproto.bool_field(10)
    max_combo: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class FleurFairMusicGameInfo(betterproto.Message):
    music_record_map: Dict[int, "FleurFairMusicRecord"] = betterproto.map_field(
        6, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class FleurFairMinigameInfo(betterproto.Message):
    minigame_id: int = betterproto.uint32_field(3)
    is_open: bool = betterproto.bool_field(15)
    open_time: int = betterproto.uint32_field(13)
    balloon_info: "FleurFairBalloonInfo" = betterproto.message_field(1, group="detail")
    fall_info: "FleurFairFallInfo" = betterproto.message_field(10, group="detail")
    music_info: "FleurFairMusicGameInfo" = betterproto.message_field(14, group="detail")


@dataclass(eq=False, repr=False)
class FleurFairActivityDetailInfo(betterproto.Message):
    unk3300_konocamiiie: int = betterproto.uint32_field(3)
    chapter_info_list: List["FleurFairChapterInfo"] = betterproto.message_field(5)
    is_dungeon_unlocked: bool = betterproto.bool_field(6)
    dungeon_section_info_map: Dict[
        int, "FleurFairDungeonSectionInfo"
    ] = betterproto.map_field(8, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE)
    is_content_closed: bool = betterproto.bool_field(13)
    minigame_info_map: Dict[int, "FleurFairMinigameInfo"] = betterproto.map_field(
        9, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    unk3300_loflgooimnh: int = betterproto.uint32_field(10)
    content_close_time: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class FlightDailyRecord(betterproto.Message):
    best_score: int = betterproto.uint32_field(15)
    group_id: int = betterproto.uint32_field(13)
    is_touched: bool = betterproto.bool_field(5)
    start_time: int = betterproto.uint32_field(6)
    watcher_id_list: List[int] = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class FlightActivityDetailInfo(betterproto.Message):
    daily_record_list: List["FlightDailyRecord"] = betterproto.message_field(12)
    preview_reward_id: int = betterproto.uint32_field(1)
    min_open_player_level: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class FungusDetail(betterproto.Message):
    name_id: int = betterproto.uint32_field(8)
    unk3300_ehnbdjpankl: int = betterproto.uint32_field(2)
    fungus_id: int = betterproto.uint32_field(3)
    is_cultivate: bool = betterproto.bool_field(7)
    unk3300_gclbpdjdedn: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class FungusPlotStageDetail(betterproto.Message):
    is_open: bool = betterproto.bool_field(13)
    stage_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class FungusTrainingDungeonDetail(betterproto.Message):
    best_score: int = betterproto.uint32_field(8)
    dungeon_id: int = betterproto.uint32_field(6)
    is_open: bool = betterproto.bool_field(13)


@dataclass(eq=False, repr=False)
class FungusFighterMonsterDetail(betterproto.Message):
    cur_hp_percentage: float = betterproto.float_field(9)
    is_alive: bool = betterproto.bool_field(10)
    fungus_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class FungusTrainingMonsterPreviewDetail(betterproto.Message):
    monster_id: int = betterproto.uint32_field(12)
    level: int = betterproto.uint32_field(8)
    affix_list: List[int] = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class FungusTrainingPoolPreviewDetail(betterproto.Message):
    monster_preview_detail_list: List[
        "FungusTrainingMonsterPreviewDetail"
    ] = betterproto.message_field(10)
    pool_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class FungusTrainingProgressDetail(betterproto.Message):
    unk3300_eeoimdjohcm: List[int] = betterproto.uint32_field(10)
    total_used_time: int = betterproto.uint32_field(3)
    monster_detail_list: List["FungusFighterMonsterDetail"] = betterproto.message_field(
        14
    )
    dungeon_id: int = betterproto.uint32_field(1)
    monster_pool_preview_list: List[
        "FungusTrainingPoolPreviewDetail"
    ] = betterproto.message_field(5)
    cur_round: int = betterproto.uint32_field(9)
    unk3300_nlhefgbeoac: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class FungusFighterDetailInfo(betterproto.Message):
    fungus_detail_list: List["FungusDetail"] = betterproto.message_field(6)
    unk3300_gihakkajhdh: List[int] = betterproto.uint32_field(1)
    unk3300_kgkfjjhfhab: List[int] = betterproto.uint32_field(8)
    training_dungeon_progress_detail_list: List[
        "FungusTrainingProgressDetail"
    ] = betterproto.message_field(3)
    unk3300_hpdojobpfmj: List[int] = betterproto.uint32_field(9)
    plot_stage_detail_list: List["FungusPlotStageDetail"] = betterproto.message_field(
        11
    )
    training_dungeon_detail_list: List[
        "FungusTrainingDungeonDetail"
    ] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GachaStageData(betterproto.Message):
    stage_id: int = betterproto.uint32_field(6)
    is_open: bool = betterproto.bool_field(14)
    target_num_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class GachaActivityDetailInfo(betterproto.Message):
    unk3300_jjdhkjgdekj: int = betterproto.uint32_field(12)
    robot_num_map: Dict[int, int] = betterproto.map_field(
        10, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    have_reward_robot_num_map: Dict[int, int] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    have_get_robot_list: List[int] = betterproto.uint32_field(14)
    gacha_stage_data_list: List["GachaStageData"] = betterproto.message_field(7)
    unk3300_iggpbeocngi: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class GearLevelData(betterproto.Message):
    unk3300_dfghkdbened: int = betterproto.uint32_field(4)
    is_finished: bool = betterproto.bool_field(3)
    is_open: bool = betterproto.bool_field(5)
    open_time: int = betterproto.uint32_field(11)
    level_id: int = betterproto.uint32_field(10)
    unk3300_fikplgjibgp: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class JigsawPictureData(betterproto.Message):
    unk3300_dfghkdbened: int = betterproto.uint32_field(10)
    unk3300_fikplgjibgp: int = betterproto.uint32_field(5)
    is_finished: bool = betterproto.bool_field(7)
    is_open: bool = betterproto.bool_field(14)


@dataclass(eq=False, repr=False)
class GearActivityDetailInfo(betterproto.Message):
    gear_level_data_list: List["GearLevelData"] = betterproto.message_field(2)
    jigsaw_picture_data: "JigsawPictureData" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class GravenInnocenceCampStageInfo(betterproto.Message):
    is_open: bool = betterproto.bool_field(11)
    is_finished: bool = betterproto.bool_field(6)
    level_id: int = betterproto.uint32_field(7)
    stage_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GravenInnocenceCampInfo(betterproto.Message):
    stage_info_list: List["GravenInnocenceCampStageInfo"] = betterproto.message_field(
        14
    )


@dataclass(eq=False, repr=False)
class GravenInnocenceCarveStageInfo(betterproto.Message):
    is_open: bool = betterproto.bool_field(8)
    stage_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class GravenInnocenceCarveInfo(betterproto.Message):
    can_edit_count: int = betterproto.uint32_field(8)
    has_edit_config_id_list: List[int] = betterproto.uint32_field(12)
    stage_info_list: List["GravenInnocenceCarveStageInfo"] = betterproto.message_field(
        2
    )


@dataclass(eq=False, repr=False)
class GravenInnocencePhotoObjectInfo(betterproto.Message):
    object_id: int = betterproto.uint32_field(4)
    param: int = betterproto.uint32_field(15)
    finish_time: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class GravenInnocencePhotoStageInfo(betterproto.Message):
    stage_id: int = betterproto.uint32_field(11)
    is_open: bool = betterproto.bool_field(10)
    is_finished: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class GravenInnocencePhotoInfo(betterproto.Message):
    stage_info_list: List["GravenInnocencePhotoStageInfo"] = betterproto.message_field(
        3
    )
    object_info_list: List[
        "GravenInnocencePhotoObjectInfo"
    ] = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class GravenInnocenceRaceLevelInfo(betterproto.Message):
    level_id: int = betterproto.uint32_field(12)
    max_score: int = betterproto.uint32_field(5)
    is_open: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class GravenInnocenceRaceInfo(betterproto.Message):
    level_info_list: List["GravenInnocenceRaceLevelInfo"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class GravenInnocenceDetailInfo(betterproto.Message):
    is_content_closed: bool = betterproto.bool_field(8)
    race_info: "GravenInnocenceRaceInfo" = betterproto.message_field(2)
    camp_info: "GravenInnocenceCampInfo" = betterproto.message_field(3)
    carve_info: "GravenInnocenceCarveInfo" = betterproto.message_field(13)
    photo_info: "GravenInnocencePhotoInfo" = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class HachiStageInfo(betterproto.Message):
    open_time: int = betterproto.uint32_field(9)
    is_open: bool = betterproto.bool_field(10)
    is_finished: bool = betterproto.bool_field(14)
    stage_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class HachiActivityDetailInfo(betterproto.Message):
    stage_map: Dict[int, "HachiStageInfo"] = betterproto.map_field(
        6, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class HideAndSeekMapInfo(betterproto.Message):
    match_lock_reason_list: List[int] = betterproto.uint32_field(6)
    id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class HideAndSeekActivityDetailInfo(betterproto.Message):
    unk3300_jbkiagnaden: List[int] = betterproto.uint32_field(6)
    open_map_info_list: List["HideAndSeekMapInfo"] = betterproto.message_field(13)
    unk3300_fpcdplnjkkn: List[int] = betterproto.uint32_field(2)
    unk3300_cmlgppdannn: List[int] = betterproto.uint32_field(15)
    unk3300_hhjpaalnmnk: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class InstableSprayAvatarInfo(betterproto.Message):
    avatar_id: int = betterproto.uint64_field(10)
    is_trial: bool = betterproto.bool_field(12)


@dataclass(eq=False, repr=False)
class InstableSprayTeamInfo(betterproto.Message):
    avatar_info_list: List["InstableSprayAvatarInfo"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class InstableSprayStageInfo(betterproto.Message):
    is_finished: bool = betterproto.bool_field(12)
    stage_id: int = betterproto.uint32_field(2)
    team_info_list: List["InstableSprayTeamInfo"] = betterproto.message_field(9)
    max_score: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class InstableSprayDetailInfo(betterproto.Message):
    stage_info_list: List["InstableSprayStageInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class IrodoriChessMonsterInfo(betterproto.Message):
    grant_points: int = betterproto.uint32_field(7)
    monster_id: int = betterproto.uint32_field(13)
    level: int = betterproto.uint32_field(11)
    affix_list: List[int] = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class IrodoriChessEntranceInfo(betterproto.Message):
    entrance_point_id: int = betterproto.uint32_field(11)
    monster_info_list: List["IrodoriChessMonsterInfo"] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class IrodoriChessEntranceDetailInfo(betterproto.Message):
    info_list: List["IrodoriChessEntranceInfo"] = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class IrodoriChessMapData(betterproto.Message):
    map_id: int = betterproto.uint32_field(7)
    best_score: int = betterproto.uint32_field(4)
    equiped_card_list: List[int] = betterproto.uint32_field(15)
    entrance_detail_info: "IrodoriChessEntranceDetailInfo" = betterproto.message_field(
        2
    )


@dataclass(eq=False, repr=False)
class IrodoriChessLevelData(betterproto.Message):
    unk3300_gcigncgobml: "IrodoriChessMapData" = betterproto.message_field(6)
    level_id: int = betterproto.uint32_field(14)
    unk3300_bginemhbnad: "IrodoriChessMapData" = betterproto.message_field(10)
    open_time: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class IrodoriChessData(betterproto.Message):
    is_open: bool = betterproto.bool_field(8)
    level_data_list: List["IrodoriChessLevelData"] = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class ItemParam(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class IrodoriFlowerData(betterproto.Message):
    finished_theme_list: List[int] = betterproto.uint32_field(10)
    used_flower_list: List["ItemParam"] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class IrodoriMasterLevelDetailInfo(betterproto.Message):
    is_finish: bool = betterproto.bool_field(10)
    difficulty: int = betterproto.uint32_field(11)
    is_have_try: bool = betterproto.bool_field(15)
    min_finish_time: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class IrodoriMasterLevelInfo(betterproto.Message):
    detail_info: List["IrodoriMasterLevelDetailInfo"] = betterproto.message_field(1)
    level_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class IrodoriPoetryThemeData(betterproto.Message):
    unk3300_hfmkpnobpdk: int = betterproto.uint32_field(14)
    unk3300_cnnmehoggll: List[int] = betterproto.uint32_field(10)
    progress: int = betterproto.uint32_field(11)
    theme_id: int = betterproto.uint32_field(12)
    max_progress: int = betterproto.uint32_field(7)
    unk3300_hodjkkdbjdj: List[int] = betterproto.uint32_field(15)
    unk3300_njhmnliagik: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class IrodoriPoetryData(betterproto.Message):
    theme_data_list: List["IrodoriPoetryThemeData"] = betterproto.message_field(2)
    cur_theme_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class IrodoriActivityDetailInfo(betterproto.Message):
    chess_data: "IrodoriChessData" = betterproto.message_field(5)
    flower_data: "IrodoriFlowerData" = betterproto.message_field(3)
    poetry_data: "IrodoriPoetryData" = betterproto.message_field(6)
    master_level_list: List["IrodoriMasterLevelInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class IslandPartyStageData(betterproto.Message):
    best_score: int = betterproto.uint32_field(14)
    stage_id: int = betterproto.uint32_field(3)
    is_open: bool = betterproto.bool_field(9)


@dataclass(eq=False, repr=False)
class IslandPartyDetailInfo(betterproto.Message):
    stage_data_list: List["IslandPartyStageData"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class LanternProjectionLevelInfo(betterproto.Message):
    is_finished: bool = betterproto.bool_field(7)
    is_can_start: bool = betterproto.bool_field(14)
    id: int = betterproto.uint32_field(10)
    is_show_tips: bool = betterproto.bool_field(15)
    min_finish_time: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class LanternProjectionInfo(betterproto.Message):
    unk3300_faiaijgcbjg: List["ClientInputType"] = betterproto.enum_field(5)
    open_stage_list: List[int] = betterproto.uint32_field(15)
    level_list: List["LanternProjectionLevelInfo"] = betterproto.message_field(13)
    unk3300_ebhhfkldofb: List["ClientInputType"] = betterproto.enum_field(10)


@dataclass(eq=False, repr=False)
class LanternRiteFireworksChallengeInfo(betterproto.Message):
    best_score: int = betterproto.uint32_field(2)
    is_full_score: bool = betterproto.bool_field(3)
    challenge_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class LanternRiteFireworksStageInfo(betterproto.Message):
    stage_id: int = betterproto.uint32_field(14)
    is_open: bool = betterproto.bool_field(9)
    challenge_info_list: List[
        "LanternRiteFireworksChallengeInfo"
    ] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class LanternRiteFireworksInfo(betterproto.Message):
    stage_info_list: List["LanternRiteFireworksStageInfo"] = betterproto.message_field(
        2
    )


@dataclass(eq=False, repr=False)
class SalvageBundleChallengeInfo(betterproto.Message):
    finished_bundle_list: List[int] = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class SalvageScoreChallengeInfo(betterproto.Message):
    max_score: int = betterproto.uint32_field(8)
    salvage_challenge_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class SalvageChallengeInfo(betterproto.Message):
    challenge_type: int = betterproto.uint32_field(11)
    is_unlock: bool = betterproto.bool_field(14)
    bundle_info: "SalvageBundleChallengeInfo" = betterproto.message_field(
        2, group="challenge_detail"
    )
    score_challenge_info: "SalvageScoreChallengeInfo" = betterproto.message_field(
        9, group="challenge_detail"
    )
    boss_challenge_id: int = betterproto.uint32_field(12, group="challenge_detail")


@dataclass(eq=False, repr=False)
class SalvageStageInfo(betterproto.Message):
    stage_id: int = betterproto.uint32_field(13)
    challenge_info_list: List["SalvageChallengeInfo"] = betterproto.message_field(3)
    is_open: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class LanternRiteActivityDetailInfo(betterproto.Message):
    stage_info_list: List["SalvageStageInfo"] = betterproto.message_field(5)
    fireworks_info: "LanternRiteFireworksInfo" = betterproto.message_field(15)
    unk3300_pdfjncdgkgh: bool = betterproto.bool_field(11)
    projection_info: "LanternProjectionInfo" = betterproto.message_field(3)
    unk3300_dkbjlcimbal: bool = betterproto.bool_field(8)
    is_content_closed: bool = betterproto.bool_field(14)


@dataclass(eq=False, repr=False)
class LuminanceStoneChallengeActivityDetailInfo(betterproto.Message):
    is_content_closed: bool = betterproto.bool_field(1)
    current_stage_id: int = betterproto.uint32_field(2)
    is_final_gallery_complete: bool = betterproto.bool_field(7)
    best_score: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class LunaRiteAreaInfo(betterproto.Message):
    sacrifice_reward_list: List[int] = betterproto.uint32_field(11)
    area_id: int = betterproto.uint32_field(15)
    challenge_index: int = betterproto.uint32_field(1)
    hint_status: "LunaRiteHintStatusType" = betterproto.enum_field(7)
    sacrifice_list: List[int] = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class LunaRiteHintPoint(betterproto.Message):
    index: int = betterproto.uint32_field(8)
    pos: "Vector" = betterproto.message_field(3)
    area_id: int = betterproto.uint32_field(2)
    type: "LunaRiteHintPointType" = betterproto.enum_field(15)


@dataclass(eq=False, repr=False)
class LunaRiteDetailInfo(betterproto.Message):
    hint_point: List["LunaRiteHintPoint"] = betterproto.message_field(4)
    area_info_list: List["LunaRiteAreaInfo"] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class MichiaeMatsuriChallengePositionInfo(betterproto.Message):
    gadget_id: int = betterproto.uint32_field(7)
    pos: "Vector" = betterproto.message_field(4)
    group_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class MichiaeMatsuriChestPositionInfo(betterproto.Message):
    pos: "Vector" = betterproto.message_field(10)
    group_id: int = betterproto.uint32_field(8)
    config_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class MichiaeMatsuriStage(betterproto.Message):
    stage_id: int = betterproto.uint32_field(4)
    is_open: bool = betterproto.bool_field(2)
    open_time: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MichiaeMatsuriActivityDetailInfo(betterproto.Message):
    gain_crystal_exp: int = betterproto.uint32_field(11)
    stage_list: List["MichiaeMatsuriStage"] = betterproto.message_field(14)
    unlocked_crystal_skill_list: List[int] = betterproto.uint32_field(5)
    challenge_pos_list: List[
        "MichiaeMatsuriChallengePositionInfo"
    ] = betterproto.message_field(3)
    chest_pos_list: List["MichiaeMatsuriChestPositionInfo"] = betterproto.message_field(
        12
    )


@dataclass(eq=False, repr=False)
class MistTrialBestAvatar(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(4)
    costume_id: int = betterproto.uint32_field(12)
    avatar_type: "AvatarType" = betterproto.enum_field(6)


@dataclass(eq=False, repr=False)
class MistTrialLevelData(betterproto.Message):
    open_time: int = betterproto.uint32_field(10)
    best_avatar_list: List["MistTrialBestAvatar"] = betterproto.message_field(3)
    level_id: int = betterproto.uint32_field(14)
    first_pass_time: int = betterproto.uint32_field(1)
    best_hit_avatar: "MistTrialBestAvatar" = betterproto.message_field(11)
    is_open: bool = betterproto.bool_field(9)


@dataclass(eq=False, repr=False)
class MistTrialActivityDetailInfo(betterproto.Message):
    trial_level_data_list: List["MistTrialLevelData"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class MoonfinTrialLevelInfo(betterproto.Message):
    best_record: int = betterproto.uint32_field(15)
    open_time: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class MoonfinTrialActivityDetailInfo(betterproto.Message):
    special_fish_count: int = betterproto.uint32_field(13)
    level_info_map: Dict[int, "MoonfinTrialLevelInfo"] = betterproto.map_field(
        5, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class MuqadasPotionLevelData(betterproto.Message):
    is_open: bool = betterproto.bool_field(1)
    level_id: int = betterproto.uint32_field(2)
    max_score: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class MuqadasPotionActivityDetailInfo(betterproto.Message):
    muqadas_potion_level_data_list: List[
        "MuqadasPotionLevelData"
    ] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class MusicGameRecord(betterproto.Message):
    is_unlock: bool = betterproto.bool_field(3)
    max_combo: int = betterproto.uint32_field(14)
    max_score: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class UgcMusicBriefInfo(betterproto.Message):
    unk3300_ojokfbjalij: int = betterproto.uint32_field(12)
    unk3300_ncdkcnolgkb: bool = betterproto.bool_field(15)
    unk3300_kmmblimkjcm: int = betterproto.uint32_field(5)
    unk3300_jeebfpfehhg: List[int] = betterproto.uint32_field(526)
    unk3300_egigiookbab: int = betterproto.uint32_field(42)
    unk3300_hkbhaimobko: List[int] = betterproto.uint32_field(65)
    unk3300_mbkdgbnfpoa: int = betterproto.uint32_field(1625)
    import_from_ugc_guid: int = betterproto.uint64_field(13)
    ugc_guid: int = betterproto.uint64_field(8)
    unk3300_pbenmahhgil: int = betterproto.uint32_field(7)
    unk3300_fkigpajfplg: bool = betterproto.bool_field(3)
    version: int = betterproto.uint32_field(11)
    is_psn_platform: bool = betterproto.bool_field(2)
    unk3300_plnofohfape: int = betterproto.uint32_field(4)
    unk3300_ccmmpahimdo: int = betterproto.uint32_field(95)
    creator_nickname: str = betterproto.string_field(9)
    music_id: int = betterproto.uint32_field(6)
    unk3300_gdnapnainba: bool = betterproto.bool_field(10)
    max_score: int = betterproto.uint32_field(1)
    unk3300_obbmcfadnin: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class MusicGameActivityDetailInfo(betterproto.Message):
    unk3300_aagcdcoipjm: List["UgcMusicBriefInfo"] = betterproto.message_field(2)
    unk3300_okhaacghmap: List["UgcMusicBriefInfo"] = betterproto.message_field(12)
    music_game_record_map: Dict[int, "MusicGameRecord"] = betterproto.map_field(
        9, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class PhotoPosData(betterproto.Message):
    open_time: int = betterproto.uint32_field(10)
    pos_id: int = betterproto.uint32_field(9)
    center: "Vector" = betterproto.message_field(7)
    is_view: bool = betterproto.bool_field(13)
    is_open: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class PhotoActivityDetailInfo(betterproto.Message):
    is_content_closed: bool = betterproto.bool_field(5)
    photo_pos_data_list: List["PhotoPosData"] = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class PlantFlowerActivityDetailInfo(betterproto.Message):
    day_index: int = betterproto.uint32_field(1)
    today_seed_reward_id: int = betterproto.uint32_field(15)
    is_content_closed: bool = betterproto.bool_field(3)
    unk3300_epmkdfoblfk: Dict[int, int] = betterproto.map_field(
        9, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    unk3300_elaibmdibfj: Dict[int, int] = betterproto.map_field(
        5, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    is_today_has_awarded: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class PotionLevelData(betterproto.Message):
    difficulty_level: int = betterproto.uint32_field(3)
    mode_id: int = betterproto.uint32_field(7)
    score: int = betterproto.uint32_field(1)
    level_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class PotionStageData(betterproto.Message):
    unk3300_bmehjhfcpma: List[int] = betterproto.uint32_field(7)
    unk3300_nlmepppmcki: List[int] = betterproto.uint32_field(9)
    stage_id: int = betterproto.uint32_field(13)
    is_open: bool = betterproto.bool_field(8)
    level_list: List["PotionLevelData"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class PotionActivityDetailInfo(betterproto.Message):
    stage_list: List["PotionStageData"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class RockBoardExploreStageData(betterproto.Message):
    is_finish: bool = betterproto.bool_field(8)
    is_open: bool = betterproto.bool_field(9)
    open_time: int = betterproto.uint32_field(12)
    stage_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class RockBoardExploreDetailInfo(betterproto.Message):
    stage_data_list: List["RockBoardExploreStageData"] = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class RogueDiaryProgress(betterproto.Message):
    difficulty: int = betterproto.uint32_field(10)
    is_enter_dungeon: bool = betterproto.bool_field(3)
    stage_id: int = betterproto.uint32_field(6)
    optional_card_list: List[int] = betterproto.uint32_field(5)
    cur_round: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class RogueDiaryDungeonRecord(betterproto.Message):
    finish_time: int = betterproto.uint32_field(14)
    is_finish: bool = betterproto.bool_field(10)
    difficulty: int = betterproto.uint32_field(5)
    max_round: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class RogueDiaryStageInfo(betterproto.Message):
    stage_id: int = betterproto.uint32_field(15)
    best_record: "RogueDiaryDungeonRecord" = betterproto.message_field(9)
    is_have_try: bool = betterproto.bool_field(11)


@dataclass(eq=False, repr=False)
class RogueDiaryActivityDetailInfo(betterproto.Message):
    is_content_closed: bool = betterproto.bool_field(3)
    stage_list: List["RogueDiaryStageInfo"] = betterproto.message_field(11)
    is_have_progress: bool = betterproto.bool_field(5)
    cur_progress: "RogueDiaryProgress" = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class RogueAvatarInfo(betterproto.Message):
    is_onstage: bool = betterproto.bool_field(2)
    is_alive: bool = betterproto.bool_field(8)
    avatar_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class RogueShowAvatarTeamInfo(betterproto.Message):
    avatar_list: List["RogueAvatarInfo"] = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class RoguelikeRuneRecord(betterproto.Message):
    rune_id: int = betterproto.uint32_field(10)
    unk3300_jlolmlfaphh: int = betterproto.uint32_field(1)
    unk3300_igbojlppkon: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class RogueStageInfo(betterproto.Message):
    revise_monster_level: int = betterproto.uint32_field(1966)
    is_passed: bool = betterproto.bool_field(11)
    unk3300_gghmfknhpaj: int = betterproto.uint32_field(2)
    avatar_team: "RogueShowAvatarTeamInfo" = betterproto.message_field(8)
    is_taken_reward: bool = betterproto.bool_field(9)
    unk3300_hmcjollkmmb: bool = betterproto.bool_field(14)
    rune_record_list: List["RoguelikeRuneRecord"] = betterproto.message_field(5)
    unk3300_hmaelbbofdn: bool = betterproto.bool_field(6)
    unk3300_cmmgkmmmoal: int = betterproto.uint32_field(3)
    is_open: bool = betterproto.bool_field(13)
    stage_id: int = betterproto.uint32_field(7)
    unk3300_dabpfcpcncb: int = betterproto.uint32_field(4)
    cur_level: int = betterproto.uint32_field(12)
    unk3300_ohhbepoicli: int = betterproto.uint32_field(1)
    unk3300_hpkfhllcjbm: int = betterproto.uint32_field(275)


@dataclass(eq=False, repr=False)
class RoguelikeShikigamiRecord(betterproto.Message):
    id: int = betterproto.uint32_field(2)
    level: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class RoguelikeDungeonActivityDetailInfo(betterproto.Message):
    stage_list: List["RogueStageInfo"] = betterproto.message_field(14)
    equipped_rune_list: List[int] = betterproto.uint32_field(9)
    content_close_time: int = betterproto.uint32_field(11)
    rune_list: List[int] = betterproto.uint32_field(3)
    shikigami_list: List["RoguelikeShikigamiRecord"] = betterproto.message_field(4)
    is_content_closed: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class SalesmanActivityDetailInfo(betterproto.Message):
    status: "SalesmanStatusType" = betterproto.enum_field(5)
    selected_reward_id_map: Dict[int, int] = betterproto.map_field(
        12, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    unk3300_dijfocbgiam: int = betterproto.uint32_field(7)
    unk3300_djfcefkgkpi: bool = betterproto.bool_field(2)
    day_index: int = betterproto.uint32_field(9)
    unk3300_lpabhmopfce: int = betterproto.uint32_field(6)
    unk3300_knjcbgfklfd: int = betterproto.uint32_field(10)
    unk3300_foffaeebbnp: int = betterproto.uint32_field(3)
    unk3300_jnalbacfnfn: bool = betterproto.bool_field(14)
    day_reward_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class SeaLampActivityDetailInfo(betterproto.Message):
    unk3300_odbffaiipmb: List[int] = betterproto.uint32_field(2)
    days: int = betterproto.uint32_field(6)
    unk3300_dgmgnjlhfmb: int = betterproto.uint32_field(8)
    progress: int = betterproto.uint32_field(5)
    unk3300_fghdjjclnfn: List[int] = betterproto.uint32_field(14)
    unk3300_gbccjmbpbbi: int = betterproto.uint32_field(11)
    phase_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SeaLampSectionInfo(betterproto.Message):
    section_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class SeaLampActivityInfo(betterproto.Message):
    day_index: int = betterproto.uint32_field(14)
    is_content_closed: bool = betterproto.bool_field(15)
    section_info_list: List["SeaLampSectionInfo"] = betterproto.message_field(1)
    mechanicus_id: int = betterproto.uint32_field(7)
    first_day_start_time: int = betterproto.uint32_field(6)
    sea_lamp_coin: int = betterproto.uint32_field(11)
    popularity: int = betterproto.uint32_field(2)
    unk3300_jmpcjgjhpih: bool = betterproto.bool_field(13)
    unk3300_bajigngjalg: bool = betterproto.bool_field(9)


@dataclass(eq=False, repr=False)
class SpiceStageData(betterproto.Message):
    is_open: bool = betterproto.bool_field(4)
    stage_id: int = betterproto.uint32_field(5)
    success_times: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class SpiceActivityDetailInfo(betterproto.Message):
    unk3300_cihiajegcbo: int = betterproto.uint32_field(14)
    unk3300_lakpmmipbmi: int = betterproto.uint32_field(8)
    spice_stage_data_list: List["SpiceStageData"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class SummerTimeSprintBoatRecord(betterproto.Message):
    start_time: int = betterproto.uint32_field(12)
    group_id: int = betterproto.uint32_field(5)
    watcher_id_list: List[int] = betterproto.uint32_field(2)
    best_score: int = betterproto.uint32_field(13)
    is_touched: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class SummerTimeSprintBoatInfo(betterproto.Message):
    record_list: List["SummerTimeSprintBoatRecord"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class SummerTimeStageInfo(betterproto.Message):
    open_time: int = betterproto.uint32_field(11)
    stage_id: int = betterproto.uint32_field(2)
    is_open: bool = betterproto.bool_field(14)


@dataclass(eq=False, repr=False)
class SummerTimeDetailInfo(betterproto.Message):
    stage_map: Dict[int, "SummerTimeStageInfo"] = betterproto.map_field(
        9, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    sprint_boat_info: "SummerTimeSprintBoatInfo" = betterproto.message_field(1)
    is_content_closed: bool = betterproto.bool_field(13)
    content_close_time: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class SummerTimeV2BoatStageInfo(betterproto.Message):
    is_open: bool = betterproto.bool_field(11)
    stage_id: int = betterproto.uint32_field(13)
    open_time: int = betterproto.uint32_field(5)
    best_score: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class SummerTimeV2DungeonStageInfo(betterproto.Message):
    is_open: bool = betterproto.bool_field(6)
    stage_id: int = betterproto.uint32_field(3)
    is_prev_dungeon_succeed: bool = betterproto.bool_field(12)
    open_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SummerTimeV2DetailInfo(betterproto.Message):
    is_content_closed: bool = betterproto.bool_field(14)
    unk3300_bnnmnckehho: int = betterproto.uint32_field(9)
    dungeon_stage_info_list: List[
        "SummerTimeV2DungeonStageInfo"
    ] = betterproto.message_field(5)
    unk3300_jhbchfhagfo: int = betterproto.uint32_field(8)
    boat_stage_info_list: List["SummerTimeV2BoatStageInfo"] = betterproto.message_field(
        3
    )


@dataclass(eq=False, repr=False)
class SumoAvatarInfo(betterproto.Message):
    is_trial: bool = betterproto.bool_field(9)
    avatar_id: int = betterproto.uint64_field(13)


@dataclass(eq=False, repr=False)
class SumoTeamData(betterproto.Message):
    skill_id_list: List[int] = betterproto.uint32_field(12)
    avatar_info_list: List["SumoAvatarInfo"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class SumoStageData(betterproto.Message):
    stage_id: int = betterproto.uint32_field(2)
    open_time: int = betterproto.uint32_field(15)
    team_list: List["SumoTeamData"] = betterproto.message_field(1)
    max_score: int = betterproto.uint32_field(7)
    is_open: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class SumoActivityDetailInfo(betterproto.Message):
    difficulty_id: int = betterproto.uint32_field(11)
    last_stage_id: int = betterproto.uint32_field(12)
    sumo_stage_map: Dict[int, "SumoStageData"] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class TanukiTravelLevelData(betterproto.Message):
    is_finish: bool = betterproto.bool_field(7)
    is_open: bool = betterproto.bool_field(9)
    route_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class TanukiTravelActivityDetailInfo(betterproto.Message):
    tanuki_travel_level_data_list: List[
        "TanukiTravelLevelData"
    ] = betterproto.message_field(5)
    is_content_closed: bool = betterproto.bool_field(12)
    finished_level_index: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class TreasureMapBonusChallengeInfo(betterproto.Message):
    is_done: bool = betterproto.bool_field(5)
    solution_id: int = betterproto.uint32_field(15)
    fragment_map: Dict[int, bool] = betterproto.map_field(
        11, betterproto.TYPE_UINT32, betterproto.TYPE_BOOL
    )
    is_active: bool = betterproto.bool_field(13)
    config_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class TreasureMapRegionInfo(betterproto.Message):
    region_radius: int = betterproto.uint32_field(13)
    region_id: int = betterproto.uint32_field(10)
    region_center_pos: "Vector" = betterproto.message_field(5)
    unk3300_hhbhlphlhil: bool = betterproto.bool_field(6)
    start_time: int = betterproto.uint32_field(8)
    unk3300_lkemedpmigm: int = betterproto.uint32_field(3)
    unk3300_nibjoajlcji: bool = betterproto.bool_field(1)
    scene_id: int = betterproto.uint32_field(12)
    unk3300_mnekjilfhoa: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TreasureMapActivityDetailInfo(betterproto.Message):
    is_mp_challenge_touched: bool = betterproto.bool_field(15)
    total_mp_spot_num: int = betterproto.uint32_field(12)
    active_region_index: int = betterproto.uint32_field(3)
    bonus_challenge_list: List[
        "TreasureMapBonusChallengeInfo"
    ] = betterproto.message_field(13)
    min_open_player_level: int = betterproto.uint32_field(8)
    preview_reward_id: int = betterproto.uint32_field(2)
    treasure_close_time: int = betterproto.uint32_field(1)
    currency_num: int = betterproto.uint32_field(4)
    region_info_list: List["TreasureMapRegionInfo"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class TreasureSeelieRegionData(betterproto.Message):
    region_id: int = betterproto.uint32_field(15)
    is_open: bool = betterproto.bool_field(1)
    open_time: int = betterproto.uint32_field(11)
    region_center_pos: "Vector" = betterproto.message_field(9)
    unk3300_cphojnmedbc: int = betterproto.uint32_field(8)
    region_radius: float = betterproto.float_field(6)
    unk3300_kgecoiikjlj: int = betterproto.uint32_field(5)
    unk3300_afamhpceikp: int = betterproto.uint32_field(14)
    is_done: bool = betterproto.bool_field(10)
    scene_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class TreasureSeelieActivityDetailInfo(betterproto.Message):
    treasure_close_time: int = betterproto.uint32_field(13)
    is_content_closed: bool = betterproto.bool_field(15)
    region_data_list: List["TreasureSeelieRegionData"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class TrialAvatarActivityRewardDetailInfo(betterproto.Message):
    trial_avatar_index_id: int = betterproto.uint32_field(4)
    unk3300_ifepgckhodl: bool = betterproto.bool_field(14)
    unk3300_nejlgbbfdph: bool = betterproto.bool_field(5)
    reward_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class TrialAvatarActivityDetailInfo(betterproto.Message):
    reward_info_list: List[
        "TrialAvatarActivityRewardDetailInfo"
    ] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class OfficialCustomDungeon(betterproto.Message):
    dungeon_id: int = betterproto.uint32_field(4)
    win_times: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class UgcActivityDetailInfo(betterproto.Message):
    is_enable_ugc: bool = betterproto.bool_field(14)
    official_custom_dungeon_list: List[
        "OfficialCustomDungeon"
    ] = betterproto.message_field(10)
    custom_dungeon_group_id: int = betterproto.uint32_field(4)
    is_ugc_feature_closed: bool = betterproto.bool_field(9)


@dataclass(eq=False, repr=False)
class VintageBoothUsedItemData(betterproto.Message):
    is_open: bool = betterproto.bool_field(10)
    gadget_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class VintageCampChallengeLevelData(betterproto.Message):
    is_finish: bool = betterproto.bool_field(13)
    stage_id: int = betterproto.uint32_field(15)
    level_id: int = betterproto.uint32_field(1)
    is_open: bool = betterproto.bool_field(12)


@dataclass(eq=False, repr=False)
class VintageCampChallengeStageData(betterproto.Message):
    max_finished_level: int = betterproto.uint32_field(4)
    is_finish: bool = betterproto.bool_field(14)
    camp_level_map: Dict[int, "VintageCampChallengeLevelData"] = betterproto.map_field(
        6, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    is_open: bool = betterproto.bool_field(2)
    stage_id: int = betterproto.uint32_field(13)
    open_time: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class VintageHuntingStageData(betterproto.Message):
    record_value: int = betterproto.uint32_field(11)
    open_time: int = betterproto.uint32_field(5)
    stage_id: int = betterproto.uint32_field(10)
    is_finish: bool = betterproto.bool_field(12)
    is_open: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class VintageMarketTraderInfo(betterproto.Message):
    trader_id: int = betterproto.uint32_field(4)
    available_item_list: List["ItemParam"] = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class VintageMarketDealInfo(betterproto.Message):
    trader_item_info_map: Dict[int, "VintageMarketTraderInfo"] = betterproto.map_field(
        5, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class VintageMarketStoreInfo(betterproto.Message):
    store_id: int = betterproto.uint32_field(13)
    unk3300_hnbghccenia: List[int] = betterproto.uint32_field(1)
    strategy_list: List[int] = betterproto.uint32_field(10)
    unk3300_odllankoend: List[int] = betterproto.uint32_field(7)
    slot_count: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class VintageMarketInfo(betterproto.Message):
    bargain_info_map: Dict[int, bool] = betterproto.map_field(
        9, betterproto.TYPE_UINT32, betterproto.TYPE_BOOL
    )
    unk3300_fjdimcjeaob: bool = betterproto.bool_field(8)
    unk3300_cokbokaocnj: List[int] = betterproto.uint32_field(1007)
    help_skill_id: int = betterproto.uint32_field(760)
    unk3300_abhhacbdcfi: List[int] = betterproto.uint32_field(7)
    open_store_list: List["VintageMarketStoreInfo"] = betterproto.message_field(2)
    unk3300_edbjlbicejf: List[int] = betterproto.uint32_field(10)
    unk3300_pamkpaocjjj: bool = betterproto.bool_field(11)
    unk3300_fopkaiiamfm: int = betterproto.uint32_field(1826)
    unk3300_nbnojjbnjpb: bool = betterproto.bool_field(470)
    deal_info: "VintageMarketDealInfo" = betterproto.message_field(12)
    store_round: int = betterproto.uint32_field(3)
    unlock_strategy_list: List[int] = betterproto.uint32_field(13)
    unk3300_aiambbodlbo: List[int] = betterproto.uint32_field(14)
    unk3300_ndfhaghbcfn: bool = betterproto.bool_field(6)
    unk3300_lmnlhhpmamn: int = betterproto.uint32_field(1)
    unk3300_alhlenelieo: bool = betterproto.bool_field(1594)
    unk3300_acjlanlbcgk: int = betterproto.uint32_field(1658)
    unk3300_hhkkeddigla: int = betterproto.uint32_field(5)
    unk3300_kjdefibkbpe: bool = betterproto.bool_field(4)
    unk3300_icjocdglffd: bool = betterproto.bool_field(15)
    unk3300_nmhhgnpkbel: bool = betterproto.bool_field(1721)


@dataclass(eq=False, repr=False)
class VintagePresentLevelData(betterproto.Message):
    is_finish: bool = betterproto.bool_field(6)
    is_open: bool = betterproto.bool_field(3)
    stage_id: int = betterproto.uint32_field(9)
    present_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class VintagePresentStageData(betterproto.Message):
    is_open: bool = betterproto.bool_field(4)
    is_finish: bool = betterproto.bool_field(10)
    present_level_map: Dict[int, "VintagePresentLevelData"] = betterproto.map_field(
        11, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    open_time: int = betterproto.uint32_field(8)
    stage_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class VintageActivityDetailInfo(betterproto.Message):
    unk3300_pciigpjjhgf: Dict[int, "VintagePresentStageData"] = betterproto.map_field(
        11, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    is_content_closed: bool = betterproto.bool_field(13)
    unk3300_ehhpfkiokoo: Dict[int, "VintageHuntingStageData"] = betterproto.map_field(
        10, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    booth_data: "VintageBoothUsedItemData" = betterproto.message_field(9)
    unk3300_npkmdfclgbj: Dict[
        int, "VintageCampChallengeStageData"
    ] = betterproto.map_field(2, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE)
    market_info: "VintageMarketInfo" = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class WaterSpiritActivityDetailInfo(betterproto.Message):
    search_time_map: Dict[int, int] = betterproto.map_field(
        13, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    region_search_id: int = betterproto.uint32_field(4)
    mp_play_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class WindFieldStageInfo(betterproto.Message):
    stage_id: int = betterproto.uint32_field(10)
    is_open: bool = betterproto.bool_field(4)
    open_time: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class WindFieldDetailInfo(betterproto.Message):
    stage_info_list: List["WindFieldStageInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WinterCampRaceStageInfo(betterproto.Message):
    id: int = betterproto.uint32_field(2)
    pos: "Vector" = betterproto.message_field(6)
    open_time: int = betterproto.uint32_field(5)
    max_score: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class WinterCampStageInfo(betterproto.Message):
    open_time: int = betterproto.uint32_field(3)
    total_progress: int = betterproto.uint32_field(2)
    cur_progress: int = betterproto.uint32_field(9)
    id: int = betterproto.uint32_field(1)
    pos: "Vector" = betterproto.message_field(14)
    is_finished: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class WinterCampActivityDetailInfo(betterproto.Message):
    explore_info: "WinterCampStageInfo" = betterproto.message_field(3)
    unk3300_kcgknjfgcfc: List[int] = betterproto.uint32_field(4)
    is_content_closed: bool = betterproto.bool_field(12)
    unk3300_cmnibpmoeco: List[int] = betterproto.uint32_field(5)
    unk3300_fhnnjjdgloo: List[int] = betterproto.uint32_field(6)
    used_item_list: List["ItemParam"] = betterproto.message_field(14)
    battle_info: "WinterCampStageInfo" = betterproto.message_field(9)
    race_info_list: List["WinterCampRaceStageInfo"] = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class ActivityInfo(betterproto.Message):
    unk3300_mjnpgeklocg: bool = betterproto.bool_field(360)
    is_finished: bool = betterproto.bool_field(8)
    cur_score: int = betterproto.uint32_field(1268)
    schedule_id: int = betterproto.uint32_field(7)
    unk3300_jaealaiooid: int = betterproto.uint32_field(1870)
    unk3300_icnjjkdhpch: bool = betterproto.bool_field(14)
    unk3300_bgniblkcpca: List[int] = betterproto.uint32_field(11)
    unk3300_nepkllbjfkk: bool = betterproto.bool_field(1645)
    watcher_info_list: List["ActivityWatcherInfo"] = betterproto.message_field(6)
    activity_push_tips_data_list: List[
        "ActivityPushTipsData"
    ] = betterproto.message_field(1867)
    activity_id: int = betterproto.uint32_field(13)
    taken_reward_list: List[int] = betterproto.uint32_field(1889)
    unk3300_gceakemmjea: int = betterproto.uint32_field(697)
    activity_coin_map: Dict[int, int] = betterproto.map_field(
        36, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    first_day_start_time: int = betterproto.uint32_field(786)
    unk3300_abjklalkldg: bool = betterproto.bool_field(1486)
    unk3300_dmiloonbelh: int = betterproto.uint32_field(3)
    unk3300_cbcehljjogi: bool = betterproto.bool_field(1375)
    begin_time: int = betterproto.uint32_field(1)
    unk3300_mdbdpibeggh: bool = betterproto.bool_field(12)
    wish_gift_num_map: Dict[int, int] = betterproto.map_field(
        939, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    end_time: int = betterproto.uint32_field(10)
    unk3300_hkknihnbhae: List[int] = betterproto.uint32_field(5)
    sam_lamp_info: "SeaLampActivityDetailInfo" = betterproto.message_field(
        2, group="detail"
    )
    crucible_info: "CrucibleActivityDetailInfo" = betterproto.message_field(
        15, group="detail"
    )
    salesman_info: "SalesmanActivityDetailInfo" = betterproto.message_field(
        9, group="detail"
    )
    trial_avatar_info: "TrialAvatarActivityDetailInfo" = betterproto.message_field(
        4, group="detail"
    )
    delivery_info: "DeliveryActivityDetailInfo" = betterproto.message_field(
        1141, group="detail"
    )
    aster_info: "AsterActivityDetailInfo" = betterproto.message_field(
        1977, group="detail"
    )
    flight_info: "FlightActivityDetailInfo" = betterproto.message_field(
        2011, group="detail"
    )
    dragon_spine_info: "DragonSpineActivityDetailInfo" = betterproto.message_field(
        1310, group="detail"
    )
    effigy_info: "EffigyActivityDetailInfo" = betterproto.message_field(
        1374, group="detail"
    )
    treasure_map_info: "TreasureMapActivityDetailInfo" = betterproto.message_field(
        1925, group="detail"
    )
    blessing_info: "BlessingActivityDetailInfo" = betterproto.message_field(
        1962, group="detail"
    )
    sea_lamp_info: "SeaLampActivityInfo" = betterproto.message_field(
        247, group="detail"
    )
    expedition_info: "ExpeditionActivityDetailInfo" = betterproto.message_field(
        1752, group="detail"
    )
    arena_challenge_info: "ArenaChallengeActivityDetailInfo" = (
        betterproto.message_field(538, group="detail")
    )
    fleur_fair_info: "FleurFairActivityDetailInfo" = betterproto.message_field(
        1447, group="detail"
    )
    water_spirit_info: "WaterSpiritActivityDetailInfo" = betterproto.message_field(
        635, group="detail"
    )
    channeler_slab_info: "ChannelerSlabActivityDetailInfo" = betterproto.message_field(
        846, group="detail"
    )
    mist_trial_activity_info: "MistTrialActivityDetailInfo" = betterproto.message_field(
        432, group="detail"
    )
    hide_and_seek_info: "HideAndSeekActivityDetailInfo" = betterproto.message_field(
        839, group="detail"
    )
    find_hilichurl_info: "FindHilichurlDetailInfo" = betterproto.message_field(
        378, group="detail"
    )
    summer_time_info: "SummerTimeDetailInfo" = betterproto.message_field(
        1910, group="detail"
    )
    buoyant_combat_info: "BuoyantCombatDetailInfo" = betterproto.message_field(
        686, group="detail"
    )
    echo_shell_info: "EchoShellDetailInfo" = betterproto.message_field(
        1162, group="detail"
    )
    bounce_conjuring_info: "BounceConjuringActivityDetailInfo" = (
        betterproto.message_field(922, group="detail")
    )
    blitz_rush_info: "BlitzRushActivityDetailInfo" = betterproto.message_field(
        64, group="detail"
    )
    chess_info: "ChessActivityDetailInfo" = betterproto.message_field(
        1006, group="detail"
    )
    sumo_info: "SumoActivityDetailInfo" = betterproto.message_field(505, group="detail")
    moonfin_trial_info: "MoonfinTrialActivityDetailInfo" = betterproto.message_field(
        766, group="detail"
    )
    luna_rite_info: "LunaRiteDetailInfo" = betterproto.message_field(
        1545, group="detail"
    )
    plant_flower_info: "PlantFlowerActivityDetailInfo" = betterproto.message_field(
        1274, group="detail"
    )
    music_game_info: "MusicGameActivityDetailInfo" = betterproto.message_field(
        1989, group="detail"
    )
    roguelike_dungeon_info: "RoguelikeDungeonActivityDetailInfo" = (
        betterproto.message_field(970, group="detail")
    )
    dig_info: "DigActivityDetailInfo" = betterproto.message_field(1862, group="detail")
    hachi_info: "HachiActivityDetailInfo" = betterproto.message_field(
        511, group="detail"
    )
    winter_camp_info: "WinterCampActivityDetailInfo" = betterproto.message_field(
        699, group="detail"
    )
    potion_info: "PotionActivityDetailInfo" = betterproto.message_field(
        1567, group="detail"
    )
    tanuki_travel_activity_info: "TanukiTravelActivityDetailInfo" = (
        betterproto.message_field(1348, group="detail")
    )
    lantern_rite_activity_info: "LanternRiteActivityDetailInfo" = (
        betterproto.message_field(237, group="detail")
    )
    michiae_matsuri_info: "MichiaeMatsuriActivityDetailInfo" = (
        betterproto.message_field(1839, group="detail")
    )
    bartender_info: "BartenderActivityDetailInfo" = betterproto.message_field(
        551, group="detail"
    )
    ugc_info: "UgcActivityDetailInfo" = betterproto.message_field(1182, group="detail")
    crystal_link_info: "CrystalLinkActivityDetailInfo" = betterproto.message_field(
        812, group="detail"
    )
    irodori_info: "IrodoriActivityDetailInfo" = betterproto.message_field(
        1056, group="detail"
    )
    photo_info: "PhotoActivityDetailInfo" = betterproto.message_field(
        1822, group="detail"
    )
    spice_info: "SpiceActivityDetailInfo" = betterproto.message_field(
        789, group="detail"
    )
    gacha_info: "GachaActivityDetailInfo" = betterproto.message_field(
        1297, group="detail"
    )
    luminance_stone_challenge_info: "LuminanceStoneChallengeActivityDetailInfo" = (
        betterproto.message_field(444, group="detail")
    )
    rogue_diary_info: "RogueDiaryActivityDetailInfo" = betterproto.message_field(
        560, group="detail"
    )
    summer_time_v2_info: "SummerTimeV2DetailInfo" = betterproto.message_field(
        411, group="detail"
    )
    island_party_info: "IslandPartyDetailInfo" = betterproto.message_field(
        740, group="detail"
    )
    gear_info: "GearActivityDetailInfo" = betterproto.message_field(
        1482, group="detail"
    )
    graven_innocence_info: "GravenInnocenceDetailInfo" = betterproto.message_field(
        1928, group="detail"
    )
    instable_spray_info: "InstableSprayDetailInfo" = betterproto.message_field(
        1145, group="detail"
    )
    muqadas_potion_info: "MuqadasPotionActivityDetailInfo" = betterproto.message_field(
        1662, group="detail"
    )
    treasure_seelie_info: "TreasureSeelieActivityDetailInfo" = (
        betterproto.message_field(1032, group="detail")
    )
    rock_board_explore_info: "RockBoardExploreDetailInfo" = betterproto.message_field(
        1265, group="detail"
    )
    vintage_info: "VintageActivityDetailInfo" = betterproto.message_field(
        1308, group="detail"
    )
    wind_field_info: "WindFieldDetailInfo" = betterproto.message_field(
        468, group="detail"
    )
    fungus_fighter_info: "FungusFighterDetailInfo" = betterproto.message_field(
        1757, group="detail"
    )
    char_amusement_info: "CharAmusementDetailInfo" = betterproto.message_field(
        621, group="detail"
    )
    effigy_challenge_info: "EffigyChallengeV2DetailInfo" = betterproto.message_field(
        233, group="detail"
    )
    coin_collect_info: "CoinCollectDetailInfo" = betterproto.message_field(
        2002, group="detail"
    )
    brick_breaker_info: "BrickBreakerDetailInfo" = betterproto.message_field(
        1522, group="detail"
    )


@dataclass(eq=False, repr=False)
class ActivityInfoNotify(betterproto.Message):
    activity_info: "ActivityInfo" = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class ActivityPlayOpenAnimNotify(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ActivityPushTipsInfoNotify(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(3)
    activity_push_tips_data_list: List[
        "ActivityPushTipsData"
    ] = betterproto.message_field(10)
    activity_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class ActivityReadPushTipsReq(betterproto.Message):
    activity_push_tips_id_list: List[int] = betterproto.uint32_field(1)
    activity_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class ActivityReadPushTipsRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class ActivitySaleChangeNotify(betterproto.Message):
    is_close: bool = betterproto.bool_field(14)
    sale_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class ActivityScheduleInfo(betterproto.Message):
    end_time: int = betterproto.uint32_field(3)
    is_open: bool = betterproto.bool_field(12)
    begin_time: int = betterproto.uint32_field(1)
    schedule_id: int = betterproto.uint32_field(9)
    activity_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class ActivityScheduleInfoNotify(betterproto.Message):
    activity_schedule_list: List["ActivityScheduleInfo"] = betterproto.message_field(1)
    remain_fly_sea_lamp_num: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class ActivitySelectAvatarCardReq(betterproto.Message):
    reward_id: int = betterproto.uint32_field(14)
    activity_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class ActivitySelectAvatarCardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(3)
    activity_id: int = betterproto.uint32_field(15)
    reward_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ActivitySetGiftWishReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(12)
    gift_num_map: Dict[int, int] = betterproto.map_field(
        13, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class ActivitySetGiftWishRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(9)
    schedule_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ActivityShopSheetInfo(betterproto.Message):
    begin_time: int = betterproto.uint32_field(1)
    end_time: int = betterproto.uint32_field(6)
    sheet_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class ActivityTakeAllScoreRewardReq(betterproto.Message):
    activity_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class ActivityTakeAllScoreRewardRsp(betterproto.Message):
    reward_config_list: List[int] = betterproto.uint32_field(10)
    retcode: int = betterproto.int32_field(9)
    activity_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ActivityTakeScoreRewardReq(betterproto.Message):
    reward_config_id: int = betterproto.uint32_field(12)
    activity_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class ActivityTakeScoreRewardRsp(betterproto.Message):
    activity_id: int = betterproto.uint32_field(12)
    reward_config_id: int = betterproto.uint32_field(2)
    retcode: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class ActivityTakeWatcherRewardBatchReq(betterproto.Message):
    watcher_id_list: List[int] = betterproto.uint32_field(7)
    activity_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class ActivityTakeWatcherRewardBatchRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(11)
    activity_id: int = betterproto.uint32_field(10)
    item_list: List["ItemParam"] = betterproto.message_field(8)
    watcher_id_list: List[int] = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class ActivityTakeWatcherRewardReq(betterproto.Message):
    watcher_id: int = betterproto.uint32_field(14)
    activity_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ActivityTakeWatcherRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(14)
    activity_id: int = betterproto.uint32_field(10)
    watcher_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class ActivityUpdateWatcherNotify(betterproto.Message):
    activity_id: int = betterproto.uint32_field(9)
    watcher_info: "ActivityWatcherInfo" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class AddAranaraCollectionNotify(betterproto.Message):
    unk3300_njljbbmjlbk: "AranaraCollectionState" = betterproto.enum_field(10)
    collection_id: int = betterproto.uint32_field(7)
    unk3300_afbiblnkcod: "AranaraCollectionState" = betterproto.enum_field(4)
    collection_type: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AddBackupAvatarTeamReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class AddBackupAvatarTeamRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class AddBlacklistReq(betterproto.Message):
    target_uid: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class SocialShowAvatarInfo(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)
    costume_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class FriendBrief(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    nickname: str = betterproto.string_field(2)
    level: int = betterproto.uint32_field(3)
    avatar_id: int = betterproto.uint32_field(4)
    world_level: int = betterproto.uint32_field(5)
    signature: str = betterproto.string_field(6)
    online_state: "FriendOnlineState" = betterproto.enum_field(7)
    param: int = betterproto.uint32_field(8)
    is_mp_mode_available: bool = betterproto.bool_field(10)
    online_id: str = betterproto.string_field(11)
    last_active_time: int = betterproto.uint32_field(12)
    name_card_id: int = betterproto.uint32_field(13)
    mp_player_num: int = betterproto.uint32_field(14)
    is_chat_no_disturb: bool = betterproto.bool_field(15)
    chat_sequence: int = betterproto.uint32_field(16)
    remark_name: str = betterproto.string_field(17)
    show_avatar_info_list: List["SocialShowAvatarInfo"] = betterproto.message_field(22)
    friend_enter_home_option: "FriendEnterHomeOption" = betterproto.enum_field(23)
    profile_picture: "ProfilePicture" = betterproto.message_field(24)
    is_game_source: bool = betterproto.bool_field(25)
    is_psn_source: bool = betterproto.bool_field(26)
    platform_type: "PlatformType" = betterproto.enum_field(27)


@dataclass(eq=False, repr=False)
class AddBlacklistRsp(betterproto.Message):
    target_friend_brief: "FriendBrief" = betterproto.message_field(9)
    retcode: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class AddFriendNotify(betterproto.Message):
    target_friend_brief: "FriendBrief" = betterproto.message_field(2)
    target_uid: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class AddNoGachaAvatarCardTransferItem(betterproto.Message):
    count: int = betterproto.uint32_field(5)
    is_new: bool = betterproto.bool_field(8)
    item_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class AddNoGachaAvatarCardNotify(betterproto.Message):
    reason: int = betterproto.uint32_field(9)
    unk3300_mgaphpolkke: int = betterproto.uint32_field(7)
    item_id: int = betterproto.uint32_field(2)
    avatar_id: int = betterproto.uint32_field(4)
    is_transfer_to_item: bool = betterproto.bool_field(14)
    unk3300_gpbinalmfdf: int = betterproto.uint32_field(8)
    transfer_item_list: List[
        "AddNoGachaAvatarCardTransferItem"
    ] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class AddQuestContentProgressReq(betterproto.Message):
    content_type: int = betterproto.uint32_field(1)
    add_progress: int = betterproto.uint32_field(6)
    param: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class AddQuestContentProgressRsp(betterproto.Message):
    content_type: int = betterproto.uint32_field(7)
    retcode: int = betterproto.int32_field(12)


@dataclass(eq=False, repr=False)
class AddRandTaskInfoNotify(betterproto.Message):
    rand_task_id: int = betterproto.uint32_field(7)
    pos: "Vector" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AddSeenMonsterNotify(betterproto.Message):
    monster_id_list: List[int] = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class AdjustTrackingInfo(betterproto.Message):
    unk3300_chcohlgbhlb: str = betterproto.string_field(2)
    unk3300_gamljpfkcgc: str = betterproto.string_field(9)
    unk3300_onnmbnodpia: str = betterproto.string_field(4)
    unk3300_mhdopamdmpl: str = betterproto.string_field(6)
    unk3300_inaieomciem: str = betterproto.string_field(7)
    unk3300_klkfliiofkk: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class AdjustWorldLevelReq(betterproto.Message):
    unk3300_dnlkimglblp: int = betterproto.uint32_field(14)
    unk3300_djbkbpdcbfh: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AdjustWorldLevelRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    after_world_level: int = betterproto.uint32_field(11)
    cd_over_time: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class AiSkillCdInfo(betterproto.Message):
    skill_group_cd_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    skill_cd_map: Dict[int, int] = betterproto.map_field(
        15, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class AiSnapshotEntitySkillCycle(betterproto.Message):
    unk3300_iioibleohek: bool = betterproto.bool_field(14)
    skill_id: int = betterproto.uint32_field(12)
    unk3300_abkfngidfmi: bool = betterproto.bool_field(7)
    unk3300_ifkdimdjbdh: bool = betterproto.bool_field(2)
    unk3300_egiilmjfebe: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class AiSnapshotEntityData(betterproto.Message):
    finished_skill_cycles: List[
        "AiSnapshotEntitySkillCycle"
    ] = betterproto.message_field(14)
    attack_target_id: int = betterproto.uint32_field(2)
    entity_id: int = betterproto.uint32_field(6)
    unk3300_albmemmjeja: float = betterproto.float_field(13)
    unk3300_iadjcdjoknd: int = betterproto.uint32_field(5)
    unk3300_fncidldkano: int = betterproto.uint32_field(7)
    unk3300_gpcfocifhcd: float = betterproto.float_field(15)
    unk3300_fmbbeihccjo: float = betterproto.float_field(12)
    unk3300_lijidjolleb: float = betterproto.float_field(11)
    unk3300_gnboajhmnjo: int = betterproto.uint32_field(9)
    hitting_avatars: Dict[int, int] = betterproto.map_field(
        4, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    unk3300_fikeaeplohj: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AiSnapshotInfo(betterproto.Message):
    ai_snapshots: List["AiSnapshotEntityData"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AiSyncInfo(betterproto.Message):
    entity_id: int = betterproto.uint32_field(2)
    unk3300_noipamjjidl: bool = betterproto.bool_field(4)
    unk3300_ebiccllgicg: bool = betterproto.bool_field(14)


@dataclass(eq=False, repr=False)
class AiThreatInfo(betterproto.Message):
    ai_threat_map: Dict[int, int] = betterproto.map_field(
        11, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class MainCoop(betterproto.Message):
    status: "MainCoopStatus" = betterproto.enum_field(6)
    unk3300_jfpledlnjpf: Dict[int, int] = betterproto.map_field(
        5, betterproto.TYPE_UINT32, betterproto.TYPE_INT32
    )
    unk3300_omeemfjfkbh: Dict[int, int] = betterproto.map_field(
        7, betterproto.TYPE_UINT32, betterproto.TYPE_INT32
    )
    self_confidence: int = betterproto.uint32_field(9)
    id: int = betterproto.uint32_field(1)
    save_point_id_list: List[int] = betterproto.uint32_field(10)
    seen_ending_map: Dict[int, int] = betterproto.map_field(
        13, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class AllCoopInfoNotify(betterproto.Message):
    main_coop_list: List["MainCoop"] = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class MapMarkPoint(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    name: str = betterproto.string_field(2)
    pos: "Vector" = betterproto.message_field(3)
    point_type: "MapMarkPointType" = betterproto.enum_field(4)
    monster_id: int = betterproto.uint32_field(5)
    from_type: "MapMarkFromType" = betterproto.enum_field(6)
    quest_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class AllMarkPointNotify(betterproto.Message):
    mark_list: List["MapMarkPoint"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AllSeenMonsterNotify(betterproto.Message):
    monster_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ShareCdInfo(betterproto.Message):
    cd_start_time: int = betterproto.uint64_field(1)
    share_cd_id: int = betterproto.uint32_field(12)
    index: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class AllShareCdDataNotify(betterproto.Message):
    share_cd_info_map: Dict[int, "ShareCdInfo"] = betterproto.map_field(
        13, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class AllWidgetBackgroundActiveStateNotify(betterproto.Message):
    background_active_widget_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AnchorPointData(betterproto.Message):
    scene_id: int = betterproto.uint32_field(3)
    rot: "Vector" = betterproto.message_field(4)
    end_time: int = betterproto.uint32_field(8)
    pos: "Vector" = betterproto.message_field(11)
    anchor_point_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class ClientCollectorData(betterproto.Message):
    unk3300_ppaojcgaaea: int = betterproto.uint32_field(2)
    unk3300_mfchjhpjald: int = betterproto.uint32_field(3)
    material_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class LunchBoxData(betterproto.Message):
    slot_material_map: Dict[int, int] = betterproto.map_field(
        4, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class OneoffGatherPointDetectorData(betterproto.Message):
    hint_radius: int = betterproto.uint32_field(4)
    config_id: int = betterproto.uint32_field(3)
    is_hint_valid: bool = betterproto.bool_field(11)
    hint_center_pos: "Vector" = betterproto.message_field(12)
    is_all_collected: bool = betterproto.bool_field(10)
    group_id: int = betterproto.uint32_field(1)
    material_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class SkyCrystalDetectorData(betterproto.Message):
    is_hint_valid: bool = betterproto.bool_field(1)
    group_id: int = betterproto.uint32_field(5)
    hint_center_pos: "Vector" = betterproto.message_field(12)
    config_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class WeatherWizardData(betterproto.Message):
    shield_value: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class WidgetCoolDownData(betterproto.Message):
    id: int = betterproto.uint32_field(2)
    is_success: bool = betterproto.bool_field(13)
    cool_down_time: int = betterproto.uint64_field(7)


@dataclass(eq=False, repr=False)
class WidgetSlotData(betterproto.Message):
    cd_over_time: int = betterproto.uint32_field(15)
    is_active: bool = betterproto.bool_field(3)
    material_id: int = betterproto.uint32_field(8)
    tag: "WidgetSlotTag" = betterproto.enum_field(11)


@dataclass(eq=False, repr=False)
class AllWidgetDataNotify(betterproto.Message):
    next_anchor_point_usable_time: int = betterproto.uint32_field(5)
    lunch_box_data: "LunchBoxData" = betterproto.message_field(1)
    oneoff_gather_point_detector_data_list: List[
        "OneoffGatherPointDetectorData"
    ] = betterproto.message_field(14)
    slot_list: List["WidgetSlotData"] = betterproto.message_field(6)
    background_active_widget_list: List[int] = betterproto.uint32_field(9)
    cool_down_group_data_list: List["WidgetCoolDownData"] = betterproto.message_field(3)
    sky_crystal_detector_data: "SkyCrystalDetectorData" = betterproto.message_field(4)
    client_collector_data_list: List["ClientCollectorData"] = betterproto.message_field(
        7
    )
    weather_wizard_data: "WeatherWizardData" = betterproto.message_field(15)
    normal_cool_down_data_list: List["WidgetCoolDownData"] = betterproto.message_field(
        10
    )
    anchor_point_list: List["AnchorPointData"] = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class AnchorPointDataNotify(betterproto.Message):
    next_usable_time: int = betterproto.uint32_field(1)
    anchor_point_list: List["AnchorPointData"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class AnchorPointOpReq(betterproto.Message):
    anchor_point_id: int = betterproto.uint32_field(4)
    anchor_point_op_type: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class AnchorPointOpRsp(betterproto.Message):
    anchor_point_id: int = betterproto.uint32_field(9)
    retcode: int = betterproto.int32_field(4)
    anchor_point_op_type: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class AnimatorForceSetAirMoveNotify(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(12)
    in_air_move: bool = betterproto.bool_field(6)
    entity_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AnnounceData(betterproto.Message):
    begin_time: int = betterproto.uint32_field(10)
    is_center_system_last_5_every_minutes: bool = betterproto.bool_field(3)
    end_time: int = betterproto.uint32_field(1)
    config_id: int = betterproto.uint32_field(2)
    center_system_text: str = betterproto.string_field(11)
    count_down_frequency: int = betterproto.uint32_field(5)
    center_system_frequency: int = betterproto.uint32_field(13)
    dungeon_confirm_text: str = betterproto.string_field(4)
    count_down_text: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class AntiAddictNotify(betterproto.Message):
    level: str = betterproto.string_field(4)
    msg: str = betterproto.string_field(7)
    msg_type: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class AranaraCollectionSuite(betterproto.Message):
    collection_id_state_map: Dict[
        int, "AranaraCollectionState"
    ] = betterproto.map_field(5, betterproto.TYPE_UINT32, betterproto.TYPE_ENUM)
    collection_type: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class AranaraCollectionDataNotify(betterproto.Message):
    collection_suite_list: List["AranaraCollectionSuite"] = betterproto.message_field(
        15
    )


@dataclass(eq=False, repr=False)
class AreaPlayInfoNotify(betterproto.Message):
    detail_play_type: int = betterproto.uint32_field(2)
    area_play_type: "AreaPlayType" = betterproto.enum_field(6)


@dataclass(eq=False, repr=False)
class ArenaChallengeChildChallengeInfo(betterproto.Message):
    challenge_id: int = betterproto.uint32_field(11)
    challenge_index: int = betterproto.uint32_field(4)
    challenge_type: int = betterproto.uint32_field(12)
    is_settled: bool = betterproto.bool_field(2)
    is_success: bool = betterproto.bool_field(14)


@dataclass(eq=False, repr=False)
class ArenaChallengeFinishNotify(betterproto.Message):
    is_success: bool = betterproto.bool_field(8)
    unk3300_fdfnflakong: int = betterproto.uint32_field(3)
    child_challenge_list: List[
        "ArenaChallengeChildChallengeInfo"
    ] = betterproto.message_field(14)
    unk3300_dbhaghmmlai: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class AskAddFriendNotify(betterproto.Message):
    target_uid: int = betterproto.uint32_field(5)
    target_friend_brief: "FriendBrief" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AskAddFriendReq(betterproto.Message):
    target_uid: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class AskAddFriendRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(11)
    target_uid: int = betterproto.uint32_field(9)
    param: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class AssociateInferenceWordReq(betterproto.Message):
    page_id: int = betterproto.uint32_field(6)
    unk3300_epmghelecnh: int = betterproto.uint32_field(2)
    unk3300_fdglbljokok: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class AssociateInferenceWordRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(4)
    unk3300_fdglbljokok: int = betterproto.uint32_field(8)
    unk3300_epmghelecnh: int = betterproto.uint32_field(9)
    page_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class AsterLargeInfoNotify(betterproto.Message):
    info: "AsterLargeDetailInfo" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class AsterLittleInfoNotify(betterproto.Message):
    info: "AsterLittleDetailInfo" = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class AsterMidCampInfoNotify(betterproto.Message):
    camp_list: List["AsterMidCampInfo"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class AsterMidInfoNotify(betterproto.Message):
    info: "AsterMidDetailInfo" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class AsterMiscInfoNotify(betterproto.Message):
    unk3300_dchbfejnbhp: int = betterproto.uint32_field(4)
    unk3300_kfdgffpjgjc: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class AsterProgressInfoNotify(betterproto.Message):
    info: "AsterProgressDetailInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AttackHitEffectResult(betterproto.Message):
    unk3300_dabgdglaikl: float = betterproto.float_field(13)
    unk3300_jdefhmkicpf: float = betterproto.float_field(10)
    unk3300_echofblgiio: float = betterproto.float_field(9)
    unk3300_lckecjckkjk: int = betterproto.uint32_field(8)
    unk3300_klngdammfif: int = betterproto.uint32_field(1)
    unk3300_mngcoaiggal: float = betterproto.float_field(3)


@dataclass(eq=False, repr=False)
class HitCollision(betterproto.Message):
    hit_box_index: int = betterproto.int32_field(8)
    hit_collider_type: "HitColliderType" = betterproto.enum_field(5)
    unk3300_lnhiolfmgcn: float = betterproto.float_field(7)
    hit_dir: "Vector" = betterproto.message_field(3)
    hit_point: "Vector" = betterproto.message_field(14)
    unk3300_ojhbmliapjn: float = betterproto.float_field(10)


@dataclass(eq=False, repr=False)
class AttackResult(betterproto.Message):
    unk3300_cjfkcncgjlb: int = betterproto.uint32_field(2)
    attacker_id: int = betterproto.uint32_field(1)
    unk3300_ggabjnlleaj: int = betterproto.uint32_field(1870)
    unk3300_hgjokfphmjj: float = betterproto.float_field(803)
    unk3300_domaopgphmd: bool = betterproto.bool_field(454)
    element_type: int = betterproto.uint32_field(12)
    unk3300_balcphmfibc: int = betterproto.uint32_field(1438)
    damage: float = betterproto.float_field(10)
    unk3300_heimdhbpfnf: int = betterproto.uint32_field(1115)
    unk3300_hnkliodejab: int = betterproto.uint32_field(645)
    unk3300_abjjnnnkgbb: int = betterproto.uint32_field(1742)
    unk3300_kpkaecbfabp: int = betterproto.uint32_field(2012)
    hit_eff_result: "AttackHitEffectResult" = betterproto.message_field(8)
    unk3300_eigmfdmkade: int = betterproto.uint32_field(14)
    ability_identifier: "AbilityIdentifier" = betterproto.message_field(7)
    unk3300_ipphjmmelig: int = betterproto.uint32_field(3)
    unk3300_ebcnaajaonf: int = betterproto.uint32_field(1782)
    unk3300_meffadephbm: float = betterproto.float_field(1932)
    unk3300_pigbelicmmd: int = betterproto.uint32_field(1484)
    unk3300_pjpcbiacfjk: bool = betterproto.bool_field(633)
    hit_retreat_angle_compat: int = betterproto.int32_field(5)
    hit_collision: "HitCollision" = betterproto.message_field(15)
    unk3300_mgimjgmipld: bool = betterproto.bool_field(732)
    unk3300_gbkcgdpajie: bool = betterproto.bool_field(6)
    resolved_dir: "Vector" = betterproto.message_field(11)
    unk3300_mpkamimdkoe: float = betterproto.float_field(28)
    anim_event_id: str = betterproto.string_field(4)
    unk3300_gbpjceljkja: int = betterproto.uint32_field(1844)
    unk3300_jmjhgjcaobh: int = betterproto.uint32_field(914)
    unk3300_fjjlkjbobac: float = betterproto.float_field(775)


@dataclass(eq=False, repr=False)
class AttackResultCreateCount(betterproto.Message):
    unk3300_pffffjbpkgn: List[int] = betterproto.uint32_field(8)
    unk3300_mdgfbfbahpb: List[int] = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class EntityClientExtraInfo(betterproto.Message):
    skill_anchor_position: "Vector" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class EntityRendererChangedInfo(betterproto.Message):
    changed_renderers: Dict[str, int] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_UINT32
    )
    visibility_count: int = betterproto.uint32_field(2)
    is_cached: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class ServantInfo(betterproto.Message):
    master_entity_id: int = betterproto.uint32_field(1)
    born_slot_index: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SceneEntityAiInfo(betterproto.Message):
    is_ai_open: bool = betterproto.bool_field(1)
    born_pos: "Vector" = betterproto.message_field(2)
    skill_cd_map: Dict[int, int] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    servant_info: "ServantInfo" = betterproto.message_field(4)
    ai_threat_map: Dict[int, int] = betterproto.map_field(
        5, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    skill_group_cd_map: Dict[int, int] = betterproto.map_field(
        6, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    cur_tactic: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class EntityAuthorityInfo(betterproto.Message):
    ability_info: "AbilitySyncStateInfo" = betterproto.message_field(1)
    renderer_changed_info: "EntityRendererChangedInfo" = betterproto.message_field(2)
    ai_info: "SceneEntityAiInfo" = betterproto.message_field(3)
    born_pos: "Vector" = betterproto.message_field(4)
    pose_para_list: List["AnimatorParameterValueInfoPair"] = betterproto.message_field(
        5
    )
    client_extra_info: "EntityClientExtraInfo" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class AuthorityChange(betterproto.Message):
    entity_id: int = betterproto.uint32_field(8)
    entity_authority_info: "EntityAuthorityInfo" = betterproto.message_field(1)
    authority_peer_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AvatarEquipAffixInfo(betterproto.Message):
    equip_affix_id: int = betterproto.uint32_field(1)
    left_cd_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AvatarExcelInfo(betterproto.Message):
    prefab_path_hash: int = betterproto.uint64_field(1)
    prefab_path_remote_hash: int = betterproto.uint64_field(2)
    controller_path_hash: int = betterproto.uint64_field(3)
    controller_path_remote_hash: int = betterproto.uint64_field(4)
    combat_config_hash: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class FetterData(betterproto.Message):
    fetter_id: int = betterproto.uint32_field(1)
    fetter_state: int = betterproto.uint32_field(2)
    cond_index_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AvatarFetterInfo(betterproto.Message):
    exp_number: int = betterproto.uint32_field(1)
    exp_level: int = betterproto.uint32_field(2)
    open_id_list: List[int] = betterproto.uint32_field(3)
    finish_id_list: List[int] = betterproto.uint32_field(4)
    rewarded_fetter_level_list: List[int] = betterproto.uint32_field(5)
    fetter_list: List["FetterData"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class AvatarSkillInfo(betterproto.Message):
    pass_cd_time: int = betterproto.uint32_field(1)
    full_cd_time_list: List[int] = betterproto.uint32_field(2)
    max_charge_count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PropValue(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    val: int = betterproto.int64_field(4)
    ival: int = betterproto.int64_field(2, group="value")
    fval: float = betterproto.float_field(3, group="value")


@dataclass(eq=False, repr=False)
class Reliquary(betterproto.Message):
    level: int = betterproto.uint32_field(1)
    exp: int = betterproto.uint32_field(2)
    promote_level: int = betterproto.uint32_field(3)
    main_prop_id: int = betterproto.uint32_field(4)
    append_prop_id_list: List[int] = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class Weapon(betterproto.Message):
    level: int = betterproto.uint32_field(1)
    exp: int = betterproto.uint32_field(2)
    promote_level: int = betterproto.uint32_field(3)
    affix_map: Dict[int, int] = betterproto.map_field(
        4, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class Equip(betterproto.Message):
    is_locked: bool = betterproto.bool_field(3)
    reliquary: "Reliquary" = betterproto.message_field(1, group="detail")
    weapon: "Weapon" = betterproto.message_field(2, group="detail")


@dataclass(eq=False, repr=False)
class Furniture(betterproto.Message):
    count: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MaterialDeleteInfo(betterproto.Message):
    has_delete_config: bool = betterproto.bool_field(1)
    count_down_delete: "MaterialDeleteInfoCountDownDelete" = betterproto.message_field(
        2, group="delete_info"
    )
    date_delete: "MaterialDeleteInfoDateTimeDelete" = betterproto.message_field(
        3, group="delete_info"
    )
    delay_week_count_down_delete: "MaterialDeleteInfoDelayWeekCountDownDelete" = (
        betterproto.message_field(4, group="delete_info")
    )


@dataclass(eq=False, repr=False)
class MaterialDeleteInfoCountDownDelete(betterproto.Message):
    delete_time_num_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    config_count_down_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MaterialDeleteInfoDateTimeDelete(betterproto.Message):
    delete_time: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MaterialDeleteInfoDelayWeekCountDownDelete(betterproto.Message):
    delete_time_num_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    config_delay_week: int = betterproto.uint32_field(2)
    config_count_down_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class Material(betterproto.Message):
    count: int = betterproto.uint32_field(1)
    delete_info: "MaterialDeleteInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class Item(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    guid: int = betterproto.uint64_field(2)
    material: "Material" = betterproto.message_field(5, group="detail")
    equip: "Equip" = betterproto.message_field(6, group="detail")
    furniture: "Furniture" = betterproto.message_field(7, group="detail")


@dataclass(eq=False, repr=False)
class TrialAvatarGrantRecord(betterproto.Message):
    grant_reason: int = betterproto.uint32_field(1)
    from_parent_quest_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TrialAvatarInfo(betterproto.Message):
    trial_avatar_id: int = betterproto.uint32_field(1)
    trial_equip_list: List["Item"] = betterproto.message_field(2)
    grant_record: "TrialAvatarGrantRecord" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class AvatarInfo(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(1)
    guid: int = betterproto.uint64_field(2)
    prop_map: Dict[int, "PropValue"] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    life_state: int = betterproto.uint32_field(4)
    equip_guid_list: List[int] = betterproto.uint64_field(5)
    talent_id_list: List[int] = betterproto.uint32_field(6)
    fight_prop_map: Dict[int, float] = betterproto.map_field(
        7, betterproto.TYPE_UINT32, betterproto.TYPE_FLOAT
    )
    trial_avatar_info: "TrialAvatarInfo" = betterproto.message_field(9)
    skill_map: Dict[int, "AvatarSkillInfo"] = betterproto.map_field(
        10, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    skill_depot_id: int = betterproto.uint32_field(11)
    fetter_info: "AvatarFetterInfo" = betterproto.message_field(12)
    core_proud_skill_level: int = betterproto.uint32_field(13)
    inherent_proud_skill_list: List[int] = betterproto.uint32_field(14)
    skill_level_map: Dict[int, int] = betterproto.map_field(
        15, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    expedition_state: "AvatarExpeditionState" = betterproto.enum_field(16)
    proud_skill_extra_level_map: Dict[int, int] = betterproto.map_field(
        17, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    is_focus: bool = betterproto.bool_field(18)
    avatar_type: int = betterproto.uint32_field(19)
    team_resonance_list: List[int] = betterproto.uint32_field(20)
    wearing_flycloak_id: int = betterproto.uint32_field(21)
    equip_affix_list: List["AvatarEquipAffixInfo"] = betterproto.message_field(22)
    born_time: int = betterproto.uint32_field(23)
    pending_promote_reward_list: List[int] = betterproto.uint32_field(24)
    costume_id: int = betterproto.uint32_field(25)
    excel_info: "AvatarExcelInfo" = betterproto.message_field(26)
    anim_hash: int = betterproto.uint32_field(27)


@dataclass(eq=False, repr=False)
class AvatarAddNotify(betterproto.Message):
    avatar: "AvatarInfo" = betterproto.message_field(1)
    is_in_team: bool = betterproto.bool_field(15)


@dataclass(eq=False, repr=False)
class AvatarBuffAddNotify(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(11)
    buff_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class AvatarBuffDelNotify(betterproto.Message):
    buff_id: int = betterproto.uint32_field(8)
    avatar_guid: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class AvatarCardChangeReq(betterproto.Message):
    count: int = betterproto.uint32_field(11)
    item_id: int = betterproto.uint32_field(4)
    avatar_guid: int = betterproto.uint64_field(14)


@dataclass(eq=False, repr=False)
class AvatarCardChangeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class AvatarChangeAnimHashReq(betterproto.Message):
    anim_hash: int = betterproto.uint32_field(11)
    avatar_guid: int = betterproto.uint64_field(12)


@dataclass(eq=False, repr=False)
class AvatarChangeAnimHashRsp(betterproto.Message):
    anim_hash: int = betterproto.uint32_field(3)
    retcode: int = betterproto.int32_field(1)
    avatar_guid: int = betterproto.uint64_field(8)


@dataclass(eq=False, repr=False)
class EntityClientData(betterproto.Message):
    wind_change_scene_time: int = betterproto.uint32_field(1)
    windmill_sync_angle: float = betterproto.float_field(2)
    wind_change_target_level: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class EntityEnvironmentInfo(betterproto.Message):
    json_climate_type: int = betterproto.uint32_field(1)
    climate_area_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class FightPropPair(betterproto.Message):
    prop_type: int = betterproto.uint32_field(1)
    prop_value: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class MotionInfo(betterproto.Message):
    pos: "Vector" = betterproto.message_field(1)
    rot: "Vector" = betterproto.message_field(2)
    speed: "Vector" = betterproto.message_field(3)
    state: "MotionState" = betterproto.enum_field(4)
    params: List["Vector"] = betterproto.message_field(5)
    ref_pos: "Vector" = betterproto.message_field(6)
    ref_id: int = betterproto.uint32_field(7)
    scene_time: int = betterproto.uint32_field(8)
    interval_velocity: int = betterproto.uint64_field(9)


@dataclass(eq=False, repr=False)
class PropPair(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    prop_value: "PropValue" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CurVehicleInfo(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    pos: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SceneReliquaryInfo(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    guid: int = betterproto.uint64_field(2)
    level: int = betterproto.uint32_field(3)
    promote_level: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class SceneWeaponInfo(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    gadget_id: int = betterproto.uint32_field(2)
    item_id: int = betterproto.uint32_field(3)
    guid: int = betterproto.uint64_field(4)
    level: int = betterproto.uint32_field(5)
    promote_level: int = betterproto.uint32_field(6)
    ability_info: "AbilitySyncStateInfo" = betterproto.message_field(7)
    affix_map: Dict[int, int] = betterproto.map_field(
        8, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    renderer_changed_info: "EntityRendererChangedInfo" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class ServerBuff(betterproto.Message):
    server_buff_uid: int = betterproto.uint32_field(1)
    server_buff_id: int = betterproto.uint32_field(2)
    server_buff_type: int = betterproto.uint32_field(3)
    instanced_modifier_id: int = betterproto.uint32_field(4)
    is_modifier_added: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class SceneAvatarInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    avatar_id: int = betterproto.uint32_field(2)
    guid: int = betterproto.uint64_field(3)
    peer_id: int = betterproto.uint32_field(4)
    equip_id_list: List[int] = betterproto.uint32_field(5)
    skill_depot_id: int = betterproto.uint32_field(6)
    talent_id_list: List[int] = betterproto.uint32_field(7)
    weapon: "SceneWeaponInfo" = betterproto.message_field(8)
    reliquary_list: List["SceneReliquaryInfo"] = betterproto.message_field(9)
    core_proud_skill_level: int = betterproto.uint32_field(11)
    inherent_proud_skill_list: List[int] = betterproto.uint32_field(12)
    skill_level_map: Dict[int, int] = betterproto.map_field(
        13, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    proud_skill_extra_level_map: Dict[int, int] = betterproto.map_field(
        14, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    server_buff_list: List["ServerBuff"] = betterproto.message_field(15)
    team_resonance_list: List[int] = betterproto.uint32_field(16)
    wearing_flycloak_id: int = betterproto.uint32_field(17)
    born_time: int = betterproto.uint32_field(18)
    costume_id: int = betterproto.uint32_field(19)
    cur_vehicle_info: "CurVehicleInfo" = betterproto.message_field(20)
    excel_info: "AvatarExcelInfo" = betterproto.message_field(21)
    anim_hash: int = betterproto.uint32_field(22)


@dataclass(eq=False, repr=False)
class BlossomChestInfo(betterproto.Message):
    resin: int = betterproto.uint32_field(1)
    qualify_uid_list: List[int] = betterproto.uint32_field(2)
    remain_uid_list: List[int] = betterproto.uint32_field(3)
    dead_time: int = betterproto.uint32_field(4)
    blossom_refresh_type: int = betterproto.uint32_field(5)
    refresh_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class WeeklyBossResinDiscountInfo(betterproto.Message):
    discount_num: int = betterproto.uint32_field(1)
    discount_num_limit: int = betterproto.uint32_field(2)
    resin_cost: int = betterproto.uint32_field(3)
    original_resin_cost: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class BossChestInfo(betterproto.Message):
    monster_config_id: int = betterproto.uint32_field(1)
    resin: int = betterproto.uint32_field(2)
    remain_uid_list: List[int] = betterproto.uint32_field(3)
    qualify_uid_list: List[int] = betterproto.uint32_field(4)
    uid_discount_map: Dict[int, "WeeklyBossResinDiscountInfo"] = betterproto.map_field(
        5, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class ClientGadgetInfo(betterproto.Message):
    camp_id: int = betterproto.uint32_field(1)
    camp_type: int = betterproto.uint32_field(2)
    guid: int = betterproto.uint64_field(3)
    owner_entity_id: int = betterproto.uint32_field(4)
    target_entity_id: int = betterproto.uint32_field(5)
    async_load: bool = betterproto.bool_field(6)
    is_peer_id_from_player: bool = betterproto.bool_field(7)
    target_entity_id_list: List[int] = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class CoinCollectOperatorInfo(betterproto.Message):
    level_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CustomCommonNodeInfo(betterproto.Message):
    parent_index: int = betterproto.int32_field(1)
    config_id: int = betterproto.uint32_field(2)
    slot_identifier: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CustomGadgetTreeInfo(betterproto.Message):
    node_list: List["CustomCommonNodeInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DeshretObeliskGadgetInfo(betterproto.Message):
    argument_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class EchoShellInfo(betterproto.Message):
    shell_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class FishPoolInfo(betterproto.Message):
    pool_id: int = betterproto.uint32_field(1)
    fish_area_list: List[int] = betterproto.uint32_field(2)
    today_fish_num: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class FoundationInfo(betterproto.Message):
    status: "FoundationStatus" = betterproto.enum_field(1)
    uid_list: List[int] = betterproto.uint32_field(2)
    current_building_id: int = betterproto.uint32_field(3)
    locked_by_uid: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class GadgetGeneralRewardInfo(betterproto.Message):
    resin: int = betterproto.uint32_field(1)
    dead_time: int = betterproto.uint32_field(2)
    remain_uid_list: List[int] = betterproto.uint32_field(3)
    qualify_uid_list: List[int] = betterproto.uint32_field(4)
    item_param: "ItemParam" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class GadgetCrucibleInfo(betterproto.Message):
    mp_play_id: int = betterproto.uint32_field(1)
    prepare_end_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GadgetPlayInfo(betterproto.Message):
    play_type: int = betterproto.uint32_field(1)
    duration: int = betterproto.uint32_field(2)
    progress_stage_list: List[int] = betterproto.uint32_field(3)
    start_cd: int = betterproto.uint32_field(4)
    start_time: int = betterproto.uint32_field(5)
    progress: int = betterproto.uint32_field(6)
    crucible_info: "GadgetCrucibleInfo" = betterproto.message_field(
        21, group="play_info"
    )


@dataclass(eq=False, repr=False)
class GatherGadgetInfo(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    is_forbid_guest: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class MpPlayRewardInfo(betterproto.Message):
    resin: int = betterproto.uint32_field(1)
    remain_uid_list: List[int] = betterproto.uint32_field(2)
    qualify_uid_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class NightCrowGadgetInfo(betterproto.Message):
    argument_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class OfferingInfo(betterproto.Message):
    offering_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MathQuaternion(betterproto.Message):
    x: float = betterproto.float_field(1)
    y: float = betterproto.float_field(2)
    z: float = betterproto.float_field(3)
    w: float = betterproto.float_field(4)


@dataclass(eq=False, repr=False)
class RoutePoint(betterproto.Message):
    position: "Vector" = betterproto.message_field(1)
    arrive_range: float = betterproto.float_field(2)
    has_reach_event: bool = betterproto.bool_field(3)
    velocity: float = betterproto.float_field(11, group="move_params")
    time: float = betterproto.float_field(12, group="move_params")
    rotation: "Vector" = betterproto.message_field(21, group="rotate_params")
    rotation_speed: "MathQuaternion" = betterproto.message_field(
        22, group="rotate_params"
    )
    axis_speed: "MathQuaternion" = betterproto.message_field(23, group="rotate_params")


@dataclass(eq=False, repr=False)
class Route(betterproto.Message):
    route_points: List["RoutePoint"] = betterproto.message_field(1)
    route_type: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PlatformInfo(betterproto.Message):
    route_id: int = betterproto.uint32_field(1)
    start_index: int = betterproto.int32_field(2)
    start_route_time: int = betterproto.uint32_field(3)
    start_scene_time: int = betterproto.uint32_field(4)
    start_pos: "Vector" = betterproto.message_field(7)
    is_started: bool = betterproto.bool_field(8)
    start_rot: "MathQuaternion" = betterproto.message_field(9)
    stop_scene_time: int = betterproto.uint32_field(10)
    pos_offset: "Vector" = betterproto.message_field(11)
    rot_offset: "MathQuaternion" = betterproto.message_field(12)
    moving_platform_type: "MovingPlatformType" = betterproto.enum_field(13)
    is_active: bool = betterproto.bool_field(14)
    route: "Route" = betterproto.message_field(15)
    point_id: int = betterproto.uint32_field(16)


@dataclass(eq=False, repr=False)
class RoguelikeGadgetInfo(betterproto.Message):
    cell_config_id: int = betterproto.uint32_field(1)
    cell_type: int = betterproto.uint32_field(2)
    cell_state: int = betterproto.uint32_field(3)
    cell_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ScreenInfo(betterproto.Message):
    live_id: int = betterproto.uint32_field(1)
    projector_entity_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class StatueGadgetInfo(betterproto.Message):
    opened_statue_uid_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class VehicleMember(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    avatar_guid: int = betterproto.uint64_field(2)
    pos: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class VehicleInfo(betterproto.Message):
    member_list: List["VehicleMember"] = betterproto.message_field(1)
    owner_uid: int = betterproto.uint32_field(2)
    cur_stamina: float = betterproto.float_field(3)


@dataclass(eq=False, repr=False)
class WeatherInfo(betterproto.Message):
    weather_area_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class WorktopInfo(betterproto.Message):
    option_list: List[int] = betterproto.uint32_field(1)
    is_guest_can_operate: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class SceneGadgetInfo(betterproto.Message):
    gadget_id: int = betterproto.uint32_field(1)
    group_id: int = betterproto.uint32_field(2)
    config_id: int = betterproto.uint32_field(3)
    owner_entity_id: int = betterproto.uint32_field(4)
    born_type: "GadgetBornType" = betterproto.enum_field(5)
    gadget_state: int = betterproto.uint32_field(6)
    gadget_type: int = betterproto.uint32_field(7)
    is_show_cutscene: bool = betterproto.bool_field(8)
    authority_peer_id: int = betterproto.uint32_field(9)
    is_enable_interact: bool = betterproto.bool_field(10)
    interact_id: int = betterproto.uint32_field(11)
    mark_flag: int = betterproto.uint32_field(21)
    prop_owner_entity_id: int = betterproto.uint32_field(22)
    platform: "PlatformInfo" = betterproto.message_field(23)
    interact_uid_list: List[int] = betterproto.uint32_field(24)
    draft_id: int = betterproto.uint32_field(25)
    gadget_talk_state: int = betterproto.uint32_field(26)
    play_info: "GadgetPlayInfo" = betterproto.message_field(100)
    trifle_item: "Item" = betterproto.message_field(12, group="content")
    gather_gadget: "GatherGadgetInfo" = betterproto.message_field(13, group="content")
    worktop: "WorktopInfo" = betterproto.message_field(14, group="content")
    client_gadget: "ClientGadgetInfo" = betterproto.message_field(15, group="content")
    weather: "WeatherInfo" = betterproto.message_field(17, group="content")
    ability_gadget: "AbilityGadgetInfo" = betterproto.message_field(18, group="content")
    statue_gadget: "StatueGadgetInfo" = betterproto.message_field(19, group="content")
    boss_chest: "BossChestInfo" = betterproto.message_field(20, group="content")
    blossom_chest: "BlossomChestInfo" = betterproto.message_field(41, group="content")
    mp_play_reward: "MpPlayRewardInfo" = betterproto.message_field(42, group="content")
    general_reward: "GadgetGeneralRewardInfo" = betterproto.message_field(
        43, group="content"
    )
    offering_info: "OfferingInfo" = betterproto.message_field(44, group="content")
    foundation_info: "FoundationInfo" = betterproto.message_field(45, group="content")
    vehicle_info: "VehicleInfo" = betterproto.message_field(46, group="content")
    shell_info: "EchoShellInfo" = betterproto.message_field(47, group="content")
    screen_info: "ScreenInfo" = betterproto.message_field(48, group="content")
    fish_pool_info: "FishPoolInfo" = betterproto.message_field(59, group="content")
    custom_gadget_tree_info: "CustomGadgetTreeInfo" = betterproto.message_field(
        60, group="content"
    )
    roguelike_gadget_info: "RoguelikeGadgetInfo" = betterproto.message_field(
        61, group="content"
    )
    night_crow_gadget_info: "NightCrowGadgetInfo" = betterproto.message_field(
        62, group="content"
    )
    deshret_obelisk_gadget_info: "DeshretObeliskGadgetInfo" = betterproto.message_field(
        63, group="content"
    )
    coin_collect_operator_info: "CoinCollectOperatorInfo" = betterproto.message_field(
        64, group="content"
    )


@dataclass(eq=False, repr=False)
class FishtankFishInfo(betterproto.Message):
    fish_distance_from_water: float = betterproto.float_field(1)
    fish_scale: float = betterproto.float_field(2)
    initial_rotation_y: float = betterproto.float_field(3)


@dataclass(eq=False, repr=False)
class MonsterRoute(betterproto.Message):
    route_points: List["RoutePoint"] = betterproto.message_field(1)
    speed_level: int = betterproto.uint32_field(2)
    route_type: int = betterproto.uint32_field(3)
    arrive_range: float = betterproto.float_field(4)


@dataclass(eq=False, repr=False)
class SceneFishInfo(betterproto.Message):
    fish_id: int = betterproto.uint32_field(1)
    fish_pool_entity_id: int = betterproto.uint32_field(2)
    fish_pool_pos: "Vector" = betterproto.message_field(3)
    fish_pool_gadget_id: int = betterproto.uint32_field(4)
    last_shock_time: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class SceneMonsterInfo(betterproto.Message):
    monster_id: int = betterproto.uint32_field(1)
    group_id: int = betterproto.uint32_field(2)
    config_id: int = betterproto.uint32_field(3)
    weapon_list: List["SceneWeaponInfo"] = betterproto.message_field(4)
    authority_peer_id: int = betterproto.uint32_field(5)
    affix_list: List[int] = betterproto.uint32_field(6)
    is_elite: bool = betterproto.bool_field(7)
    owner_entity_id: int = betterproto.uint32_field(8)
    summoned_tag: int = betterproto.uint32_field(9)
    summon_tag_map: Dict[int, int] = betterproto.map_field(
        10, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    pose_id: int = betterproto.uint32_field(11)
    born_type: "MonsterBornType" = betterproto.enum_field(12)
    block_id: int = betterproto.uint32_field(13)
    mark_flag: int = betterproto.uint32_field(14)
    title_id: int = betterproto.uint32_field(15)
    special_name_id: int = betterproto.uint32_field(16)
    attack_target_id: int = betterproto.uint32_field(17)
    monster_route: "MonsterRoute" = betterproto.message_field(18)
    ai_config_id: int = betterproto.uint32_field(19)
    level_route_id: int = betterproto.uint32_field(20)
    init_pose_id: int = betterproto.uint32_field(21)
    is_light: bool = betterproto.bool_field(22)
    kill_num: int = betterproto.uint32_field(23)
    fish_info: "SceneFishInfo" = betterproto.message_field(50, group="content")
    fishtank_fish_info: "FishtankFishInfo" = betterproto.message_field(
        51, group="content"
    )


@dataclass(eq=False, repr=False)
class SceneNpcInfo(betterproto.Message):
    npc_id: int = betterproto.uint32_field(1)
    room_id: int = betterproto.uint32_field(2)
    parent_quest_id: int = betterproto.uint32_field(3)
    block_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class SceneEntityInfo(betterproto.Message):
    entity_type: "ProtEntityType" = betterproto.enum_field(1)
    entity_id: int = betterproto.uint32_field(2)
    name: str = betterproto.string_field(3)
    motion_info: "MotionInfo" = betterproto.message_field(4)
    prop_list: List["PropPair"] = betterproto.message_field(5)
    fight_prop_list: List["FightPropPair"] = betterproto.message_field(6)
    life_state: int = betterproto.uint32_field(7)
    animator_para_list: List[
        "AnimatorParameterValueInfoPair"
    ] = betterproto.message_field(9)
    last_move_scene_time_ms: int = betterproto.uint32_field(17)
    last_move_reliable_seq: int = betterproto.uint32_field(18)
    entity_client_data: "EntityClientData" = betterproto.message_field(19)
    entity_environment_info_list: List[
        "EntityEnvironmentInfo"
    ] = betterproto.message_field(20)
    entity_authority_info: "EntityAuthorityInfo" = betterproto.message_field(21)
    tag_list: List[str] = betterproto.string_field(22)
    server_buff_list: List["ServerBuff"] = betterproto.message_field(23)
    avatar: "SceneAvatarInfo" = betterproto.message_field(10, group="entity")
    monster: "SceneMonsterInfo" = betterproto.message_field(11, group="entity")
    npc: "SceneNpcInfo" = betterproto.message_field(12, group="entity")
    gadget: "SceneGadgetInfo" = betterproto.message_field(13, group="entity")


@dataclass(eq=False, repr=False)
class AvatarChangeCostumeNotify(betterproto.Message):
    entity_info: "SceneEntityInfo" = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class AvatarChangeCostumeReq(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(6)
    costume_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AvatarChangeCostumeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(10)
    avatar_guid: int = betterproto.uint64_field(9)
    costume_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AvatarChangeElementTypeReq(betterproto.Message):
    area_id: int = betterproto.uint32_field(12)
    scene_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AvatarChangeElementTypeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(9)


@dataclass(eq=False, repr=False)
class AvatarRenameInfo(betterproto.Message):
    avatar_name: str = betterproto.string_field(3)
    avatar_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class AvatarTeam(betterproto.Message):
    avatar_guid_list: List[int] = betterproto.uint64_field(13)
    team_name: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class AvatarDataNotify(betterproto.Message):
    avatar_list: List["AvatarInfo"] = betterproto.message_field(14)
    avatar_rename_list: List["AvatarRenameInfo"] = betterproto.message_field(8)
    cur_avatar_team_id: int = betterproto.uint32_field(7)
    owned_flycloak_list: List[int] = betterproto.uint32_field(6)
    temp_avatar_guid_list: List[int] = betterproto.uint64_field(15)
    choose_avatar_guid: int = betterproto.uint64_field(1)
    avatar_team_map: Dict[int, "AvatarTeam"] = betterproto.map_field(
        11, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    owned_costume_list: List[int] = betterproto.uint32_field(5)
    backup_avatar_team_order_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AvatarDelNotify(betterproto.Message):
    avatar_guid_list: List[int] = betterproto.uint64_field(6)


@dataclass(eq=False, repr=False)
class AvatarDieAnimationEndReq(betterproto.Message):
    die_guid: int = betterproto.uint64_field(13)
    reborn_pos: "Vector" = betterproto.message_field(14)
    skill_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class AvatarDieAnimationEndRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(12)
    skill_id: int = betterproto.uint32_field(10)
    die_guid: int = betterproto.uint64_field(7)


@dataclass(eq=False, repr=False)
class AvatarEnterElementViewNotify(betterproto.Message):
    is_triggered: bool = betterproto.bool_field(6)
    avatar_entity_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class AvatarEnterSceneInfo(betterproto.Message):
    weapon_entity_id: int = betterproto.uint32_field(5)
    avatar_guid: int = betterproto.uint64_field(9)
    avatar_entity_id: int = betterproto.uint32_field(13)
    server_buff_list: List["ServerBuff"] = betterproto.message_field(7)
    unk3300_emagokcppkn: "AbilitySyncStateInfo" = betterproto.message_field(6)
    buff_id_list: List[int] = betterproto.uint32_field(8)
    unk3300_fcddpfadnai: "AbilitySyncStateInfo" = betterproto.message_field(1)
    weapon_guid: int = betterproto.uint64_field(15)


@dataclass(eq=False, repr=False)
class AvatarEquipAffixStartNotify(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    equip_affix_info: "AvatarEquipAffixInfo" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class AvatarEquipChangeNotify(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(7)
    equip_type: int = betterproto.uint32_field(10)
    equip_guid: int = betterproto.uint64_field(5)
    item_id: int = betterproto.uint32_field(3)
    reliquary: "SceneReliquaryInfo" = betterproto.message_field(4)
    weapon: "SceneWeaponInfo" = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class AvatarExpeditionAllDataReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class AvatarExpeditionInfo(betterproto.Message):
    state: "AvatarExpeditionState" = betterproto.enum_field(1)
    exp_id: int = betterproto.uint32_field(2)
    hour_time: int = betterproto.uint32_field(3)
    start_time: int = betterproto.uint32_field(4)
    shorten_ratio: float = betterproto.float_field(5)


@dataclass(eq=False, repr=False)
class AvatarExpeditionAllDataRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)
    open_expedition_list: List[int] = betterproto.uint32_field(4)
    expedition_info_map: Dict[int, "AvatarExpeditionInfo"] = betterproto.map_field(
        1, betterproto.TYPE_UINT64, betterproto.TYPE_MESSAGE
    )
    expedition_count_limit: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class AvatarExpeditionCallBackReq(betterproto.Message):
    avatar_guid: List[int] = betterproto.uint64_field(14)


@dataclass(eq=False, repr=False)
class AvatarExpeditionCallBackRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(2)
    expedition_info_map: Dict[int, "AvatarExpeditionInfo"] = betterproto.map_field(
        7, betterproto.TYPE_UINT64, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class AvatarExpeditionDataNotify(betterproto.Message):
    expedition_info_map: Dict[int, "AvatarExpeditionInfo"] = betterproto.map_field(
        15, betterproto.TYPE_UINT64, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class AvatarExpeditionGetRewardReq(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class AvatarExpeditionGetRewardRsp(betterproto.Message):
    item_list: List["ItemParam"] = betterproto.message_field(7)
    extra_item_list: List["ItemParam"] = betterproto.message_field(11)
    expedition_info_map: Dict[int, "AvatarExpeditionInfo"] = betterproto.map_field(
        13, betterproto.TYPE_UINT64, betterproto.TYPE_MESSAGE
    )
    retcode: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class AvatarExpeditionStartReq(betterproto.Message):
    hour_time: int = betterproto.uint32_field(7)
    avatar_guid: int = betterproto.uint64_field(3)
    exp_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AvatarExpeditionStartRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(4)
    expedition_info_map: Dict[int, "AvatarExpeditionInfo"] = betterproto.map_field(
        8, betterproto.TYPE_UINT64, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class AvatarFetterDataNotify(betterproto.Message):
    fetter_info_map: Dict[int, "AvatarFetterInfo"] = betterproto.map_field(
        2, betterproto.TYPE_UINT64, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class AvatarFetterLevelRewardReq(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(2)
    fetter_level: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class AvatarFetterLevelRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(2)
    reward_id: int = betterproto.uint32_field(15)
    fetter_level: int = betterproto.uint32_field(1)
    avatar_guid: int = betterproto.uint64_field(6)


@dataclass(eq=False, repr=False)
class AvatarFightPropNotify(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(13)
    fight_prop_map: Dict[int, float] = betterproto.map_field(
        5, betterproto.TYPE_UINT32, betterproto.TYPE_FLOAT
    )


@dataclass(eq=False, repr=False)
class AvatarFightPropUpdateNotify(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(13)
    fight_prop_map: Dict[int, float] = betterproto.map_field(
        10, betterproto.TYPE_UINT32, betterproto.TYPE_FLOAT
    )


@dataclass(eq=False, repr=False)
class AvatarFlycloakChangeNotify(betterproto.Message):
    flycloak_id: int = betterproto.uint32_field(1)
    avatar_guid: int = betterproto.uint64_field(13)


@dataclass(eq=False, repr=False)
class AvatarFollowRouteNotify(betterproto.Message):
    client_params: str = betterproto.string_field(5)
    route: "Route" = betterproto.message_field(1)
    entity_id: int = betterproto.uint32_field(10)
    template_id: int = betterproto.uint32_field(4)
    start_scene_time_ms: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AvatarGainCostumeNotify(betterproto.Message):
    costume_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class AvatarGainFlycloakNotify(betterproto.Message):
    flycloak_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class AvatarLifeStateChangeNotify(betterproto.Message):
    source_entity_id: int = betterproto.uint32_field(11)
    server_buff_list: List["ServerBuff"] = betterproto.message_field(14)
    move_reliable_seq: int = betterproto.uint32_field(12)
    life_state: int = betterproto.uint32_field(6)
    die_type: "PlayerDieType" = betterproto.enum_field(5)
    attack_tag: str = betterproto.string_field(15)
    avatar_guid: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class AvatarPromoteGetRewardReq(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(4)
    promote_level: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class AvatarPromoteGetRewardRsp(betterproto.Message):
    promote_level: int = betterproto.uint32_field(9)
    avatar_guid: int = betterproto.uint64_field(5)
    retcode: int = betterproto.int32_field(8)
    reward_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class AvatarPromoteReq(betterproto.Message):
    guid: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class AvatarPromoteRsp(betterproto.Message):
    guid: int = betterproto.uint64_field(11)
    retcode: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class AvatarPropChangeReasonNotify(betterproto.Message):
    prop_type: int = betterproto.uint32_field(7)
    reason: "PropChangeReason" = betterproto.enum_field(15)
    cur_value: float = betterproto.float_field(14)
    avatar_guid: int = betterproto.uint64_field(3)
    old_value: float = betterproto.float_field(13)


@dataclass(eq=False, repr=False)
class AvatarPropNotify(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    prop_map: Dict[int, int] = betterproto.map_field(
        8, betterproto.TYPE_UINT32, betterproto.TYPE_INT64
    )


@dataclass(eq=False, repr=False)
class AvatarRenameAuditContent(betterproto.Message):
    type: str = betterproto.string_field(1)
    content: str = betterproto.string_field(2)
    auto_fail_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AvatarRenameContentAuditField(betterproto.Message):
    segment_list: List["AvatarRenameAuditContent"] = betterproto.message_field(1)
    name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ContentAuditAuxiliaryField(betterproto.Message):
    name: str = betterproto.string_field(1)
    value: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class AvatarRenameAuditData(betterproto.Message):
    aid: str = betterproto.string_field(1)
    entity_id: str = betterproto.string_field(2)
    lang: str = betterproto.string_field(3)
    queue_key: str = betterproto.string_field(4)
    region: str = betterproto.string_field(5)
    uid: int = betterproto.uint32_field(6)
    audit_field_list: List["AvatarRenameContentAuditField"] = betterproto.message_field(
        7
    )
    aux_field_list: List["ContentAuditAuxiliaryField"] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class AvatarRenameInfoNotify(betterproto.Message):
    avatar_rename_list: List["AvatarRenameInfo"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class AvatarSatiationData(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(15)
    penalty_finish_time: float = betterproto.float_field(6)
    finish_time: float = betterproto.float_field(7)


@dataclass(eq=False, repr=False)
class AvatarSatiationDataNotify(betterproto.Message):
    satiation_data_list: List["AvatarSatiationData"] = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class AvatarSkillChangeNotify(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(4)
    old_level: int = betterproto.uint32_field(7)
    cur_level: int = betterproto.uint32_field(15)
    skill_depot_id: int = betterproto.uint32_field(6)
    entity_id: int = betterproto.uint32_field(1)
    avatar_skill_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class AvatarSkillDepotChangeNotify(betterproto.Message):
    proud_skill_extra_level_map: Dict[int, int] = betterproto.map_field(
        9, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    proud_skill_list: List[int] = betterproto.uint32_field(3)
    entity_id: int = betterproto.uint32_field(5)
    avatar_guid: int = betterproto.uint64_field(7)
    skill_level_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    skill_depot_id: int = betterproto.uint32_field(13)
    talent_id_list: List[int] = betterproto.uint32_field(14)
    core_proud_skill_level: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class AvatarSkillInfoNotify(betterproto.Message):
    skill_map: Dict[int, "AvatarSkillInfo"] = betterproto.map_field(
        6, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    guid: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class AvatarSkillMaxChargeCountNotify(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(4)
    max_charge_count: int = betterproto.uint32_field(9)
    skill_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class AvatarSkillUpgradeReq(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(5)
    avatar_skill_id: int = betterproto.uint32_field(12)
    old_level: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class AvatarSkillUpgradeRsp(betterproto.Message):
    cur_level: int = betterproto.uint32_field(6)
    avatar_skill_id: int = betterproto.uint32_field(13)
    retcode: int = betterproto.int32_field(15)
    old_level: int = betterproto.uint32_field(1)
    avatar_guid: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class AvatarTeamAllDataNotify(betterproto.Message):
    temp_avatar_guid_list: List[int] = betterproto.uint64_field(2)
    backup_avatar_team_order_list: List[int] = betterproto.uint32_field(10)
    avatar_team_map: Dict[int, "AvatarTeam"] = betterproto.map_field(
        5, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class AvatarTeamResonanceInfo(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(9)
    entity_id: int = betterproto.uint32_field(8)
    unk3300_mbjeeeeejce: List[int] = betterproto.uint32_field(15)
    unk3300_lpakggbbdnj: List[int] = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class AvatarTeamUpdateNotify(betterproto.Message):
    avatar_team_map: Dict[int, "AvatarTeam"] = betterproto.map_field(
        15, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    temp_avatar_guid_list: List[int] = betterproto.uint64_field(10)


@dataclass(eq=False, repr=False)
class AvatarUnlockTalentNotify(betterproto.Message):
    skill_depot_id: int = betterproto.uint32_field(9)
    avatar_guid: int = betterproto.uint64_field(3)
    entity_id: int = betterproto.uint32_field(10)
    talent_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class AvatarUpgradeReq(betterproto.Message):
    item_id: int = betterproto.uint32_field(12)
    count: int = betterproto.uint32_field(7)
    avatar_guid: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class AvatarUpgradeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)
    avatar_guid: int = betterproto.uint64_field(14)
    cur_level: int = betterproto.uint32_field(9)
    unk3300_oimpfcdcdga: Dict[int, float] = betterproto.map_field(
        13, betterproto.TYPE_UINT32, betterproto.TYPE_FLOAT
    )
    unk3300_bfnhhnkolbh: Dict[int, float] = betterproto.map_field(
        6, betterproto.TYPE_UINT32, betterproto.TYPE_FLOAT
    )
    old_level: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class AvatarWearFlycloakReq(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(11)
    flycloak_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class AvatarWearFlycloakRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(12)
    avatar_guid: int = betterproto.uint64_field(14)
    flycloak_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class BackMyWorldReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class BackMyWorldRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class BackPlayCustomDungeonOfficialReq(betterproto.Message):
    room_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class BackPlayCustomDungeonOfficialRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class BackRebornGalleryReq(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class BackRebornGalleryRsp(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(10)
    retcode: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class BalloonGallerySettleInfo(betterproto.Message):
    score: int = betterproto.uint32_field(12)
    owner_uid: int = betterproto.uint32_field(2)
    reason: "GalleryStopReason" = betterproto.enum_field(7)
    hit_count: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class BalloonPlayerInfo(betterproto.Message):
    cur_score: int = betterproto.uint32_field(9)
    combo: int = betterproto.uint32_field(11)
    uid: int = betterproto.uint32_field(8)
    combo_disable_time: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class OnlinePlayerInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    nickname: str = betterproto.string_field(2)
    player_level: int = betterproto.uint32_field(3)
    avatar_id: int = betterproto.uint32_field(4)
    mp_setting_type: "MpSettingType" = betterproto.enum_field(5)
    cur_player_num_in_world: int = betterproto.uint32_field(6)
    world_level: int = betterproto.uint32_field(7)
    online_id: str = betterproto.string_field(8)
    name_card_id: int = betterproto.uint32_field(9)
    blacklist_uid_list: List[int] = betterproto.uint32_field(10)
    signature: str = betterproto.string_field(11)
    profile_picture: "ProfilePicture" = betterproto.message_field(12)
    psn_id: str = betterproto.string_field(13)


@dataclass(eq=False, repr=False)
class BalloonSettleInfo(betterproto.Message):
    player_info: "OnlinePlayerInfo" = betterproto.message_field(8)
    uid: int = betterproto.uint32_field(13)
    final_score: int = betterproto.uint32_field(2)
    max_combo: int = betterproto.uint32_field(7)
    shoot_count: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class BargainOfferPriceReq(betterproto.Message):
    bargain_id: int = betterproto.uint32_field(5)
    price: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class BargainOfferPriceRsp(betterproto.Message):
    result_param: int = betterproto.uint32_field(12)
    bargain_result: "BargainResultType" = betterproto.enum_field(10)
    retcode: int = betterproto.int32_field(1)
    cur_mood: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class BargainSnapshot(betterproto.Message):
    unk3300_kocjelacjlm: int = betterproto.uint32_field(11)
    unk3300_mhfdebobfne: int = betterproto.uint32_field(14)
    bargain_id: int = betterproto.uint32_field(3)
    cur_mood: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class BargainStartNotify(betterproto.Message):
    bargain_id: int = betterproto.uint32_field(11)
    snapshot: "BargainSnapshot" = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class BargainTerminateNotify(betterproto.Message):
    bargain_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class BartenderCancelLevelReq(betterproto.Message):
    level_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class BartenderCancelLevelRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)
    level_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class BartenderCancelOrderReq(betterproto.Message):
    quest_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class BartenderCancelOrderRsp(betterproto.Message):
    quest_id: int = betterproto.uint32_field(11)
    retcode: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class BartenderCompleteOrderReq(betterproto.Message):
    quest_id: int = betterproto.uint32_field(14)
    optional_order_list: List[int] = betterproto.uint32_field(15)
    unk3300_nkmhhhhghif: int = betterproto.uint32_field(6)
    unk3300_lonhkjfdond: int = betterproto.uint32_field(5)
    unk3300_poegpfjlngb: int = betterproto.uint32_field(11)
    is_view_formula: bool = betterproto.bool_field(8)
    item_list: List["ItemParam"] = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class BartenderCompleteOrderRsp(betterproto.Message):
    formula_id: int = betterproto.uint32_field(9)
    quest_id: int = betterproto.uint32_field(7)
    finish_order_id: int = betterproto.uint32_field(6)
    retcode: int = betterproto.int32_field(10)
    is_new: bool = betterproto.bool_field(8)
    affix_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class BartenderFinishLevelReq(betterproto.Message):
    level_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class BartenderFinishLevelRsp(betterproto.Message):
    level_id: int = betterproto.uint32_field(1)
    retcode: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class BartenderGetFormulaReq(betterproto.Message):
    item_list: List["ItemParam"] = betterproto.message_field(1)
    quest_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class BartenderGetFormulaRsp(betterproto.Message):
    formula_id: int = betterproto.uint32_field(15)
    affix_list: List[int] = betterproto.uint32_field(1)
    retcode: int = betterproto.int32_field(7)
    is_new: bool = betterproto.bool_field(10)


@dataclass(eq=False, repr=False)
class BartenderLevelProgressNotify(betterproto.Message):
    is_finish: bool = betterproto.bool_field(8)
    is_new_record: bool = betterproto.bool_field(6)
    level_id: int = betterproto.uint32_field(12)
    score: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class BartenderStartLevelReq(betterproto.Message):
    level_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class BartenderStartLevelRsp(betterproto.Message):
    level_id: int = betterproto.uint32_field(8)
    order_list: List[int] = betterproto.uint32_field(12)
    retcode: int = betterproto.int32_field(11)
    time: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class ShopGoods(betterproto.Message):
    unk3300_pbmknpcnbck: int = betterproto.uint32_field(1003)
    goods_item: "ItemParam" = betterproto.message_field(15)
    cost_item_list: List["ItemParam"] = betterproto.message_field(7)
    bought_num: int = betterproto.uint32_field(14)
    pre_goods_id_list: List[int] = betterproto.uint32_field(9)
    unk3300_dfedkiocobl: int = betterproto.uint32_field(5)
    unk3300_nmopagjfhoo: int = betterproto.uint32_field(11)
    hcoin: int = betterproto.uint32_field(6)
    end_time: int = betterproto.uint32_field(3)
    next_refresh_time: int = betterproto.uint32_field(10)
    unk3300_dbjcmmbhbni: int = betterproto.uint32_field(13)
    unk3300_omkifimdgdn: int = betterproto.uint32_field(1037)
    unk3300_ehkficbackc: int = betterproto.uint32_field(8)
    unk3300_mbgomhnbhmg: int = betterproto.uint32_field(777)
    unk3300_kkknknolici: int = betterproto.uint32_field(2)
    unk3300_ceomhbndaop: int = betterproto.uint32_field(1)
    unk3300_micpgjciape: int = betterproto.uint32_field(1770)
    unk3300_njcpajbceph: int = betterproto.uint32_field(505)
    begin_time: int = betterproto.uint32_field(12)
    unk3300_oodccoaighi: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class BuyGoodsParam(betterproto.Message):
    goods: "ShopGoods" = betterproto.message_field(14)
    buy_count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class BatchBuyGoodsReq(betterproto.Message):
    shop_type: int = betterproto.uint32_field(15)
    buy_goods_list: List["BuyGoodsParam"] = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class BatchBuyGoodsRsp(betterproto.Message):
    shop_type: int = betterproto.uint32_field(6)
    goods_list: List["ShopGoods"] = betterproto.message_field(15)
    retcode: int = betterproto.int32_field(13)
    buy_goods_list: List["BuyGoodsParam"] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class BattlePassMission(betterproto.Message):
    cur_progress: int = betterproto.uint32_field(10)
    mission_type: int = betterproto.uint32_field(9)
    reward_battle_pass_point: int = betterproto.uint32_field(14)
    total_progress: int = betterproto.uint32_field(12)
    mission_id: int = betterproto.uint32_field(15)
    mission_status: "BattlePassMissionMissionStatus" = betterproto.enum_field(11)


@dataclass(eq=False, repr=False)
class BattlePassCycle(betterproto.Message):
    end_time: int = betterproto.uint32_field(5)
    begin_time: int = betterproto.uint32_field(13)
    cycle_idx: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class BattlePassProduct(betterproto.Message):
    unk3300_aomgcjogged: str = betterproto.string_field(12)
    unk3300_nhoagmgneim: str = betterproto.string_field(9)
    unk3300_niebadladmk: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class BattlePassRewardTag(betterproto.Message):
    unlock_status: "BattlePassUnlockStatus" = betterproto.enum_field(11)
    reward_id: int = betterproto.uint32_field(4)
    level: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class BattlePassSchedule(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(5)
    unk3300_maajdkmiodc: int = betterproto.uint32_field(2)
    level: int = betterproto.uint32_field(7)
    unk3300_kodfjencjle: bool = betterproto.bool_field(8)
    unk3300_elmnfboleoa: int = betterproto.uint32_field(14)
    unk3300_kaloghhmjje: bool = betterproto.bool_field(12)
    unk3300_filcippahhl: int = betterproto.uint32_field(4)
    cur_cycle: "BattlePassCycle" = betterproto.message_field(11)
    begin_time: int = betterproto.uint32_field(1)
    unlock_status: "BattlePassUnlockStatus" = betterproto.enum_field(15)
    product_info: "BattlePassProduct" = betterproto.message_field(10)
    end_time: int = betterproto.uint32_field(13)
    reward_taken_list: List["BattlePassRewardTag"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class BattlePassAllDataNotify(betterproto.Message):
    mission_list: List["BattlePassMission"] = betterproto.message_field(1)
    cur_schedule: "BattlePassSchedule" = betterproto.message_field(10)
    have_cur_schedule: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class BattlePassBuySuccNotify(betterproto.Message):
    unk3300_pjodfjkaflg: int = betterproto.uint32_field(4)
    unk3300_ijoikkdnkde: int = betterproto.uint32_field(9)
    schedule_id: int = betterproto.uint32_field(11)
    item_list: List["ItemParam"] = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class BattlePassCurScheduleUpdateNotify(betterproto.Message):
    cur_schedule: "BattlePassSchedule" = betterproto.message_field(2)
    have_cur_schedule: bool = betterproto.bool_field(12)


@dataclass(eq=False, repr=False)
class BattlePassMissionDelNotify(betterproto.Message):
    del_mission_id_list: List[int] = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class BattlePassMissionUpdateNotify(betterproto.Message):
    mission_list: List["BattlePassMission"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class BattlePassRewardTakeOption(betterproto.Message):
    option_idx: int = betterproto.uint32_field(5)
    tag: "BattlePassRewardTag" = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class BeginCameraSceneLookNotify(betterproto.Message):
    unk3300_hkkchcemjie: float = betterproto.float_field(1716)
    unk3300_dfpcmofonnk: bool = betterproto.bool_field(15)
    unk3300_eelnoaichoj: bool = betterproto.bool_field(4)
    unk3300_odadmbbfpap: bool = betterproto.bool_field(7)
    duration: float = betterproto.float_field(2)
    unk3300_kchkkbodncj: int = betterproto.uint32_field(1746)
    unk3300_fiolgcikflh: float = betterproto.float_field(10)
    other_params: List[str] = betterproto.string_field(9)
    unk3300_njlbimjdfhj: bool = betterproto.bool_field(3)
    unk3300_aaogbccnjaf: bool = betterproto.bool_field(1224)
    entity_id: int = betterproto.uint32_field(1403)
    keep_rot_type: "BeginCameraSceneLookNotifyKeepRotType" = betterproto.enum_field(11)
    unk3300_ppcidicmien: "Vector" = betterproto.message_field(8)
    unk3300_ajeeneocfon: int = betterproto.uint32_field(965)
    unk3300_onbdmchfpdl: bool = betterproto.bool_field(5)
    unk3300_pieflaeggbi: bool = betterproto.bool_field(6)
    unk3300_fjdfglnlmbn: "Vector" = betterproto.message_field(13)
    unk3300_ilmhdlhlkgj: bool = betterproto.bool_field(1)
    unk3300_hclpggaoiac: float = betterproto.float_field(12)
    unk3300_hfpchfnfjkp: float = betterproto.float_field(14)


@dataclass(eq=False, repr=False)
class BeginCameraSceneLookWithTemplateNotify(betterproto.Message):
    follow_type: "BeginCameraSceneLookWithTemplateNotifyFollowType" = (
        betterproto.enum_field(5)
    )
    entity_id: int = betterproto.uint32_field(7)
    unk3300_fjdfglnlmbn: "Vector" = betterproto.message_field(1)
    template_id: int = betterproto.uint32_field(13)
    other_params: List[str] = betterproto.string_field(12)
    unk3300_ppcidicmien: "Vector" = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class BigTalentPointConvertReq(betterproto.Message):
    item_guid_list: List[int] = betterproto.uint64_field(14)
    avatar_guid: int = betterproto.uint64_field(7)


@dataclass(eq=False, repr=False)
class BigTalentPointConvertRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(13)
    avatar_guid: int = betterproto.uint64_field(11)


@dataclass(eq=False, repr=False)
class Birthday(betterproto.Message):
    month: int = betterproto.uint32_field(1)
    day: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class BlessingAcceptAllGivePicReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class BlessingAcceptAllGivePicRsp(betterproto.Message):
    accept_index_list: List[int] = betterproto.uint32_field(11)
    retcode: int = betterproto.int32_field(4)
    accept_pic_num_map: Dict[int, int] = betterproto.map_field(
        15, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class BlessingAcceptGivePicReq(betterproto.Message):
    uid: int = betterproto.uint32_field(3)
    index: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class BlessingAcceptGivePicRsp(betterproto.Message):
    index: int = betterproto.uint32_field(15)
    pic_id: int = betterproto.uint32_field(12)
    uid: int = betterproto.uint32_field(4)
    retcode: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class BlessingFriendPicData(betterproto.Message):
    remark_name: str = betterproto.string_field(8)
    avatar_id: int = betterproto.uint32_field(4)
    signature: str = betterproto.string_field(13)
    pic_num_map: Dict[int, int] = betterproto.map_field(
        5, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    uid: int = betterproto.uint32_field(15)
    nickname: str = betterproto.string_field(9)
    profile_picture: "ProfilePicture" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class BlessingGetAllRecvPicRecordListReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class BlessingRecvPicRecord(betterproto.Message):
    is_recv: bool = betterproto.bool_field(2)
    nickname: str = betterproto.string_field(5)
    avatar_id: int = betterproto.uint32_field(6)
    profile_picture: "ProfilePicture" = betterproto.message_field(9)
    signature: str = betterproto.string_field(10)
    remark_name: str = betterproto.string_field(8)
    uid: int = betterproto.uint32_field(3)
    pic_id: int = betterproto.uint32_field(12)
    index: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class BlessingGetAllRecvPicRecordListRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(4)
    recv_pic_record_list: List["BlessingRecvPicRecord"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class BlessingGetFriendPicListReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class BlessingGetFriendPicListRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(11)
    friend_pic_data_list: List["BlessingFriendPicData"] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class BlessingGiveFriendPicReq(betterproto.Message):
    pic_id: int = betterproto.uint32_field(11)
    uid: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class BlessingGiveFriendPicRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(14)
    pic_id: int = betterproto.uint32_field(6)
    uid: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class BlessingRecvFriendPicNotify(betterproto.Message):
    pic_id: int = betterproto.uint32_field(4)
    uid: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class BlessingRedeemRewardReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class BlessingRedeemRewardRsp(betterproto.Message):
    pic_num_map: Dict[int, int] = betterproto.map_field(
        10, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    retcode: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class BlessingScanReq(betterproto.Message):
    entity_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class BlessingScanRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(13)
    cur_day_scan_num: int = betterproto.uint32_field(11)
    scan_pic_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class BlitzRushParkourRestartReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(14)
    group_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class BlitzRushParkourRestartRsp(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(3)
    group_id: int = betterproto.uint32_field(8)
    retcode: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class BlockInfo(betterproto.Message):
    block_id: int = betterproto.uint32_field(1)
    data_version: int = betterproto.uint32_field(2)
    bin_data: bytes = betterproto.bytes_field(3)
    is_dirty: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class BlossomBriefInfo(betterproto.Message):
    pos: "Vector" = betterproto.message_field(7)
    is_guide_opened: bool = betterproto.bool_field(15)
    reward_id: int = betterproto.uint32_field(3)
    resin: int = betterproto.uint32_field(5)
    city_id: int = betterproto.uint32_field(8)
    circle_camp_id: int = betterproto.uint32_field(10)
    state: int = betterproto.uint32_field(11)
    monster_level: int = betterproto.uint32_field(1)
    scene_id: int = betterproto.uint32_field(4)
    refresh_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class BlossomBriefInfoNotify(betterproto.Message):
    brief_info_list: List["BlossomBriefInfo"] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class BlossomChestCreateNotify(betterproto.Message):
    refresh_id: int = betterproto.uint32_field(7)
    circle_camp_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class BlossomChestInfoNotify(betterproto.Message):
    blossom_chest_info: "BlossomChestInfo" = betterproto.message_field(13)
    entity_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class BlossomScheduleInfo(betterproto.Message):
    progress: int = betterproto.uint32_field(1)
    state: int = betterproto.uint32_field(5)
    finish_progress: int = betterproto.uint32_field(10)
    refresh_id: int = betterproto.uint32_field(12)
    circle_camp_id: int = betterproto.uint32_field(2)
    round: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class BonusActivityInfo(betterproto.Message):
    bonus_activity_id: int = betterproto.uint32_field(14)
    state: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class BonusActivityInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class BonusActivityInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(6)
    bonus_activity_info_list: List["BonusActivityInfo"] = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class BonusActivityUpdateNotify(betterproto.Message):
    bonus_activity_info_list: List["BonusActivityInfo"] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class BonusOpActivityInfo(betterproto.Message):
    left_bonus_count: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class BossChestActivateNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(15)
    qualify_uid_list: List[int] = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class ExhibitionDisplayInfo(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    param: int = betterproto.uint32_field(2)
    detail_param: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class BounceConjuringGallerySettleInfo(betterproto.Message):
    unk3300_pelhbjdmkae: int = betterproto.uint32_field(6)
    score: int = betterproto.uint32_field(15)
    gadget_count_map: Dict[int, int] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    unk3300_cngobofdeoe: int = betterproto.uint32_field(11)
    unk3300_nkgfklgdfac: int = betterproto.uint32_field(1)
    player_info: "OnlinePlayerInfo" = betterproto.message_field(2)
    damage: float = betterproto.float_field(12)
    unk3300_bjhcdknfdfn: int = betterproto.uint32_field(7)
    card_list: List["ExhibitionDisplayInfo"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class BounceConjuringSettleNotify(betterproto.Message):
    is_new_record: bool = betterproto.bool_field(4)
    total_score: int = betterproto.uint32_field(11)
    settle_info_map: Dict[
        int, "BounceConjuringGallerySettleInfo"
    ] = betterproto.map_field(10, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE)
    chapter_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class BrickBreakerPlayerBattleInfo(betterproto.Message):
    is_ready: bool = betterproto.bool_field(7)
    costume_id: List[int] = betterproto.uint32_field(5)
    nickname: str = betterproto.string_field(2)
    uid: int = betterproto.uint32_field(13)
    avatar_id: List[int] = betterproto.uint32_field(9)
    is_changing: bool = betterproto.bool_field(15)
    skill_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class BrickBreakerPlayerReadyNotify(betterproto.Message):
    uid_list: List[int] = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class BrickBreakerPlayerSetAvatarNotify(betterproto.Message):
    avatar_id_list: List[int] = betterproto.uint32_field(11)
    costume_id_list: List[int] = betterproto.uint32_field(6)
    uid: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class BrickBreakerPlayerSetChangingNotify(betterproto.Message):
    uid: int = betterproto.uint32_field(3)
    is_changing: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class BrickBreakerPlayerSetSkillNotify(betterproto.Message):
    uid: int = betterproto.uint32_field(4)
    skill_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class BrickBreakerQuitReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class BrickBreakerQuitRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class BrickBreakerSelectAvatarReq(betterproto.Message):
    avatar_id: List[int] = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class BrickBreakerSelectAvatarRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(14)
    avatar_id: List[int] = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class BrickBreakerSelectSkillReq(betterproto.Message):
    skill_id: List[int] = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class BrickBreakerSelectSkillRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(2)
    skill_id: List[int] = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class BrickBreakerSetChangingReq(betterproto.Message):
    is_changing: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class BrickBreakerSetChangingRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class BrickBreakerSetReadyReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class BrickBreakerSetReadyRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class BrickBreakerSettleNotify(betterproto.Message):
    time: int = betterproto.uint32_field(5)
    is_single_mode: bool = betterproto.bool_field(15)
    is_dungeon: bool = betterproto.bool_field(2)
    score: int = betterproto.uint32_field(7)
    combo: int = betterproto.uint32_field(12)
    level_id: int = betterproto.uint32_field(11)
    reason: "BrickBreakerSettleNotifySettleReason" = betterproto.enum_field(1)
    is_new_record: bool = betterproto.bool_field(3)
    gallery_id: int = betterproto.uint32_field(13)
    update_skill_list: List["Uint32Pair"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class BrickBreakerStageInfo(betterproto.Message):
    level_id: int = betterproto.uint32_field(7)
    battle_info_list: List["BrickBreakerPlayerBattleInfo"] = betterproto.message_field(
        3
    )
    stage_type: "BrickBreakerStageType" = betterproto.enum_field(5)


@dataclass(eq=False, repr=False)
class BrickBreakerTwiceStartReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class BrickBreakerTwiceStartRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(12)


@dataclass(eq=False, repr=False)
class BuildingInfo(betterproto.Message):
    building_id: int = betterproto.uint32_field(1)
    point_config_id: int = betterproto.uint32_field(2)
    cost: int = betterproto.uint32_field(3)
    refund: int = betterproto.uint32_field(5)
    owner_uid: int = betterproto.uint32_field(6)
    current_num: int = betterproto.uint32_field(7)
    max_num: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class BuoyantCombatGallerySettleInfo(betterproto.Message):
    gallery_level: int = betterproto.uint32_field(11)
    kill_monster_count: int = betterproto.uint32_field(1)
    kill_special_monster_count: int = betterproto.uint32_field(9)
    unk3300_hlfhlpekoml: int = betterproto.uint32_field(7)
    gallery_id: int = betterproto.uint32_field(2)
    unk3300_kpcjboogemg: int = betterproto.uint32_field(10)
    final_score: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class BuoyantCombatSettleInfo(betterproto.Message):
    settle_info: "BuoyantCombatGallerySettleInfo" = betterproto.message_field(14)
    is_new_record: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class BuoyantCombatSettleNotify(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(8)
    settle_info: "BuoyantCombatSettleInfo" = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class BuyBattlePassLevelReq(betterproto.Message):
    buy_level: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class BuyBattlePassLevelRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(11)
    buy_level: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class BuyGoodsReq(betterproto.Message):
    shop_type: int = betterproto.uint32_field(9)
    goods: "ShopGoods" = betterproto.message_field(10)
    buy_count: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class BuyGoodsRsp(betterproto.Message):
    shop_type: int = betterproto.uint32_field(15)
    retcode: int = betterproto.int32_field(13)
    goods_list: List["ShopGoods"] = betterproto.message_field(10)
    goods: "ShopGoods" = betterproto.message_field(7)
    buy_count: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class BuyResinReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class BuyResinRsp(betterproto.Message):
    cur_value: int = betterproto.uint32_field(7)
    retcode: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class CalcWeaponUpgradeReturnItemsReq(betterproto.Message):
    food_weapon_guid_list: List[int] = betterproto.uint64_field(12)
    item_param_list: List["ItemParam"] = betterproto.message_field(8)
    target_weapon_guid: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class CalcWeaponUpgradeReturnItemsRsp(betterproto.Message):
    target_weapon_guid: int = betterproto.uint64_field(3)
    item_param_list: List["ItemParam"] = betterproto.message_field(10)
    retcode: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class CancelCityReputationRequestReq(betterproto.Message):
    city_id: int = betterproto.uint32_field(14)
    request_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class CancelCityReputationRequestRsp(betterproto.Message):
    city_id: int = betterproto.uint32_field(7)
    retcode: int = betterproto.int32_field(14)
    request_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CancelCoopTaskReq(betterproto.Message):
    chapter_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class CancelCoopTaskRsp(betterproto.Message):
    chapter_id: int = betterproto.uint32_field(5)
    retcode: int = betterproto.int32_field(14)


@dataclass(eq=False, repr=False)
class CancelFinishParentQuestNotify(betterproto.Message):
    parent_quest_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class CanUseSkillNotify(betterproto.Message):
    is_can_use_skill: bool = betterproto.bool_field(12)


@dataclass(eq=False, repr=False)
class CardProductRewardNotify(betterproto.Message):
    hcoin: int = betterproto.uint32_field(6)
    product_id: str = betterproto.string_field(3)
    remain_days: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CataLogGlobalWatcherFinishedData(betterproto.Message):
    finished_global_watcher_list: List[int] = betterproto.uint32_field(15)
    catalog_type: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CataLogFinishedGlobalWatcherAllDataNotify(betterproto.Message):
    finished_global_watcher_data_list: List[
        "CataLogGlobalWatcherFinishedData"
    ] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class CataLogNewFinishedGlobalWatcherNotify(betterproto.Message):
    new_finished_global_watcher_data_list: List[
        "CataLogGlobalWatcherFinishedData"
    ] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class CellInfo(betterproto.Message):
    type: "SceneSurfaceMaterial" = betterproto.enum_field(1)
    y: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class ChallengeBrief(betterproto.Message):
    challenge_index: int = betterproto.uint32_field(5)
    cur_progress: int = betterproto.uint32_field(15)
    is_success: bool = betterproto.bool_field(12)
    challenge_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ChallengeDataNotify(betterproto.Message):
    param_index: int = betterproto.uint32_field(4)
    challenge_index: int = betterproto.uint32_field(2)
    value: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ChallengeRecord(betterproto.Message):
    challenge_record_type: int = betterproto.uint32_field(2)
    challenge_index: int = betterproto.uint32_field(3)
    challenge_id: int = betterproto.uint32_field(9)
    best_value: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ChallengeRecordNotify(betterproto.Message):
    group_id: int = betterproto.uint32_field(15)
    challenge_record_list: List["ChallengeRecord"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class ChangeAvatarReq(betterproto.Message):
    move_pos: "Vector" = betterproto.message_field(9)
    guid: int = betterproto.uint64_field(14)
    is_move: bool = betterproto.bool_field(11)
    skill_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ChangeAvatarRsp(betterproto.Message):
    cur_guid: int = betterproto.uint64_field(10)
    skill_id: int = betterproto.uint32_field(1)
    retcode: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class ChangeCustomDungeonRoomReq(betterproto.Message):
    room_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class ChangeCustomDungeonRoomRsp(betterproto.Message):
    room_id: int = betterproto.uint32_field(8)
    retcode: int = betterproto.int32_field(14)


@dataclass(eq=False, repr=False)
class ChangeGameTimeReq(betterproto.Message):
    extra_days: int = betterproto.uint32_field(3)
    game_time: int = betterproto.uint32_field(8)
    is_force_set: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class ChangeGameTimeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(10)
    extra_days: int = betterproto.uint32_field(2)
    cur_game_time: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class ChangeMailStarNotify(betterproto.Message):
    mail_id_list: List[int] = betterproto.uint32_field(13)
    is_star: bool = betterproto.bool_field(15)


@dataclass(eq=False, repr=False)
class ChangeMpTeamAvatarReq(betterproto.Message):
    cur_avatar_guid: int = betterproto.uint64_field(3)
    avatar_guid_list: List[int] = betterproto.uint64_field(14)


@dataclass(eq=False, repr=False)
class ChangeMpTeamAvatarRsp(betterproto.Message):
    cur_avatar_guid: int = betterproto.uint64_field(12)
    retcode: int = betterproto.int32_field(10)
    avatar_guid_list: List[int] = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class ChangeServerGlobalValueNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ChangeTeamNameReq(betterproto.Message):
    team_id: int = betterproto.int32_field(14)
    team_name: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class ChangeTeamNameRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(2)
    team_name: str = betterproto.string_field(15)
    team_id: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class ChangeWidgetBackgroundActiveStateReq(betterproto.Message):
    is_active: bool = betterproto.bool_field(6)
    material_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class ChangeWidgetBackgroundActiveStateRsp(betterproto.Message):
    material_id: int = betterproto.uint32_field(7)
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class ChangeWorldToSingleModeNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ChangeWorldToSingleModeReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ChangeWorldToSingleModeRsp(betterproto.Message):
    quit_mp_valid_time: int = betterproto.uint32_field(6)
    retcode: int = betterproto.int32_field(14)


@dataclass(eq=False, repr=False)
class ChannelerSlabCheckEnterLoopDungeonReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ChannelerSlabCheckEnterLoopDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(12)


@dataclass(eq=False, repr=False)
class ChannelerSlabEnterLoopDungeonReq(betterproto.Message):
    difficulty_id: int = betterproto.uint32_field(2)
    condition_id_list: List[int] = betterproto.uint32_field(10)
    point_id: int = betterproto.uint32_field(1)
    dungeon_index: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ChannelerSlabEnterLoopDungeonRsp(betterproto.Message):
    point_id: int = betterproto.uint32_field(14)
    retcode: int = betterproto.int32_field(9)
    difficulty_id: int = betterproto.uint32_field(8)
    dungeon_index: int = betterproto.uint32_field(13)
    condition_id_list: List[int] = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class ChannelerSlabLoopDungeonChallengeInfoNotify(betterproto.Message):
    scheme_buff_id_list: List[int] = betterproto.uint32_field(6)
    dungeon_index: int = betterproto.uint32_field(10)
    condition_id_list: List[int] = betterproto.uint32_field(8)
    difficulty_id: int = betterproto.uint32_field(13)
    challenge_score: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ChannelerSlabLoopDungeonResultInfo(betterproto.Message):
    dungeon_index: int = betterproto.uint32_field(7)
    challenge_score: int = betterproto.uint32_field(5)
    is_in_time_limit: bool = betterproto.bool_field(8)
    is_success: bool = betterproto.bool_field(12)
    challenge_max_score: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class ChannelerSlabLoopDungeonSelectConditionReq(betterproto.Message):
    dungeon_index: int = betterproto.uint32_field(7)
    condition_id_list: List[int] = betterproto.uint32_field(15)
    difficulty_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class ChannelerSlabLoopDungeonSelectConditionRsp(betterproto.Message):
    dungeon_index: int = betterproto.uint32_field(1)
    condition_id_list: List[int] = betterproto.uint32_field(10)
    difficulty_id: int = betterproto.uint32_field(5)
    retcode: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class ChannelerSlabLoopDungeonTakeFirstPassRewardReq(betterproto.Message):
    dungeon_index: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class ChannelerSlabLoopDungeonTakeFirstPassRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(13)
    dungeon_index: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class ChannelerSlabLoopDungeonTakeScoreRewardReq(betterproto.Message):
    reward_index: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class ChannelerSlabLoopDungeonTakeScoreRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(5)
    reward_index: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class ChannelerSlabOneOffDungeonInfoNotify(betterproto.Message):
    scheme_buff_id_list: List[int] = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class ChannelerSlabOneOffDungeonInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ChannelerSlabOneOffDungeonInfoRsp(betterproto.Message):
    scheme_buff_id_list: List[int] = betterproto.uint32_field(10)
    retcode: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class ChannelerSlabSaveAssistInfoReq(betterproto.Message):
    assist_info_list: List["ChannelerSlabAssistInfo"] = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class ChannelerSlabSaveAssistInfoRsp(betterproto.Message):
    assist_info_list: List["ChannelerSlabAssistInfo"] = betterproto.message_field(2)
    retcode: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class ChannelerSlabStageActiveChallengeIndexNotify(betterproto.Message):
    challenge_index: int = betterproto.uint32_field(1)
    active_camp_index: int = betterproto.uint32_field(14)
    stage_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class ChannelerSlabStageOneoffDungeonNotify(betterproto.Message):
    is_done: bool = betterproto.bool_field(6)
    stage_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class ChannelerSlabTakeoffBuffReq(betterproto.Message):
    slot_id: int = betterproto.uint32_field(3)
    buff_id: int = betterproto.uint32_field(12)
    is_mp: bool = betterproto.bool_field(10)


@dataclass(eq=False, repr=False)
class ChannelerSlabTakeoffBuffRsp(betterproto.Message):
    slot_id: int = betterproto.uint32_field(2)
    retcode: int = betterproto.int32_field(8)
    buff_id: int = betterproto.uint32_field(12)
    is_mp: bool = betterproto.bool_field(10)


@dataclass(eq=False, repr=False)
class ChannelerSlabWearBuffReq(betterproto.Message):
    slot_id: int = betterproto.uint32_field(13)
    is_mp: bool = betterproto.bool_field(6)
    buff_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ChannelerSlabWearBuffRsp(betterproto.Message):
    is_mp: bool = betterproto.bool_field(7)
    buff_id: int = betterproto.uint32_field(8)
    slot_id: int = betterproto.uint32_field(11)
    retcode: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class ChapterStateNotify(betterproto.Message):
    chapter_id: int = betterproto.uint32_field(9)
    need_begin_time: "ChapterStateNotifyNeedBeginTime" = betterproto.message_field(13)
    chapter_state: "ChapterState" = betterproto.enum_field(1)
    need_player_level: "ChapterStateNotifyNeedPlayerLevel" = betterproto.message_field(
        5
    )


@dataclass(eq=False, repr=False)
class ChapterStateNotifyNeedPlayerLevel(betterproto.Message):
    is_limit: bool = betterproto.bool_field(12)
    config_need_player_level: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ChapterStateNotifyNeedBeginTime(betterproto.Message):
    is_limit: bool = betterproto.bool_field(4)
    config_need_begin_time: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class CharAmusementAvatarInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(14)
    avatar_id_list: List[int] = betterproto.uint32_field(4)
    punish_time: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CharAmusementInfo(betterproto.Message):
    level_id: int = betterproto.uint32_field(12)
    total_cost_time: int = betterproto.uint32_field(2)
    preview_stage_index: int = betterproto.uint32_field(1)
    avatar_info_list: List["CharAmusementAvatarInfo"] = betterproto.message_field(5)
    stage_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CharAmusementSettleNotify(betterproto.Message):
    is_new_record: bool = betterproto.bool_field(10)
    finish_time: int = betterproto.uint32_field(2)
    is_succ: bool = betterproto.bool_field(12)


@dataclass(eq=False, repr=False)
class ChatChannelInfo(betterproto.Message):
    is_shield: bool = betterproto.bool_field(1)
    channel_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class ChatChannelDataNotify(betterproto.Message):
    channel_info_list: List["ChatChannelInfo"] = betterproto.message_field(5)
    channel_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ChatChannelInfoNotify(betterproto.Message):
    channel_info: "ChatChannelInfo" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class ChatChannelShieldNotify(betterproto.Message):
    is_shield: bool = betterproto.bool_field(2)
    channel_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ChatChannelUpdateNotify(betterproto.Message):
    channel_id: int = betterproto.uint32_field(2)
    channel_info: "ChatChannelInfo" = betterproto.message_field(5)
    is_create: bool = betterproto.bool_field(15)


@dataclass(eq=False, repr=False)
class ChatEmojiCollectionData(betterproto.Message):
    emoji_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ChatInfo(betterproto.Message):
    is_read: bool = betterproto.bool_field(3)
    time: int = betterproto.uint32_field(1)
    to_uid: int = betterproto.uint32_field(10)
    uid: int = betterproto.uint32_field(11)
    sequence: int = betterproto.uint32_field(5)
    text: str = betterproto.string_field(909, group="content")
    icon: int = betterproto.uint32_field(990, group="content")
    system_hint: "ChatInfoSystemHint" = betterproto.message_field(799, group="content")


@dataclass(eq=False, repr=False)
class ChatInfoSystemHint(betterproto.Message):
    type: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class ChatHistoryNotify(betterproto.Message):
    channel_id: int = betterproto.uint32_field(1)
    chat_info: List["ChatInfo"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class CheckAddItemExceedLimitNotify(betterproto.Message):
    unk3300_pkjmejkapbi: List[int] = betterproto.uint32_field(4)
    unk3300_gpdpcjlhbde: List[int] = betterproto.uint32_field(11)
    reason: int = betterproto.uint32_field(9)
    is_drop: bool = betterproto.bool_field(14)
    msg_type: "CheckAddItemExceedLimitNotifyItemExceedLimitMsgType" = (
        betterproto.enum_field(6)
    )


@dataclass(eq=False, repr=False)
class CheckGroupReplacedReq(betterproto.Message):
    group_id_list: List[int] = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class CheckGroupReplacedRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(14)
    replaced_group_id_list: List[int] = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class SegmentInfo(betterproto.Message):
    module: int = betterproto.uint32_field(1)
    size: int = betterproto.uint32_field(7)
    offset: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class CheckSegmentCrcNotify(betterproto.Message):
    info_list: List["SegmentInfo"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class SegmentCrcInfo(betterproto.Message):
    size: int = betterproto.uint32_field(6)
    crc: str = betterproto.string_field(8)
    module: int = betterproto.uint32_field(4)
    retcode: int = betterproto.int32_field(3)
    offset: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class CheckSegmentCrcReq(betterproto.Message):
    info_list: List["SegmentCrcInfo"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CheckUgcStateReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CheckUgcStateRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class CheckUgcUpdateReq(betterproto.Message):
    ugc_type: "UgcType" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class CheckUgcUpdateRsp(betterproto.Message):
    ugc_type: "UgcType" = betterproto.enum_field(6)
    update_ugc_guid_list: List[int] = betterproto.uint64_field(3)
    retcode: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class ChessCardInfo(betterproto.Message):
    card_id: int = betterproto.uint32_field(12)
    effect_stack: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class ChessMonsterInfo(betterproto.Message):
    monster_id: int = betterproto.uint32_field(9)
    level: int = betterproto.uint32_field(15)
    affix_list: List[int] = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class ChessEntranceInfo(betterproto.Message):
    monster_info_list: List["ChessMonsterInfo"] = betterproto.message_field(15)
    entrance_index: int = betterproto.uint32_field(9)
    entrance_point_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class ChessEntranceDetailInfo(betterproto.Message):
    info_list: List["ChessEntranceInfo"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class ChessEscapedMonstersNotify(betterproto.Message):
    escaped_monsters: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class ChessLeftMonstersNotify(betterproto.Message):
    left_monsters: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ChessManualRefreshCardsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ChessManualRefreshCardsRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class ChessMysteryInfo(betterproto.Message):
    exit_point_id_list: List[int] = betterproto.uint32_field(15)
    entrance_point_map: Dict[int, int] = betterproto.map_field(
        10, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    detail_info_map: Dict[int, "ChessEntranceDetailInfo"] = betterproto.map_field(
        8, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class ChessNormalCardInfo(betterproto.Message):
    cost_points: int = betterproto.uint32_field(3)
    card_id: int = betterproto.uint32_field(2)
    is_attach_curse: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class ChessPickCardNotify(betterproto.Message):
    normal_card_info: "ChessNormalCardInfo" = betterproto.message_field(8)
    curse_card_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class ChessPickCardReq(betterproto.Message):
    card_id: int = betterproto.uint32_field(5)
    card_index: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ChessPickCardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(11)
    card_index: int = betterproto.uint32_field(4)
    card_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class ChessPlayerInfo(betterproto.Message):
    candidate_card_info_list: List["ChessNormalCardInfo"] = betterproto.message_field(1)
    uid: int = betterproto.uint32_field(5)
    unk3300_aocjhokcddm: int = betterproto.uint32_field(2)
    unk3300_gpndncclhke: int = betterproto.uint32_field(10)
    building_points: int = betterproto.uint32_field(8)
    unk3300_ppfbgidkcdj: int = betterproto.uint32_field(12)
    unk3300_ppfpeagbhlp: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class ChessPlayerInfoNotify(betterproto.Message):
    player_info: "ChessPlayerInfo" = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class ChessSelectedCardsNotify(betterproto.Message):
    selected_card_info_list: List["ChessCardInfo"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class ChildQuest(betterproto.Message):
    state: int = betterproto.uint32_field(15)
    quest_config_id: int = betterproto.uint32_field(9)
    quest_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class ChooseCurAvatarTeamReq(betterproto.Message):
    team_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class ChooseCurAvatarTeamRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)
    cur_team_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class CityInfo(betterproto.Message):
    city_id: int = betterproto.uint32_field(9)
    level: int = betterproto.uint32_field(12)
    crystal_num: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CityReputationSimpleInfo(betterproto.Message):
    city_id: int = betterproto.uint32_field(14)
    level: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class CityReputationDataNotify(betterproto.Message):
    simple_info_list: List["CityReputationSimpleInfo"] = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class CityReputationExploreInfo(betterproto.Message):
    explore_percent: int = betterproto.uint32_field(1)
    taken_explore_reward_list: List[int] = betterproto.uint32_field(15)
    is_open: bool = betterproto.bool_field(13)


@dataclass(eq=False, repr=False)
class CityReputationHuntInfo(betterproto.Message):
    cur_week_finish_num: int = betterproto.uint32_field(1)
    is_open: bool = betterproto.bool_field(7)
    has_reward: bool = betterproto.bool_field(15)


@dataclass(eq=False, repr=False)
class CityReputationQuestInfo(betterproto.Message):
    unk3300_imldpdmhjbj: List[int] = betterproto.uint32_field(12)
    unk3300_omgmgdihdoh: List[int] = betterproto.uint32_field(10)
    is_open: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class CityReputationRequestInfo(betterproto.Message):
    request_info_list: List[
        "CityReputationRequestInfoRequestInfo"
    ] = betterproto.message_field(4)
    is_open: bool = betterproto.bool_field(14)


@dataclass(eq=False, repr=False)
class CityReputationRequestInfoRequestInfo(betterproto.Message):
    is_taken_reward: bool = betterproto.bool_field(4)
    request_id: int = betterproto.uint32_field(8)
    quest_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class CityReputationInfo(betterproto.Message):
    exp: int = betterproto.uint32_field(8)
    quest_info: "CityReputationQuestInfo" = betterproto.message_field(9)
    taken_level_reward_list: List[int] = betterproto.uint32_field(10)
    request_info: "CityReputationRequestInfo" = betterproto.message_field(5)
    next_refresh_time: int = betterproto.uint32_field(11)
    total_accept_request_num: int = betterproto.uint32_field(12)
    hunt_info: "CityReputationHuntInfo" = betterproto.message_field(15)
    explore_info: "CityReputationExploreInfo" = betterproto.message_field(3)
    level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CityReputationLevelupNotify(betterproto.Message):
    level: int = betterproto.uint32_field(5)
    city_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class ClearRoguelikeCurseNotify(betterproto.Message):
    is_clear_all: bool = betterproto.bool_field(11)
    clear_curse_map: Dict[int, int] = betterproto.map_field(
        5, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    card_id: int = betterproto.uint32_field(9)
    is_curse_all_clear: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class EntityAbilityInvokeEntry(betterproto.Message):
    invokes: List["AbilityInvokeEntry"] = betterproto.message_field(14)
    entity_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class ClientAbilitiesInitFinishCombineNotify(betterproto.Message):
    entity_invoke_list: List["EntityAbilityInvokeEntry"] = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class ClientAbilityChangeNotify(betterproto.Message):
    is_init_hash: bool = betterproto.bool_field(10)
    invokes: List["AbilityInvokeEntry"] = betterproto.message_field(14)
    entity_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class ClientAbilityInitBeginNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class ClientAbilityInitFinishNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(11)
    invokes: List["AbilityInvokeEntry"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class ClientAiStateNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(13)
    cur_tactic: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ClientBulletCreateNotify(betterproto.Message):
    param: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ClientCollectorDataNotify(betterproto.Message):
    client_collector_data_list: List["ClientCollectorData"] = betterproto.message_field(
        1
    )


@dataclass(eq=False, repr=False)
class ClientHashDebugNotify(betterproto.Message):
    job_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class ClientLoadingCostumeVerificationNotify(betterproto.Message):
    prefab_hash: int = betterproto.uint64_field(5)
    guid: int = betterproto.uint64_field(1)
    costume_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class ClientLockGameTimeNotify(betterproto.Message):
    is_lock: bool = betterproto.bool_field(11)


@dataclass(eq=False, repr=False)
class ClientLogBodyLogin(betterproto.Message):
    action_type: str = betterproto.string_field(1)
    action_result: str = betterproto.string_field(2)
    action_time: int = betterproto.uint32_field(3)
    xg: str = betterproto.string_field(4)
    signal_level: int = betterproto.uint32_field(5)
    dns: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ClientLogBodyPing(betterproto.Message):
    xg: str = betterproto.string_field(1)
    signal_level: int = betterproto.uint32_field(2)
    ping: int = betterproto.uint32_field(3)
    servertype: str = betterproto.string_field(4)
    serverip: str = betterproto.string_field(5)
    serverport: str = betterproto.string_field(6)
    pcount: int = betterproto.uint32_field(7)
    plost: int = betterproto.uint32_field(8)
    dns: str = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class ClientLogHead(betterproto.Message):
    event_time: str = betterproto.string_field(1)
    log_serial_number: str = betterproto.string_field(2)
    action_id: int = betterproto.uint32_field(3)
    action_name: str = betterproto.string_field(4)
    upload_ip: str = betterproto.string_field(5)
    product_id: str = betterproto.string_field(6)
    channel_id: str = betterproto.string_field(7)
    region_name: str = betterproto.string_field(8)
    game_version: str = betterproto.string_field(9)
    device_type: str = betterproto.string_field(10)
    device_uuid: str = betterproto.string_field(11)
    mac_addr: str = betterproto.string_field(12)
    account_name: str = betterproto.string_field(13)
    account_uuid: str = betterproto.string_field(14)


@dataclass(eq=False, repr=False)
class MassiveBoxInfo(betterproto.Message):
    id: int = betterproto.int32_field(1)
    config_id: int = betterproto.uint32_field(2)
    center: "Vector" = betterproto.message_field(3)
    extents: "Vector" = betterproto.message_field(4)
    up: "Vector" = betterproto.message_field(5)
    forward: "Vector" = betterproto.message_field(6)
    right: "Vector" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class MassiveGrassInfo(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    center: "Vector" = betterproto.message_field(2)
    size: "Vector" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class MassiveWaterInfo(betterproto.Message):
    id: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class ClientMassiveEntity(betterproto.Message):
    entity_type: int = betterproto.uint32_field(1)
    config_id: int = betterproto.uint32_field(2)
    obj_id: int = betterproto.int64_field(3)
    water_info: "MassiveWaterInfo" = betterproto.message_field(4, group="entity_info")
    grass_info: "MassiveGrassInfo" = betterproto.message_field(5, group="entity_info")
    box_info: "MassiveBoxInfo" = betterproto.message_field(6, group="entity_info")


@dataclass(eq=False, repr=False)
class ClientNewMailNotify(betterproto.Message):
    unk3300_fbdgcfaalfn: int = betterproto.uint32_field(13)
    unk3300_manjmcpellj: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ClientPauseNotify(betterproto.Message):
    is_open: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class ClientReconnectNotify(betterproto.Message):
    reason: "ClientReconnectReason" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class ClientRemoveCombatEndModifierNotify(betterproto.Message):
    combat_end_type_list: List[int] = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class ClientReportNotify(betterproto.Message):
    unk3300_jhjdjebafcm: str = betterproto.string_field(15)
    unk3300_amleajljdfo: str = betterproto.string_field(10)


@dataclass(eq=False, repr=False)
class ClientScriptEventNotify(betterproto.Message):
    source_entity_id: int = betterproto.uint32_field(1)
    event_type: int = betterproto.uint32_field(8)
    target_entity_id: int = betterproto.uint32_field(4)
    param_list: List[int] = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class ClientTransmitReq(betterproto.Message):
    reason: "TransmitReason" = betterproto.enum_field(3)
    scene_id: int = betterproto.uint32_field(9)
    rot: "Vector" = betterproto.message_field(6)
    pos: "Vector" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ClientTransmitRsp(betterproto.Message):
    reason: "TransmitReason" = betterproto.enum_field(11)
    retcode: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class ClientTriggerEventNotify(betterproto.Message):
    force_id: int = betterproto.uint32_field(10)
    event_type: "EventTriggerType" = betterproto.enum_field(15)


@dataclass(eq=False, repr=False)
class CloseCommonTipsNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ClosedItemNotify(betterproto.Message):
    item_id_list: List[int] = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class CodexTypeData(betterproto.Message):
    have_viewed_list: List[bool] = betterproto.bool_field(13)
    codex_id_list: List[int] = betterproto.uint32_field(9)
    weapon_max_promote_level_map: Dict[int, int] = betterproto.map_field(
        12, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    type: "CodexType" = betterproto.enum_field(14)


@dataclass(eq=False, repr=False)
class CodexDataFullNotify(betterproto.Message):
    type_data_list: List["CodexTypeData"] = betterproto.message_field(14)
    unk3300_odpdlgekiem: int = betterproto.uint32_field(4)
    unk3300_dcmjlcifceh: int = betterproto.uint32_field(13)
    recent_viewed_pushtips_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CodexDataUpdateNotify(betterproto.Message):
    weapon_max_promote_level: int = betterproto.uint32_field(10)
    type: "CodexType" = betterproto.enum_field(5)
    id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CoinCollectCheckDoubleStartPlayReq(betterproto.Message):
    level_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class CoinCollectCheckDoubleStartPlayRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(10)
    level_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class CoinCollectChooseSkillReq(betterproto.Message):
    choose_skill_no: int = betterproto.uint32_field(14)
    level_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class CoinCollectChooseSkillRsp(betterproto.Message):
    level_id: int = betterproto.uint32_field(13)
    choose_skill_no: int = betterproto.uint32_field(10)
    retcode: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class CoinCollectGallerySettleNotify(betterproto.Message):
    level_id: int = betterproto.uint32_field(2)
    unk3300_dkbjmljglib: int = betterproto.uint32_field(13)
    unk3300_kdhdmogjdnl: int = betterproto.uint32_field(14)
    multistage_play_index: int = betterproto.uint32_field(8)
    unk3300_cpldpcmbhoe: int = betterproto.uint32_field(6)
    is_new_record: bool = betterproto.bool_field(15)


@dataclass(eq=False, repr=False)
class CoinCollectInterruptPlayReq(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class CoinCollectInterruptPlayRsp(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(3)
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class CoinCollectTeamAvatarInfo(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(5)
    costume_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CoinCollectPlayerInfo(betterproto.Message):
    player_uid: int = betterproto.uint32_field(15)
    is_prepare: bool = betterproto.bool_field(7)
    choose_skill_no: int = betterproto.uint32_field(10)
    avatar_info_list: List["CoinCollectTeamAvatarInfo"] = betterproto.message_field(2)
    player_name: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class CoinCollectPrepareReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CoinCollectPrepareRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class CoinCollectStageInfo(betterproto.Message):
    play_index: int = betterproto.uint32_field(9)
    player_info_list: List["CoinCollectPlayerInfo"] = betterproto.message_field(11)
    level_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CoinCollectPrepareStageNotify(betterproto.Message):
    coin_collect_info: "CoinCollectStageInfo" = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class CombatInvokeEntry(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(11)
    argument_type: "CombatTypeArgument" = betterproto.enum_field(9)
    combat_data: bytes = betterproto.bytes_field(7)


@dataclass(eq=False, repr=False)
class CombatInvocationsNotify(betterproto.Message):
    invoke_list: List["CombatInvokeEntry"] = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class CombineDataNotify(betterproto.Message):
    combine_id_list: List[int] = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class CombineFormulaDataNotify(betterproto.Message):
    combine_id: int = betterproto.uint32_field(6)
    is_locked: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class CombineReq(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(6)
    combine_id: int = betterproto.uint32_field(5)
    combine_count: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class CombineRsp(betterproto.Message):
    unk3300_iamggfhomec: List["ItemParam"] = betterproto.message_field(11)
    unk3300_bakpekifjoa: List["ItemParam"] = betterproto.message_field(13)
    unk3300_cdafjdfhlki: List["ItemParam"] = betterproto.message_field(6)
    avatar_guid: int = betterproto.uint64_field(7)
    combine_count: int = betterproto.uint32_field(2)
    combine_id: int = betterproto.uint32_field(10)
    cost_item_list: List["ItemParam"] = betterproto.message_field(15)
    retcode: int = betterproto.int32_field(1)
    unk3300_flhnpfgnnbm: List["ItemParam"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CommonPlayerTipsNotify(betterproto.Message):
    notify_type: int = betterproto.uint32_field(15)
    text_map_id_list: List[str] = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class CompoundQueueData(betterproto.Message):
    unk3300_ncehjaahokm: int = betterproto.uint32_field(5)
    unk3300_comigcmiple: int = betterproto.uint32_field(14)
    unk3300_jhjnopcppad: int = betterproto.uint32_field(10)
    compound_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class CompoundDataNotify(betterproto.Message):
    compound_queue_data_list: List["CompoundQueueData"] = betterproto.message_field(7)
    unlock_compound_list: List[int] = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class CompoundUnlockNotify(betterproto.Message):
    compound_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class ContentAuditData(betterproto.Message):
    type: str = betterproto.string_field(1)
    content: str = betterproto.string_field(2)
    auto_pass_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ContentAuditField(betterproto.Message):
    segment_list: List["ContentAuditData"] = betterproto.message_field(1)
    name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ContentAuditInfo(betterproto.Message):
    is_open: bool = betterproto.bool_field(1)
    content: str = betterproto.string_field(2)
    submit_count: int = betterproto.uint32_field(3)
    audit_state: "AuditState" = betterproto.enum_field(4)
    submit_limit: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CookRecipeData(betterproto.Message):
    proficiency: int = betterproto.uint32_field(8)
    recipe_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class CookDataNotify(betterproto.Message):
    recipe_data_list: List["CookRecipeData"] = betterproto.message_field(15)
    grade: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class CookGradeDataNotify(betterproto.Message):
    grade: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class CookRecipeDataNotify(betterproto.Message):
    recipe_data: "CookRecipeData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CoopCg(betterproto.Message):
    id: int = betterproto.uint32_field(5)
    is_unlock: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class CoopCgShowNotify(betterproto.Message):
    cg_list: List[int] = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class CoopCgUpdateNotify(betterproto.Message):
    cg_list: List[int] = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class CoopPoint(betterproto.Message):
    self_confidence: int = betterproto.uint32_field(6)
    state: "CoopPointState" = betterproto.enum_field(14)
    id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CoopReward(betterproto.Message):
    id: int = betterproto.uint32_field(5)
    state: "CoopRewardState" = betterproto.enum_field(6)


@dataclass(eq=False, repr=False)
class CoopChapter(betterproto.Message):
    id: int = betterproto.uint32_field(9)
    coop_point_list: List["CoopPoint"] = betterproto.message_field(12)
    unk3300_mookblfkolc: List[int] = betterproto.uint32_field(6)
    state: "CoopChapterState" = betterproto.enum_field(7)
    unk3300_kdlgloiiinh: int = betterproto.uint32_field(11)
    coop_reward_list: List["CoopReward"] = betterproto.message_field(3)
    unk3300_mjlmjbmgjpp: List[int] = betterproto.uint32_field(4)
    coop_cg_list: List["CoopCg"] = betterproto.message_field(2)
    seen_ending_map: Dict[int, int] = betterproto.map_field(
        15, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    unk3300_kmjhimbigjf: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class CoopChapterUpdateNotify(betterproto.Message):
    chapter_list: List["CoopChapter"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CoopDataNotify(betterproto.Message):
    is_have_progress: bool = betterproto.bool_field(11)
    cur_coop_point: int = betterproto.uint32_field(1)
    viewed_chapter_list: List[int] = betterproto.uint32_field(6)
    chapter_list: List["CoopChapter"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CoopPointUpdateNotify(betterproto.Message):
    coop_point: "CoopPoint" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class CoopProgressUpdateNotify(betterproto.Message):
    cur_coop_point: int = betterproto.uint32_field(4)
    is_have_progress: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class CoopRewardUpdateNotify(betterproto.Message):
    reward_list: List["CoopReward"] = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class CreateGadgetInfo(betterproto.Message):
    born_type: "GadgetBornType" = betterproto.enum_field(1)
    chest: "CreateGadgetInfoChest" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CreateGadgetInfoChest(betterproto.Message):
    chest_drop_id: int = betterproto.uint32_field(1)
    is_show_cutscene: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CreateEntityInfo(betterproto.Message):
    level: int = betterproto.uint32_field(5)
    pos: "Vector" = betterproto.message_field(6)
    rot: "Vector" = betterproto.message_field(7)
    scene_id: int = betterproto.uint32_field(10)
    room_id: int = betterproto.uint32_field(11)
    client_unique_id: int = betterproto.uint32_field(12)
    monster_id: int = betterproto.uint32_field(1, group="entity")
    npc_id: int = betterproto.uint32_field(2, group="entity")
    gadget_id: int = betterproto.uint32_field(3, group="entity")
    item_id: int = betterproto.uint32_field(4, group="entity")
    gadget: "CreateGadgetInfo" = betterproto.message_field(
        13, group="entity_create_info"
    )


@dataclass(eq=False, repr=False)
class ServerMassiveEntity(betterproto.Message):
    entity_type: int = betterproto.uint32_field(1)
    config_id: int = betterproto.uint32_field(2)
    runtime_id: int = betterproto.uint32_field(3)
    authority_peer_id: int = betterproto.uint32_field(4)
    obj_id: int = betterproto.int64_field(5)
    water_info: "MassiveWaterInfo" = betterproto.message_field(6, group="entity_info")
    grass_info: "MassiveGrassInfo" = betterproto.message_field(7, group="entity_info")
    box_info: "MassiveBoxInfo" = betterproto.message_field(8, group="entity_info")


@dataclass(eq=False, repr=False)
class CreateMassiveEntityNotify(betterproto.Message):
    massive_entity_list: List["ServerMassiveEntity"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CreateMassiveEntityReq(betterproto.Message):
    massive_entity_list: List["ClientMassiveEntity"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CreateMassiveEntityRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(10)


@dataclass(eq=False, repr=False)
class CreateVehicleReq(betterproto.Message):
    pos: "Vector" = betterproto.message_field(11)
    vehicle_id: int = betterproto.uint32_field(4)
    scene_point_id: int = betterproto.uint32_field(3)
    rot: "Vector" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class CreateVehicleRsp(betterproto.Message):
    entity_id: int = betterproto.uint32_field(5)
    vehicle_id: int = betterproto.uint32_field(8)
    retcode: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class CrystalLinkDungeonAvatarInfo(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(4)
    is_trial: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class CrystalLinkDungeonInfoNotify(betterproto.Message):
    buff_info_list: List["CrystalLinkBuffInfo"] = betterproto.message_field(11)
    level_id: int = betterproto.uint32_field(5)
    is_upper_part: bool = betterproto.bool_field(13)
    difficulty_id: int = betterproto.uint32_field(14)
    dungeon_avatar_info_list: List[
        "CrystalLinkDungeonAvatarInfo"
    ] = betterproto.message_field(12)
    init_gallery_progress: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CrystalLinkDungeonSettleInfo(betterproto.Message):
    level_id: int = betterproto.uint32_field(9)
    final_score: int = betterproto.uint32_field(12)
    kill_normal_monster_num: int = betterproto.uint32_field(8)
    difficulty_id: int = betterproto.uint32_field(3)
    kill_elite_monster_num: int = betterproto.uint32_field(2)
    is_new_record: bool = betterproto.bool_field(10)


@dataclass(eq=False, repr=False)
class CrystalLinkEnterDungeonReq(betterproto.Message):
    team_info_list: List["CrystalLinkTeamInfo"] = betterproto.message_field(13)
    difficulty_id: int = betterproto.uint32_field(5)
    level_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class CrystalLinkEnterDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(5)
    difficulty_id: int = betterproto.uint32_field(15)
    level_id: int = betterproto.uint32_field(7)
    team_info_list: List["CrystalLinkTeamInfo"] = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class CrystalLinkRestartDungeonReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CrystalLinkRestartDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(9)


@dataclass(eq=False, repr=False)
class CustomDungeonBlock(betterproto.Message):
    block_id: int = betterproto.uint32_field(6)
    rot: "Vector" = betterproto.message_field(12)
    pos: "Vector" = betterproto.message_field(13)
    guid: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class CustomDungeonRoom(betterproto.Message):
    room_id: int = betterproto.uint32_field(15)
    block_list: List["CustomDungeonBlock"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class CustomDungeonSetting(betterproto.Message):
    start_room_id: int = betterproto.uint32_field(3)
    time_limit: int = betterproto.uint32_field(9)
    open_room_list: List[int] = betterproto.uint32_field(14)
    coin_limit: int = betterproto.uint32_field(5)
    is_forbid_skill: bool = betterproto.bool_field(7)
    is_arrive_finish: bool = betterproto.bool_field(6)
    life_num: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class CustomDungeon(betterproto.Message):
    dungeon_id: int = betterproto.uint32_field(2)
    room_list: List["CustomDungeonRoom"] = betterproto.message_field(7)
    setting: "CustomDungeonSetting" = betterproto.message_field(8)
    dungeon_guid: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class CustomDungeonAbstract(betterproto.Message):
    unk3300_ejgbhghlfpi: int = betterproto.uint32_field(7)
    last_publish_time: int = betterproto.uint32_field(12)
    brick_statistics_map: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    first_publish_time: int = betterproto.uint32_field(8)
    unk3300_jpfihkeclmf: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CustomDungeonAbstractMuipData(betterproto.Message):
    first_publish_time: int = betterproto.uint32_field(1)
    last_publish_time: int = betterproto.uint32_field(2)
    brick_statistics_map: Dict[int, int] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class CustomDungeonBanInfo(betterproto.Message):
    expire_time: int = betterproto.uint32_field(15)
    ban_type: "CustomDungeonBanType" = betterproto.enum_field(2)
    dungeon_guid: int = betterproto.uint64_field(13)


@dataclass(eq=False, repr=False)
class CustomDungeonSettingMuipData(betterproto.Message):
    is_arrive_finish: bool = betterproto.bool_field(1)
    coin_limit: int = betterproto.uint32_field(2)
    time_limit: int = betterproto.uint32_field(3)
    is_forbid_skill: bool = betterproto.bool_field(4)
    life_num: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CustomDungeonSocialMuipData(betterproto.Message):
    play_num: int = betterproto.uint32_field(1)
    like_num: int = betterproto.uint32_field(2)
    store_num: int = betterproto.uint32_field(3)
    win_num: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CustomDungeonBriefMuipData(betterproto.Message):
    dungeon_guid: int = betterproto.uint64_field(1)
    dungeon_id: int = betterproto.uint32_field(2)
    creator_nickname: str = betterproto.string_field(3)
    tag_list: List[int] = betterproto.uint32_field(4)
    setting: "CustomDungeonSettingMuipData" = betterproto.message_field(5)
    abstract: "CustomDungeonAbstractMuipData" = betterproto.message_field(6)
    social: "CustomDungeonSocialMuipData" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class CustomDungeonBatchBriefMuipData(betterproto.Message):
    brief_list: List["CustomDungeonBriefMuipData"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CustomDungeonBattleRecordMuipData(betterproto.Message):
    dungeon_guid: int = betterproto.uint64_field(1)
    min_cost_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CustomDungeonBattleRecordNotify(betterproto.Message):
    dungeon_guid: int = betterproto.uint64_field(1)
    min_cost_time: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class CustomDungeonSocial(betterproto.Message):
    win_num: int = betterproto.uint32_field(3)
    play_num: int = betterproto.uint32_field(11)
    like_num: int = betterproto.uint32_field(15)
    store_num: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class CustomDungeonBrief(betterproto.Message):
    dungeon_guid: int = betterproto.uint64_field(14)
    abstract: "CustomDungeonAbstract" = betterproto.message_field(8)
    tag_list: List[int] = betterproto.uint32_field(4)
    is_psn_platform: bool = betterproto.bool_field(9)
    social: "CustomDungeonSocial" = betterproto.message_field(10)
    state: "CustomDungeonState" = betterproto.enum_field(2)
    battle_min_cost_time: int = betterproto.uint32_field(15)
    dungeon_id: int = betterproto.uint32_field(3)
    setting: "CustomDungeonSetting" = betterproto.message_field(7)
    last_save_time: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class CustomDungeonOfficialNotify(betterproto.Message):
    try_type: "TryCustomDungeonType" = betterproto.enum_field(2)
    enter_type: "EnterCustomDungeonType" = betterproto.enum_field(1)
    official_black_coin_list: List[int] = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CustomDungeonRecoverNotify(betterproto.Message):
    custom_dungeon: "CustomDungeon" = betterproto.message_field(15)
    enter_type: "EnterCustomDungeonType" = betterproto.enum_field(1)
    try_type: "TryCustomDungeonType" = betterproto.enum_field(8)
    official_black_coin_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CustomDungeonResultInfo(betterproto.Message):
    is_liked: bool = betterproto.bool_field(13)
    is_arrive_finish: bool = betterproto.bool_field(2)
    dungeon_guid: int = betterproto.uint64_field(5)
    finish_type: "CustomDungeonFinishType" = betterproto.enum_field(8)
    child_challenge_list: List["ChallengeBrief"] = betterproto.message_field(1)
    is_stored: bool = betterproto.bool_field(6)
    time_cost: int = betterproto.uint32_field(9)
    got_coin_num: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CustomDungeonUpdateNotify(betterproto.Message):
    dungeon_brief: "CustomDungeonBrief" = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class CustomDungeonVerify(betterproto.Message):
    uid: int = betterproto.uint32_field(3)
    region: str = betterproto.string_field(13)
    timestamp: int = betterproto.uint32_field(5)
    dungeon_guid: int = betterproto.uint64_field(1)
    lang: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class CutSceneExtraParam(betterproto.Message):
    detail_param_list: List[float] = betterproto.double_field(13)


@dataclass(eq=False, repr=False)
class CutSceneBeginNotify(betterproto.Message):
    cutscene_id: int = betterproto.uint32_field(14)
    extra_param_list: List["CutSceneExtraParam"] = betterproto.message_field(13)
    is_wait_others: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class CutSceneEndNotify(betterproto.Message):
    cutscene_id: int = betterproto.uint32_field(4)
    retcode: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class CutSceneFinishNotify(betterproto.Message):
    cutscene_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CylinderRegionSize(betterproto.Message):
    radius: float = betterproto.float_field(7)
    height: float = betterproto.float_field(15)


@dataclass(eq=False, repr=False)
class DungeonEntryInfo(betterproto.Message):
    end_time: int = betterproto.uint32_field(14)
    unk3300_knkfcokmeci: int = betterproto.uint32_field(9)
    is_passed: bool = betterproto.bool_field(13)
    weekly_boss_resin_discount_info: "WeeklyBossResinDiscountInfo" = (
        betterproto.message_field(6)
    )
    dungeon_id: int = betterproto.uint32_field(8)
    unk3300_idmpgpkmmeh: int = betterproto.uint32_field(5)
    next_refresh_time: int = betterproto.uint32_field(10)
    unk3300_onlalcckiee: int = betterproto.uint32_field(3)
    start_time: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class DailyDungeonEntryInfo(betterproto.Message):
    recommend_dungeon_entry_info: "DungeonEntryInfo" = betterproto.message_field(6)
    dungeon_entry_config_id: int = betterproto.uint32_field(10)
    recommend_dungeon_id: int = betterproto.uint32_field(5)
    dungeon_entry_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class DailyTaskDataNotify(betterproto.Message):
    score_reward_id: int = betterproto.uint32_field(13)
    finished_num: int = betterproto.uint32_field(8)
    is_taken_score_reward: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class DailyTaskFilterCityReq(betterproto.Message):
    city_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class DailyTaskFilterCityRsp(betterproto.Message):
    city_id: int = betterproto.uint32_field(7)
    retcode: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class DailyTaskInfo(betterproto.Message):
    reward_id: int = betterproto.uint32_field(7)
    finish_progress: int = betterproto.uint32_field(12)
    is_finished: bool = betterproto.bool_field(2)
    daily_task_id: int = betterproto.uint32_field(5)
    progress: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class DailyTaskProgressNotify(betterproto.Message):
    info: "DailyTaskInfo" = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class DailyTaskScoreRewardNotify(betterproto.Message):
    reward_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class DailyTaskUnlockedCitiesNotify(betterproto.Message):
    unlocked_city_list: List[int] = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class ResVersionConfig(betterproto.Message):
    version: int = betterproto.uint32_field(1)
    relogin: bool = betterproto.bool_field(2)
    md5: str = betterproto.string_field(3)
    release_total_size: str = betterproto.string_field(4)
    version_suffix: str = betterproto.string_field(5)
    branch: str = betterproto.string_field(6)
    next_script_version: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class DataResVersionNotify(betterproto.Message):
    client_silence_data_version: int = betterproto.uint32_field(13)
    op_type: "DataResVersionNotifyDataResVersionOpType" = betterproto.enum_field(6)
    client_silence_version_suffix: str = betterproto.string_field(3)
    client_version_suffix: str = betterproto.string_field(9)
    is_data_need_relogin: bool = betterproto.bool_field(15)
    client_silence_md5: str = betterproto.string_field(12)
    client_data_version: int = betterproto.uint32_field(5)
    client_md5: str = betterproto.string_field(2)
    res_version_config: "ResVersionConfig" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class DealAddFriendReq(betterproto.Message):
    deal_add_friend_result: "DealAddFriendResultType" = betterproto.enum_field(7)
    target_uid: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class DealAddFriendRsp(betterproto.Message):
    target_uid: int = betterproto.uint32_field(15)
    deal_add_friend_result: "DealAddFriendResultType" = betterproto.enum_field(4)
    retcode: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class DeathZoneInfo(betterproto.Message):
    id: int = betterproto.uint32_field(3)
    is_open: bool = betterproto.bool_field(12)


@dataclass(eq=False, repr=False)
class DeathZoneInfoNotify(betterproto.Message):
    death_zone_info_list: List["DeathZoneInfo"] = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class DeathZoneObserveNotify(betterproto.Message):
    source_entity_id: int = betterproto.uint32_field(2)
    target_entity_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class DebugNotify(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    name: str = betterproto.string_field(2)
    retcode: "DebugNotifyRetcode" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class DelBackupAvatarTeamReq(betterproto.Message):
    backup_avatar_team_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class DelBackupAvatarTeamRsp(betterproto.Message):
    backup_avatar_team_id: int = betterproto.uint32_field(9)
    retcode: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class DeleteFriendNotify(betterproto.Message):
    target_uid: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class DeleteFriendReq(betterproto.Message):
    target_uid: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class DeleteFriendRsp(betterproto.Message):
    target_uid: int = betterproto.uint32_field(12)
    retcode: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class DelMailReq(betterproto.Message):
    mail_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class DelMailRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(2)
    mail_id_list: List[int] = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class DelScenePlayTeamEntityNotify(betterproto.Message):
    del_entity_id_list: List[int] = betterproto.uint32_field(5)
    scene_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class DelTeamEntityNotify(betterproto.Message):
    del_entity_id_list: List[int] = betterproto.uint32_field(14)
    scene_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class DeshretObeliskChestInfo(betterproto.Message):
    group_id: int = betterproto.uint32_field(9)
    config_id: int = betterproto.uint32_field(8)
    scene_id: int = betterproto.uint32_field(7)
    pos: "Vector" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class DeshretObeliskChestInfoNotify(betterproto.Message):
    chest_info_list: List["DeshretObeliskChestInfo"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class DestroyMassiveEntityNotify(betterproto.Message):
    massive_entity_list: List["ClientMassiveEntity"] = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class MaterialInfo(betterproto.Message):
    guid: int = betterproto.uint64_field(1)
    count: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class DestroyMaterialReq(betterproto.Message):
    material_list: List["MaterialInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DestroyMaterialRsp(betterproto.Message):
    item_id_list: List[int] = betterproto.uint32_field(10)
    item_count_list: List[int] = betterproto.uint32_field(12)
    retcode: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class DigActivityChangeGadgetStateReq(betterproto.Message):
    entity_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class DigActivityChangeGadgetStateRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(12)
    entity_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class DigActivityMarkPointChangeNotify(betterproto.Message):
    dig_mark_point_list: List["DigMarkPoint"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DisableRoguelikeTrapNotify(betterproto.Message):
    card_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class DoGachaReq(betterproto.Message):
    gacha_tag: str = betterproto.string_field(14)
    gacha_schedule_id: int = betterproto.uint32_field(6)
    gacha_type: int = betterproto.uint32_field(1)
    gacha_random: int = betterproto.uint32_field(9)
    gacha_times: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GachaTransferItem(betterproto.Message):
    item: "ItemParam" = betterproto.message_field(1)
    is_transfer_item_new: bool = betterproto.bool_field(11)


@dataclass(eq=False, repr=False)
class GachaItem(betterproto.Message):
    unk3300_bgiojbjfmfl: bool = betterproto.bool_field(8)
    transfer_items: List["GachaTransferItem"] = betterproto.message_field(6)
    unk3300_jnoohbnjfie: bool = betterproto.bool_field(13)
    gacha_item: "ItemParam" = betterproto.message_field(5)
    token_item_list: List["ItemParam"] = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class DoGachaRsp(betterproto.Message):
    unk3300_ohfmhihjhpj: bool = betterproto.bool_field(1812)
    unk3300_jlelmhelidc: int = betterproto.uint32_field(3)
    gacha_item_list: List["GachaItem"] = betterproto.message_field(9)
    unk3300_hbiliaeihnk: bool = betterproto.bool_field(1887)
    gacha_type: int = betterproto.uint32_field(10)
    unk3300_opgahaghepf: int = betterproto.uint32_field(6)
    unk3300_nmokgfgdffc: int = betterproto.uint32_field(1)
    unk3300_bllmpajncpi: int = betterproto.uint32_field(5)
    gacha_times: int = betterproto.uint32_field(4)
    unk3300_glpmiembggl: int = betterproto.uint32_field(15)
    unk3300_keijfmkakdh: int = betterproto.uint32_field(12)
    unk3300_dbfmkamnpcl: int = betterproto.uint32_field(13)
    unk3300_jlbflpemapp: int = betterproto.uint32_field(8)
    unk3300_medmcpfcioo: int = betterproto.uint32_field(2)
    unk3300_hlanonbcblm: int = betterproto.uint32_field(1550)
    unk3300_plfmmofngag: int = betterproto.uint32_field(7)
    gacha_schedule_id: int = betterproto.uint32_field(14)
    daily_gacha_times: int = betterproto.uint32_field(467)
    retcode: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class DoRoguelikeDungeonCardGachaReq(betterproto.Message):
    cell_id: int = betterproto.uint32_field(5)
    dungeon_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class DoRoguelikeDungeonCardGachaRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(11)
    is_can_refresh: bool = betterproto.bool_field(6)
    card_list: List[int] = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class DoSetPlayerBornDataNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class DraftGuestReplyInviteNotify(betterproto.Message):
    is_agree: bool = betterproto.bool_field(1)
    guest_uid: int = betterproto.uint32_field(13)
    draft_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class DraftGuestReplyInviteReq(betterproto.Message):
    is_agree: bool = betterproto.bool_field(4)
    draft_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class DraftGuestReplyInviteRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(7)
    draft_id: int = betterproto.uint32_field(13)
    is_agree: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class DraftGuestReplyTwiceConfirmNotify(betterproto.Message):
    is_agree: bool = betterproto.bool_field(14)
    draft_id: int = betterproto.uint32_field(15)
    guest_uid: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class DraftGuestReplyTwiceConfirmReq(betterproto.Message):
    is_agree: bool = betterproto.bool_field(8)
    draft_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class DraftGuestReplyTwiceConfirmRsp(betterproto.Message):
    draft_id: int = betterproto.uint32_field(5)
    retcode: int = betterproto.int32_field(11)
    is_agree: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class DraftInviteFailInfo(betterproto.Message):
    reason: "DraftInviteFailReason" = betterproto.enum_field(6)
    uid: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class DraftInviteResultNotify(betterproto.Message):
    is_all_agree: bool = betterproto.bool_field(11)
    draft_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class DraftOwnerInviteNotify(betterproto.Message):
    invite_deadline_time: int = betterproto.uint32_field(5)
    draft_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class DraftOwnerStartInviteReq(betterproto.Message):
    draft_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class DraftOwnerStartInviteRsp(betterproto.Message):
    invite_fail_info_list: List["DraftInviteFailInfo"] = betterproto.message_field(12)
    draft_id: int = betterproto.uint32_field(4)
    retcode: int = betterproto.int32_field(2)
    wrong_uid: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class DraftOwnerTwiceConfirmNotify(betterproto.Message):
    draft_id: int = betterproto.uint32_field(6)
    twice_confirm_deadline_time: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class DraftTwiceConfirmResultNotify(betterproto.Message):
    is_all_agree: bool = betterproto.bool_field(14)
    draft_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DragonSpineChapterFinishNotify(betterproto.Message):
    chapter_id: int = betterproto.uint32_field(14)
    weapon_enhance_level: int = betterproto.uint32_field(12)
    schedule_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class DragonSpineChapterOpenNotify(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(9)
    chapter_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class DragonSpineChapterProgressChangeNotify(betterproto.Message):
    chapter_id: int = betterproto.uint32_field(9)
    schedule_id: int = betterproto.uint32_field(3)
    cur_progress: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class DragonSpineCoinChangeNotify(betterproto.Message):
    unk3300_imlkijaoadf: int = betterproto.uint32_field(11)
    schedule_id: int = betterproto.uint32_field(15)
    unk3300_fohjdgcakek: int = betterproto.uint32_field(3)
    unk3300_neocmgjceoj: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class DropHintNotify(betterproto.Message):
    item_id_list: List[int] = betterproto.uint32_field(12)
    position: "Vector" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class DropItemReq(betterproto.Message):
    pos: "Vector" = betterproto.message_field(12)
    store_type: "StoreType" = betterproto.enum_field(13)
    count: int = betterproto.uint32_field(4)
    guid: int = betterproto.uint64_field(9)


@dataclass(eq=False, repr=False)
class DropItemRsp(betterproto.Message):
    guid: int = betterproto.uint64_field(6)
    retcode: int = betterproto.int32_field(4)
    store_type: "StoreType" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamAvatar(betterproto.Message):
    avatar_info: "AvatarInfo" = betterproto.message_field(6)
    player_uid: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamChangeAvatarReq(betterproto.Message):
    avatar_guid_list: List[int] = betterproto.uint64_field(7)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamChangeAvatarRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamCreateReq(betterproto.Message):
    dungeon_id: int = betterproto.uint32_field(3)
    point_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamCreateRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamDismissNotify(betterproto.Message):
    reason: "DungeonCandidateTeamPlayerDismissReason" = betterproto.enum_field(7)
    player_uid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamInfoNotify(betterproto.Message):
    ready_player_uid: List[int] = betterproto.uint32_field(2)
    match_type: int = betterproto.uint32_field(12)
    dungeon_id: int = betterproto.uint32_field(8)
    avatar_list: List["DungeonCandidateTeamAvatar"] = betterproto.message_field(1)
    player_state_map: Dict[
        int, "DungeonCandidateTeamPlayerState"
    ] = betterproto.map_field(10, betterproto.TYPE_UINT32, betterproto.TYPE_ENUM)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamInviteNotify(betterproto.Message):
    valid_deadline_time_sec: int = betterproto.uint32_field(11)
    player_uid: int = betterproto.uint32_field(4)
    dungeon_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamInviteReq(betterproto.Message):
    player_uids: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamInviteRsp(betterproto.Message):
    invalid_player_uids: List[int] = betterproto.uint32_field(11)
    retcode: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamKickReq(betterproto.Message):
    player_uid: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamKickRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamLeaveReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamLeaveRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(12)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamPlayerLeaveNotify(betterproto.Message):
    player_uid: int = betterproto.uint32_field(7)
    reason: "DungeonCandidateTeamPlayerLeaveReason" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamRefuseNotify(betterproto.Message):
    player_uid: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamReplyInviteReq(betterproto.Message):
    is_accept: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamReplyInviteRsp(betterproto.Message):
    is_trans_point: bool = betterproto.bool_field(1)
    retcode: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamSetChangingAvatarReq(betterproto.Message):
    is_changing_avatar: bool = betterproto.bool_field(11)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamSetChangingAvatarRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(9)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamSetReadyReq(betterproto.Message):
    is_ready: bool = betterproto.bool_field(12)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamSetReadyRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class DungeonChallengeBeginNotify(betterproto.Message):
    challenge_index: int = betterproto.uint32_field(3)
    father_index: int = betterproto.uint32_field(13)
    group_id: int = betterproto.uint32_field(15)
    uid_list: List[int] = betterproto.uint32_field(8)
    challenge_id: int = betterproto.uint32_field(7)
    param_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class EffigyChallengeDungeonResultInfo(betterproto.Message):
    challenge_score: int = betterproto.uint32_field(12)
    challenge_max_score: int = betterproto.uint32_field(8)
    is_success: bool = betterproto.bool_field(2)
    is_in_time_limit: bool = betterproto.bool_field(1)
    challenge_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class PotionDungeonResultInfo(betterproto.Message):
    left_time: int = betterproto.uint32_field(7)
    mode_id: int = betterproto.uint32_field(13)
    stage_id: int = betterproto.uint32_field(1)
    level_id: int = betterproto.uint32_field(2)
    final_score: int = betterproto.uint32_field(15)
    difficulty_level: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class StrengthenPointData(betterproto.Message):
    unk3300_hikdekipcpb: int = betterproto.uint32_field(1)
    unk3300_nnkpollbldo: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class DungeonChallengeFinishNotify(betterproto.Message):
    is_new_record: bool = betterproto.bool_field(9)
    current_value: int = betterproto.uint32_field(5)
    finish_type: "ChallengeFinishType" = betterproto.enum_field(3)
    strengthen_point_data_map: Dict[int, "StrengthenPointData"] = betterproto.map_field(
        11, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    challenge_record_type: int = betterproto.uint32_field(2)
    is_success: bool = betterproto.bool_field(8)
    challenge_index: int = betterproto.uint32_field(12)
    time_cost: int = betterproto.uint32_field(7)
    channeller_slab_loop_dungeon_result_info: "ChannelerSlabLoopDungeonResultInfo" = (
        betterproto.message_field(1545, group="detail")
    )
    effigy_challenge_dungeon_result_info: "EffigyChallengeDungeonResultInfo" = (
        betterproto.message_field(76, group="detail")
    )
    potion_dungeon_result_info: "PotionDungeonResultInfo" = betterproto.message_field(
        216, group="detail"
    )
    custom_dungeon_result_info: "CustomDungeonResultInfo" = betterproto.message_field(
        1678, group="detail"
    )


@dataclass(eq=False, repr=False)
class DungeonDataNotify(betterproto.Message):
    dungeon_data_map: Dict[int, int] = betterproto.map_field(
        7, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class DungeonDieOptionReq(betterproto.Message):
    die_option: "PlayerDieOption" = betterproto.enum_field(5)
    is_quit_immediately: bool = betterproto.bool_field(14)


@dataclass(eq=False, repr=False)
class DungeonDieOptionRsp(betterproto.Message):
    revive_count: int = betterproto.uint32_field(2)
    die_option: "PlayerDieOption" = betterproto.enum_field(7)
    retcode: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class DungeonEnterPosInfo(betterproto.Message):
    quest_id: int = betterproto.uint32_field(6)
    point_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class DungeonEntryCond(betterproto.Message):
    cond_reason: "DungeonEntryBlockReason" = betterproto.enum_field(2)
    param1: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DungeonEntryInfoReq(betterproto.Message):
    scene_id: int = betterproto.uint32_field(2)
    scene_point_id_list: List["Uint32Pair"] = betterproto.message_field(3)
    point_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class DungeonEntryPointInfo(betterproto.Message):
    scene_id: int = betterproto.uint32_field(12)
    dungeon_entry_list: List["DungeonEntryInfo"] = betterproto.message_field(14)
    recommend_dungeon_id: int = betterproto.uint32_field(4)
    point_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DungeonEntryInfoRsp(betterproto.Message):
    dungeon_entry_list: List["DungeonEntryInfo"] = betterproto.message_field(8)
    recommend_dungeon_id: int = betterproto.uint32_field(15)
    dungeon_entry_point_list: List["DungeonEntryPointInfo"] = betterproto.message_field(
        10
    )
    retcode: int = betterproto.int32_field(14)
    point_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class DungeonEntryToBeExploreNotify(betterproto.Message):
    scene_id: int = betterproto.uint32_field(6)
    dungeon_entry_scene_point_id: int = betterproto.uint32_field(3)
    dungeon_entry_config_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class DungeonFollowNotify(betterproto.Message):
    target_uid: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class DungeonGetStatueDropReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class DungeonGetStatueDropRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class DungeonInterruptChallengeReq(betterproto.Message):
    challenge_id: int = betterproto.uint32_field(12)
    group_id: int = betterproto.uint32_field(5)
    challenge_index: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class DungeonInterruptChallengeRsp(betterproto.Message):
    group_id: int = betterproto.uint32_field(10)
    challenge_id: int = betterproto.uint32_field(5)
    retcode: int = betterproto.int32_field(12)
    challenge_index: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class DungeonPlayerDieNotify(betterproto.Message):
    strengthen_point_data_map: Dict[int, "StrengthenPointData"] = betterproto.map_field(
        7, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    die_type: "PlayerDieType" = betterproto.enum_field(8)
    revive_count: int = betterproto.uint32_field(3)
    wait_time: int = betterproto.uint32_field(4)
    dungeon_id: int = betterproto.uint32_field(6)
    murderer_entity_id: int = betterproto.uint32_field(11)
    monster_id: int = betterproto.uint32_field(10, group="entity")
    gadget_id: int = betterproto.uint32_field(14, group="entity")


@dataclass(eq=False, repr=False)
class DungeonPlayerDieReq(betterproto.Message):
    die_type: "PlayerDieType" = betterproto.enum_field(4)
    dungeon_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class DungeonPlayerDieRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class DungeonRestartInviteNotify(betterproto.Message):
    dungeon_id: int = betterproto.uint32_field(8)
    cd: int = betterproto.uint32_field(5)
    player_uid: int = betterproto.uint32_field(6)
    point_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class DungeonRestartInviteReplyNotify(betterproto.Message):
    player_uid: int = betterproto.uint32_field(11)
    is_accept: bool = betterproto.bool_field(12)


@dataclass(eq=False, repr=False)
class DungeonRestartInviteReplyReq(betterproto.Message):
    is_accept: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class DungeonRestartInviteReplyRsp(betterproto.Message):
    is_trans_point: bool = betterproto.bool_field(14)
    retcode: int = betterproto.int32_field(10)
    is_accept: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class DungeonRestartReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class DungeonRestartResultNotify(betterproto.Message):
    is_add_accept: bool = betterproto.bool_field(9)


@dataclass(eq=False, repr=False)
class DungeonRestartRsp(betterproto.Message):
    dungeon_id: int = betterproto.uint32_field(13)
    retcode: int = betterproto.int32_field(3)
    point_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class DungeonReviseLevelNotify(betterproto.Message):
    dungeon_id: int = betterproto.uint32_field(2)
    unk3300_almeclchhfa: int = betterproto.uint32_field(3)
    unk3300_dkimmkihdck: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class DungeonSettleExhibitionInfo(betterproto.Message):
    player_info: "OnlinePlayerInfo" = betterproto.message_field(14)
    card_list: List["ExhibitionDisplayInfo"] = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class EffigyChallengeV2SettleInfo(betterproto.Message):
    challenge_mode_difficulty: int = betterproto.uint32_field(13)
    unk3300_mhoiipjkamn: int = betterproto.uint32_field(14)
    unk3300_pheimlokijg: int = betterproto.uint32_field(11)
    unk3300_onkpgfoldfl: int = betterproto.uint32_field(12)
    unk3300_ngbkndhjpcp: bool = betterproto.bool_field(5)
    unk3300_akmpcdikbjd: bool = betterproto.bool_field(9)


@dataclass(eq=False, repr=False)
class InstableSprayDungeonSettleInfo(betterproto.Message):
    stage_id: int = betterproto.uint32_field(12)
    difficulty: int = betterproto.uint32_field(15)
    is_new_record: bool = betterproto.bool_field(9)
    score_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ParamList(betterproto.Message):
    param_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class RoguelikeSettleCoinInfo(betterproto.Message):
    unk3300_mfkoimoncla: int = betterproto.uint32_field(10)
    unk3300_lfekgbbamhe: int = betterproto.uint32_field(12)
    coin_c: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class RoguelikeDungeonSettleInfo(betterproto.Message):
    stage_id: int = betterproto.uint32_field(9)
    unk3300_gmmecmpdjmi: int = betterproto.uint32_field(8)
    unk3300_pbelmojkkhp: int = betterproto.uint32_field(4)
    cur_level: int = betterproto.uint32_field(14)
    unk3300_ahieengkpfa: bool = betterproto.bool_field(10)
    unk3300_bplkjmiokhm: bool = betterproto.bool_field(15)
    finished_challenge_cell_num_map: Dict[
        int, "RoguelikeSettleCoinInfo"
    ] = betterproto.map_field(6, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE)


@dataclass(eq=False, repr=False)
class SummerTimeV2DungeonSettleInfo(betterproto.Message):
    unk3300_jhbchfhagfo: int = betterproto.uint32_field(10)
    is_success: bool = betterproto.bool_field(1)
    unk3300_bnnmnckehho: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class TowerLevelEndNotify(betterproto.Message):
    unk3300_bopibkgamid: int = betterproto.uint32_field(2)
    finished_star_cond_list: List[int] = betterproto.uint32_field(6)
    unk3300_ahbgpmbhpmo: int = betterproto.uint32_field(4)
    is_success: bool = betterproto.bool_field(15)
    reward_item_list: List["ItemParam"] = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class TrialAvatarFirstPassDungeonNotify(betterproto.Message):
    trial_avatar_index_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class WindFieldDungeonSettleInfo(betterproto.Message):
    unk3300_fjgfojbgbkm: List[int] = betterproto.uint32_field(7)
    fail_reason: "WindFieldDungeonFailReason" = betterproto.enum_field(3)
    unk3300_emcoilgacoc: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DungeonSettleNotify(betterproto.Message):
    settle_show: Dict[int, "ParamList"] = betterproto.map_field(
        6, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    strengthen_point_data_map: Dict[int, "StrengthenPointData"] = betterproto.map_field(
        7, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    exhibition_info_list: List[
        "DungeonSettleExhibitionInfo"
    ] = betterproto.message_field(12)
    use_time: int = betterproto.uint32_field(14)
    is_success: bool = betterproto.bool_field(10)
    close_time: int = betterproto.uint32_field(15)
    dungeon_id: int = betterproto.uint32_field(9)
    result: int = betterproto.uint32_field(5)
    fail_cond_list: List[int] = betterproto.uint32_field(11)
    create_player_uid: int = betterproto.uint32_field(2)
    tower_level_end_notify: "TowerLevelEndNotify" = betterproto.message_field(
        1089, group="detail"
    )
    trial_avatar_first_pass_dungeon_notify: "TrialAvatarFirstPassDungeonNotify" = (
        betterproto.message_field(1117, group="detail")
    )
    channeller_slab_loop_dungeon_result_info: "ChannelerSlabLoopDungeonResultInfo" = (
        betterproto.message_field(1394, group="detail")
    )
    effigy_challenge_dungeon_result_info: "EffigyChallengeDungeonResultInfo" = (
        betterproto.message_field(254, group="detail")
    )
    roguelike_dungeon_settle_info: "RoguelikeDungeonSettleInfo" = (
        betterproto.message_field(1888, group="detail")
    )
    crystal_link_settle_info: "CrystalLinkDungeonSettleInfo" = (
        betterproto.message_field(1840, group="detail")
    )
    summer_time_v2_dungeon_settle_info: "SummerTimeV2DungeonSettleInfo" = (
        betterproto.message_field(285, group="detail")
    )
    instable_spray_settle_info: "InstableSprayDungeonSettleInfo" = (
        betterproto.message_field(1794, group="detail")
    )
    wind_field_dungeon_settle_info: "WindFieldDungeonSettleInfo" = (
        betterproto.message_field(1522, group="detail")
    )
    effigy_challenge_v2_settle_info: "EffigyChallengeV2SettleInfo" = (
        betterproto.message_field(1913, group="detail")
    )


@dataclass(eq=False, repr=False)
class DungeonShowReminderNotify(betterproto.Message):
    reminder_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class DungeonSlipRevivePointActivateReq(betterproto.Message):
    slip_revive_point_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class DungeonSlipRevivePointActivateRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)
    slip_revive_point_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class DungeonWayPointActivateReq(betterproto.Message):
    way_point_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class DungeonWayPointActivateRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    way_point_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class DungeonWayPointNotify(betterproto.Message):
    is_add: bool = betterproto.bool_field(12)
    active_way_point_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class DynamicSvoNode(betterproto.Message):
    area: int = betterproto.int32_field(3)
    refer_pos: "Vector" = betterproto.message_field(15)
    index: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class DynamicLayerNodes(betterproto.Message):
    level: int = betterproto.int32_field(7)
    nodes: List["DynamicSvoNode"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class DynamicNodes(betterproto.Message):
    nodes: List["DynamicLayerNodes"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class EchoNotify(betterproto.Message):
    content: str = betterproto.string_field(2)
    seq_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class EchoShellTakeRewardReq(betterproto.Message):
    reward_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class EchoShellTakeRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(9)
    reward_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class EchoShellUpdateNotify(betterproto.Message):
    shell_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class EffigyChallengeInfoNotify(betterproto.Message):
    challenge_id: int = betterproto.uint32_field(6)
    difficulty_id: int = betterproto.uint32_field(2)
    challenge_score: int = betterproto.uint32_field(11)
    condition_id_list: List[int] = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class EffigyChallengeResultNotify(betterproto.Message):
    challenge_score: int = betterproto.uint32_field(8)
    is_success: bool = betterproto.bool_field(4)
    challenge_id: int = betterproto.uint32_field(13)
    challenge_max_score: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class EffigyChallengeV2ChooseSkillReq(betterproto.Message):
    challenge_mode_skill_no: int = betterproto.uint32_field(10)
    level_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class EffigyChallengeV2ChooseSkillRsp(betterproto.Message):
    challenge_mode_skill_no: int = betterproto.uint32_field(12)
    retcode: int = betterproto.int32_field(1)
    level_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class EffigyChallengeV2DungeonInfoNotify(betterproto.Message):
    challenge_mode_difficulty: int = betterproto.uint32_field(13)
    skill_no: int = betterproto.uint32_field(15)
    level_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class EffigyChallengeV2EnterDungeonReq(betterproto.Message):
    challenge_mode_skill_no: int = betterproto.uint32_field(10)
    challenge_mode_difficulty: int = betterproto.uint32_field(4)
    level_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class EffigyChallengeV2EnterDungeonRsp(betterproto.Message):
    challenge_mode_difficulty: int = betterproto.uint32_field(3)
    challenge_mode_skill_no: int = betterproto.uint32_field(7)
    level_id: int = betterproto.uint32_field(10)
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class EffigyChallengeV2RestartDungeonReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class EffigyChallengeV2RestartDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class EndCameraSceneLookNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class EndCoinCollectPlaySingleModeReq(betterproto.Message):
    multistage_play_index: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class EndCoinCollectPlaySingleModeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class EnterChessDungeonReq(betterproto.Message):
    map_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class EnterChessDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)
    map_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class EnterCustomDungeonReq(betterproto.Message):
    dungeon_id: int = betterproto.uint32_field(7)
    enter_type: "EnterCustomDungeonType" = betterproto.enum_field(8)
    dungeon_guid: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class EnterCustomDungeonRsp(betterproto.Message):
    room_cost_map: Dict[int, int] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    enter_type: "EnterCustomDungeonType" = betterproto.enum_field(15)
    custom_dungeon: "CustomDungeon" = betterproto.message_field(12)
    retcode: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class EnterFishingReq(betterproto.Message):
    fish_pool_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class EnterFishingRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(10)
    fish_pool_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class EnterFungusFighterPlotDungeonReq(betterproto.Message):
    fungus_id_list: List[int] = betterproto.uint32_field(11)
    dungeon_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class EnterFungusFighterPlotDungeonRsp(betterproto.Message):
    fungus_id_list: List[int] = betterproto.uint32_field(14)
    dungeon_id: int = betterproto.uint32_field(8)
    retcode: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class EnterFungusFighterTrainingDungeonReq(betterproto.Message):
    dungeon_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class EnterFungusFighterTrainingDungeonRsp(betterproto.Message):
    dungeon_id: int = betterproto.uint32_field(12)
    retcode: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class EnterIrodoriChessDungeonReq(betterproto.Message):
    is_hard_map: bool = betterproto.bool_field(12)
    level_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class EnterIrodoriChessDungeonRsp(betterproto.Message):
    is_hard_map: bool = betterproto.bool_field(5)
    level_id: int = betterproto.uint32_field(15)
    retcode: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class EnterMechanicusDungeonReq(betterproto.Message):
    difficult_level: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class EnterMechanicusDungeonRsp(betterproto.Message):
    wrong_uid: int = betterproto.uint32_field(13)
    difficult_level: int = betterproto.uint32_field(15)
    retcode: int = betterproto.int32_field(12)
    dungeon_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class RogueDiaryAvatar(betterproto.Message):
    level: int = betterproto.uint32_field(10)
    disable_status_list: List["RogueDiaryAvatarDisableStatus"] = betterproto.enum_field(
        7
    )
    tired_round: int = betterproto.uint32_field(2)
    avatar: "ActivityDungeonAvatar" = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class EnterRogueDiaryDungeonReq(betterproto.Message):
    chosen_card_list: List[int] = betterproto.uint32_field(5)
    chosen_avatar_list: List["RogueDiaryAvatar"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class EnterRogueDiaryDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(9)


@dataclass(eq=False, repr=False)
class RogueCellInfo(betterproto.Message):
    dungeon_id: int = betterproto.uint32_field(1)
    cell_config_id: int = betterproto.uint32_field(14)
    cell_id: int = betterproto.uint32_field(2)
    state: "RogueCellState" = betterproto.enum_field(9)
    cell_type: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class EnterRoguelikeDungeonNotify(betterproto.Message):
    bonus_resource_prop: float = betterproto.float_field(11)
    unk3300_dbdabniinel: int = betterproto.uint32_field(4)
    rune_record_list: List["RoguelikeRuneRecord"] = betterproto.message_field(12)
    cur_level: int = betterproto.uint32_field(9)
    dungeon_id: int = betterproto.uint32_field(5)
    revise_monster_level: int = betterproto.uint32_field(1188)
    unk3300_pkpokoaaokf: bool = betterproto.bool_field(1469)
    explored_cell_list: List[int] = betterproto.uint32_field(2)
    onstage_avatar_guid_list: List[int] = betterproto.uint64_field(15)
    stage_id: int = betterproto.uint32_field(6)
    unk3300_klfdkocgahn: int = betterproto.uint32_field(2046)
    unk3300_gbhhledagam: bool = betterproto.bool_field(3)
    unk3300_iiijddnjebb: int = betterproto.uint32_field(1)
    backstage_avatar_guid_list: List[int] = betterproto.uint64_field(7)
    unk3300_pkdlojadipa: int = betterproto.uint32_field(10)
    cell_info_map: Dict[int, "RogueCellInfo"] = betterproto.map_field(
        14, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class EnterSceneDoneReq(betterproto.Message):
    enter_scene_token: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class EnterSceneDoneRsp(betterproto.Message):
    enter_scene_token: int = betterproto.uint32_field(1)
    retcode: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class EnterScenePeerNotify(betterproto.Message):
    enter_scene_token: int = betterproto.uint32_field(7)
    host_peer_id: int = betterproto.uint32_field(12)
    peer_id: int = betterproto.uint32_field(14)
    dest_scene_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class EnterSceneReadyReq(betterproto.Message):
    enter_scene_token: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class EnterSceneReadyRsp(betterproto.Message):
    enter_scene_token: int = betterproto.uint32_field(11)
    retcode: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class EnterSceneWeatherAreaNotify(betterproto.Message):
    weather_gadget_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class EnterTransPointRegionNotify(betterproto.Message):
    point_id: int = betterproto.uint32_field(1)
    scene_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class EnterTrialAvatarActivityDungeonReq(betterproto.Message):
    enter_point_id: int = betterproto.uint32_field(7)
    activity_id: int = betterproto.uint32_field(1)
    trial_avatar_index_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class EnterTrialAvatarActivityDungeonRsp(betterproto.Message):
    trial_avatar_index_id: int = betterproto.uint32_field(2)
    retcode: int = betterproto.int32_field(1)
    activity_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class EnterWorldAreaReq(betterproto.Message):
    area_type: int = betterproto.uint32_field(8)
    area_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class EnterWorldAreaRsp(betterproto.Message):
    area_type: int = betterproto.uint32_field(15)
    retcode: int = betterproto.int32_field(11)
    area_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class EntityAiKillSelfNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class EntityAiSyncNotify(betterproto.Message):
    info_list: List["AiSyncInfo"] = betterproto.message_field(14)
    local_avatar_alerted_monster_list: List[int] = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class EntityAuthorityChangeNotify(betterproto.Message):
    authority_change_list: List["AuthorityChange"] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class EntityConfigHashEntry(betterproto.Message):
    entity_id: int = betterproto.uint32_field(4)
    hash_value: int = betterproto.int32_field(1)
    job_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class EntityConfigHashNotify(betterproto.Message):
    unk3300_namdikjilai: List["EntityConfigHashEntry"] = betterproto.message_field(1)
    unk3300_blbekmdgcmb: List["EntityConfigHashEntry"] = betterproto.message_field(2)
    unk3300_nlmphbgmoen: List["EntityConfigHashEntry"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class EntityFightPropChangeReasonNotify(betterproto.Message):
    prop_type: int = betterproto.uint32_field(5)
    param_list: List[int] = betterproto.uint32_field(7)
    entity_id: int = betterproto.uint32_field(8)
    reason: "PropChangeReason" = betterproto.enum_field(2)
    change_hp_reason: "ChangeHpReason" = betterproto.enum_field(9)
    change_energy_reason: "ChangeEnergyReason" = betterproto.enum_field(12)
    prop_delta: float = betterproto.float_field(10)


@dataclass(eq=False, repr=False)
class EntityFightPropNotify(betterproto.Message):
    fight_prop_map: Dict[int, float] = betterproto.map_field(
        9, betterproto.TYPE_UINT32, betterproto.TYPE_FLOAT
    )
    entity_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class EntityFightPropUpdateNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(15)
    fight_prop_map: Dict[int, float] = betterproto.map_field(
        7, betterproto.TYPE_UINT32, betterproto.TYPE_FLOAT
    )


@dataclass(eq=False, repr=False)
class EntityForceSyncReq(betterproto.Message):
    scene_time: int = betterproto.uint32_field(13)
    motion_info: "MotionInfo" = betterproto.message_field(10)
    entity_id: int = betterproto.uint32_field(5)
    room_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class EntityForceSyncRsp(betterproto.Message):
    entity_id: int = betterproto.uint32_field(12)
    scene_time: int = betterproto.uint32_field(2)
    fail_motion: "MotionInfo" = betterproto.message_field(11)
    retcode: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class EntityJumpNotify(betterproto.Message):
    pos: "Vector" = betterproto.message_field(6)
    jump_type: "EntityJumpNotifyType" = betterproto.enum_field(2)
    entity_id: int = betterproto.uint32_field(4)
    rot: "Vector" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class EntityMoveFailInfo(betterproto.Message):
    scene_time: int = betterproto.uint32_field(8)
    retcode: int = betterproto.int32_field(9)
    reliable_seq: int = betterproto.uint32_field(2)
    fail_motion: "MotionInfo" = betterproto.message_field(4)
    entity_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class EntityMoveInfo(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    motion_info: "MotionInfo" = betterproto.message_field(2)
    scene_time: int = betterproto.uint32_field(3)
    reliable_seq: int = betterproto.uint32_field(4)
    is_reliable: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class EntityMoveRoomNotify(betterproto.Message):
    dest_room_id: int = betterproto.uint32_field(1)
    entity_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class EntityPropNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(13)
    prop_map: Dict[int, "PropValue"] = betterproto.map_field(
        9, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class EntityTagChangeNotify(betterproto.Message):
    tag: str = betterproto.string_field(3)
    entity_id: int = betterproto.uint32_field(11)
    is_add: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class EquipParam(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    item_num: int = betterproto.uint32_field(2)
    item_level: int = betterproto.uint32_field(3)
    promote_level: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class EquipParamList(betterproto.Message):
    item_list: List["EquipParam"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class EquipRoguelikeRuneReq(betterproto.Message):
    rune_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class EquipRoguelikeRuneRsp(betterproto.Message):
    rune_list: List[int] = betterproto.uint32_field(6)
    retcode: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class EvtAiSyncCombatThreatInfoNotify(betterproto.Message):
    combat_threat_info_map: Dict[int, "AiThreatInfo"] = betterproto.map_field(
        11, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class EvtAiSyncSkillCdNotify(betterproto.Message):
    ai_cd_map: Dict[int, "AiSkillCdInfo"] = betterproto.map_field(
        14, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class EvtAnimatorParameterInfo(betterproto.Message):
    name_id: int = betterproto.int32_field(10)
    value: "AnimatorParameterValueInfo" = betterproto.message_field(7)
    entity_id: int = betterproto.uint32_field(14)
    is_server_cache: bool = betterproto.bool_field(9)


@dataclass(eq=False, repr=False)
class EvtAnimatorParameterNotify(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(9)
    animator_param_info: "EvtAnimatorParameterInfo" = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class EvtAnimatorStateChangedInfo(betterproto.Message):
    fade_duration: float = betterproto.float_field(4)
    unk3300_bkbpgiaobel: int = betterproto.uint32_field(11)
    unk3300_nmcclikmoen: int = betterproto.uint32_field(1)
    pos: "Vector" = betterproto.message_field(5)
    unk3300_klmekmgfgpd: bool = betterproto.bool_field(3)
    normalized_time_compact: int = betterproto.uint32_field(6)
    unk3300_meopkedjcin: bool = betterproto.bool_field(7)
    face_angle_compact: int = betterproto.int32_field(15)
    entity_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class EvtAnimatorStateChangedNotify(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(14)
    evt_animator_state_changed_info: "EvtAnimatorStateChangedInfo" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class EvtAvatarEnterFocusNotify(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(14)
    unk3300_npbldgpcdoc: bool = betterproto.bool_field(15)
    unk3300_ijhhdfdijma: bool = betterproto.bool_field(4)
    unk3300_nalgjblgnji: bool = betterproto.bool_field(13)
    unk3300_ooopphejkdi: bool = betterproto.bool_field(2)
    unk3300_kmafbmkjdak: bool = betterproto.bool_field(9)
    unk3300_lnlookdhjgf: bool = betterproto.bool_field(8)
    entity_id: int = betterproto.uint32_field(1)
    unk3300_gghcegjehnd: bool = betterproto.bool_field(11)
    unk3300_nlnibjafadg: bool = betterproto.bool_field(7)
    focus_forward: "Vector" = betterproto.message_field(3)
    unk3300_cdajjhipikh: bool = betterproto.bool_field(12)
    unk3300_fhhddnenedd: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class EvtAvatarExitFocusNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(7)
    forward_type: "ForwardType" = betterproto.enum_field(8)
    finish_forward: "Vector" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class EvtAvatarLockChairReq(betterproto.Message):
    position: "Vector" = betterproto.message_field(2)
    chair_id: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class EvtAvatarLockChairRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)
    chair_id: int = betterproto.uint64_field(14)
    entity_id: int = betterproto.uint32_field(9)
    position: "Vector" = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class EvtAvatarSitDownNotify(betterproto.Message):
    chair_id: int = betterproto.uint64_field(15)
    position: "Vector" = betterproto.message_field(14)
    entity_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class EvtAvatarStandUpNotify(betterproto.Message):
    unk3300_ebpacpnpkkj: int = betterproto.int32_field(13)
    chair_id: int = betterproto.uint64_field(3)
    entity_id: int = betterproto.uint32_field(5)
    unk3300_imngnllmefj: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class EvtAvatarUpdateFocusNotify(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(4)
    entity_id: int = betterproto.uint32_field(3)
    focus_forward: "Vector" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class EvtBeingHealedNotify(betterproto.Message):
    unk3300_lclofccijkh: float = betterproto.float_field(2)
    unk3300_ecnbkhhaddj: float = betterproto.float_field(3)
    target_id: int = betterproto.uint32_field(4)
    source_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class EvtBeingHitInfo(betterproto.Message):
    frame_num: int = betterproto.uint32_field(11)
    peer_id: int = betterproto.uint32_field(2)
    attack_result: "AttackResult" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class EvtBeingHitNotify(betterproto.Message):
    being_hit_info: "EvtBeingHitInfo" = betterproto.message_field(12)
    forward_type: "ForwardType" = betterproto.enum_field(11)


@dataclass(eq=False, repr=False)
class EvtBeingHitsCombineNotify(betterproto.Message):
    evt_being_hit_info_list: List["EvtBeingHitInfo"] = betterproto.message_field(9)
    forward_type: "ForwardType" = betterproto.enum_field(7)


@dataclass(eq=False, repr=False)
class EvtBulletDeactiveNotify(betterproto.Message):
    disappear_pos: "Vector" = betterproto.message_field(12)
    forward_type: "ForwardType" = betterproto.enum_field(11)
    entity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class EvtBulletHitNotify(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(2)
    unk3300_elnfdknghfp: int = betterproto.uint32_field(4)
    hit_normal: "Vector" = betterproto.message_field(9)
    unk3300_kanajbjhclg: int = betterproto.uint32_field(6)
    hit_point: "Vector" = betterproto.message_field(8)
    hit_collider_type: "HitColliderType" = betterproto.enum_field(10)
    entity_id: int = betterproto.uint32_field(14)
    forward_peer: int = betterproto.uint32_field(3)
    hit_box_index: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class EvtBulletMoveNotify(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(5)
    cur_pos: "Vector" = betterproto.message_field(4)
    entity_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class EvtCombatForceSetPosInfo(betterproto.Message):
    unk3300_lggmbnlmghb: int = betterproto.uint32_field(8)
    unk3300_ialigdpamfl: int = betterproto.uint32_field(7)
    target_pos: "Vector" = betterproto.message_field(1)
    entity_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class EvtCombatSteerMotionInfo(betterproto.Message):
    face_dir: "Vector" = betterproto.message_field(5)
    pos: "Vector" = betterproto.message_field(1)
    velocity: "Vector" = betterproto.message_field(8)
    entity_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class EvtCompensatePosDiffInfo(betterproto.Message):
    entity_id: int = betterproto.uint32_field(12)
    normalized_time_compact: int = betterproto.uint32_field(5)
    cur_hash: int = betterproto.uint32_field(7)
    face_angle_compact: int = betterproto.int32_field(11)
    cur_pos: "Vector" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class EvtCostStaminaNotify(betterproto.Message):
    cost_stamina: float = betterproto.float_field(4)
    skill_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class EvtCreateGadgetNotify(betterproto.Message):
    target_entity_id_list: List[int] = betterproto.uint32_field(1652)
    init_pos: "Vector" = betterproto.message_field(9)
    unk3300_dlbijfoonba: bool = betterproto.bool_field(15)
    owner_entity_id: int = betterproto.uint32_field(2)
    forward_type: "ForwardType" = betterproto.enum_field(3)
    target_lock_point_index_list: List[int] = betterproto.uint32_field(414)
    prop_owner_entity_id: int = betterproto.uint32_field(6)
    target_lock_point_index: int = betterproto.uint32_field(4)
    unk3300_ojhdjgafdnn: bool = betterproto.bool_field(1433)
    camp_id: int = betterproto.uint32_field(10)
    unk3300_ejnbiglgmii: bool = betterproto.bool_field(8)
    init_euler_angles: "Vector" = betterproto.message_field(12)
    is_peer_id_from_player: bool = betterproto.bool_field(609)
    room_id: int = betterproto.uint32_field(5)
    config_id: int = betterproto.uint32_field(14)
    camp_type: int = betterproto.uint32_field(13)
    guid: int = betterproto.uint64_field(7)
    entity_id: int = betterproto.uint32_field(1)
    target_entity_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class EvtDestroyGadgetNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(8)
    forward_type: "ForwardType" = betterproto.enum_field(10)


@dataclass(eq=False, repr=False)
class EvtDestroyServerGadgetNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class EvtDoSkillSuccNotify(betterproto.Message):
    caster_id: int = betterproto.uint32_field(15)
    forward_type: "ForwardType" = betterproto.enum_field(9)
    skill_id: int = betterproto.uint32_field(14)
    forward: "Vector" = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class EvtEntityRenderersChangedNotify(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(5)
    entity_id: int = betterproto.uint32_field(1)
    is_server_cache: bool = betterproto.bool_field(3)
    renderer_changed_info: "EntityRendererChangedInfo" = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class EvtEntityStartDieEndNotify(betterproto.Message):
    immediately: bool = betterproto.bool_field(9)
    forward_type: "ForwardType" = betterproto.enum_field(2)
    die_state_flag: int = betterproto.uint32_field(4)
    entity_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class EvtFaceToDirInfo(betterproto.Message):
    face_dir: "Vector" = betterproto.message_field(2)
    entity_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class EvtFaceToDirNotify(betterproto.Message):
    evt_face_to_dir_info: "EvtFaceToDirInfo" = betterproto.message_field(2)
    forward_type: "ForwardType" = betterproto.enum_field(9)


@dataclass(eq=False, repr=False)
class EvtFaceToEntityNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(10)
    forward_type: "ForwardType" = betterproto.enum_field(8)
    face_entity_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class EvtFixedRushMove(betterproto.Message):
    entity_id: int = betterproto.uint32_field(13)
    override_collider: str = betterproto.string_field(7)
    target_pos: "Vector" = betterproto.message_field(14)
    unk3300_bgolplhggpo: bool = betterproto.bool_field(8)
    animator_state_id_list: List[int] = betterproto.uint32_field(9)
    unk3300_bkeelcgolln: bool = betterproto.bool_field(12)
    speed: float = betterproto.float_field(10)


@dataclass(eq=False, repr=False)
class EvtGrapplingHookMove(betterproto.Message):
    target_pos: "Vector" = betterproto.message_field(4)
    entity_id: int = betterproto.uint32_field(10)
    speed: float = betterproto.float_field(2)
    unk3300_ndmhknfmpcj: float = betterproto.float_field(5)
    animator_state_id_list: List[int] = betterproto.uint32_field(11)
    unk3300_bgolplhggpo: bool = betterproto.bool_field(1)
    unk3300_mjaoalpcjml: float = betterproto.float_field(9)
    unk3300_bkeelcgolln: bool = betterproto.bool_field(15)
    override_collider: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class EvtHittingOtherInfo(betterproto.Message):
    peer_id: int = betterproto.uint32_field(2)
    attack_result: "AttackResult" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class EvtLightCoreMove(betterproto.Message):
    speed: float = betterproto.float_field(4)
    entity_id: int = betterproto.uint32_field(12)
    unk3300_blnijmmnagh: float = betterproto.float_field(1)
    unk3300_nhpedpjmcol: float = betterproto.float_field(5)
    target_pos: "Vector" = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class EvtLocalGadgetOwnerLeaveSceneNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class EvtMonsterDoBlink(betterproto.Message):
    entity_id: int = betterproto.uint32_field(14)
    target_pos: "Vector" = betterproto.message_field(9)
    target_rot: "Vector" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class EvtMotionInfoDuringSteerAttack(betterproto.Message):
    face_dir: "Vector" = betterproto.message_field(15)
    pos: "Vector" = betterproto.message_field(8)
    entity_id: int = betterproto.uint32_field(4)
    velocity: "Vector" = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class EvtRushMoveInfo(betterproto.Message):
    velocity: "Vector" = betterproto.message_field(8)
    state_name_hash: int = betterproto.int32_field(4)
    entity_id: int = betterproto.uint32_field(12)
    pos: "Vector" = betterproto.message_field(7)
    face_angle_compact: int = betterproto.int32_field(1)
    time_range: float = betterproto.float_field(13)
    unk3300_nebmddgpbon: "Vector" = betterproto.message_field(15)
    unk3300_fgapbjipjfg: "Vector" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class EvtRushMoveNotify(betterproto.Message):
    evt_rush_move_info: "EvtRushMoveInfo" = betterproto.message_field(1)
    forward_type: "ForwardType" = betterproto.enum_field(10)


@dataclass(eq=False, repr=False)
class EvtSetAttackTargetInfo(betterproto.Message):
    attack_target_id: int = betterproto.uint32_field(6)
    select_point_index: int = betterproto.uint32_field(3)
    entity_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class EvtSetAttackTargetNotify(betterproto.Message):
    evt_set_attack_target_info: "EvtSetAttackTargetInfo" = betterproto.message_field(13)
    forward_type: "ForwardType" = betterproto.enum_field(6)


@dataclass(eq=False, repr=False)
class EvtSyncEntityPositionInfo(betterproto.Message):
    state_hash: int = betterproto.uint32_field(10)
    face_angle_compact: int = betterproto.int32_field(4)
    pos: "Vector" = betterproto.message_field(14)
    entity_id: int = betterproto.uint32_field(1)
    normalized_time_compact: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class EvtSyncSkillAnchorPosition(betterproto.Message):
    skill_anchor_position: "Vector" = betterproto.message_field(12)
    entity_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class EvtSyncTransform(betterproto.Message):
    unk3300_jamklnfbbad: "Vector" = betterproto.message_field(15)
    entity_id: int = betterproto.uint32_field(13)
    unk3300_pmhflcopfbc: "Vector" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class ExclusiveRuleInfo(betterproto.Message):
    rule_type: int = betterproto.uint32_field(2)
    object_id_list: List[int] = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class ExclusiveRuleNotify(betterproto.Message):
    rule_info_list: List["ExclusiveRuleInfo"] = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class ExecuteGadgetLuaReq(betterproto.Message):
    param3: int = betterproto.int32_field(1)
    param2: int = betterproto.int32_field(14)
    source_entity_id: int = betterproto.uint32_field(15)
    param1: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class ExecuteGadgetLuaRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class ExecuteGroupTriggerReq(betterproto.Message):
    source_entity_id: int = betterproto.uint32_field(7)
    param3: int = betterproto.int32_field(6)
    param1: int = betterproto.int32_field(9)
    source_name: str = betterproto.string_field(8)
    target_entity_id: int = betterproto.uint32_field(15)
    param2: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class ExecuteGroupTriggerRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class ExitCustomDungeonTryReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ExitCustomDungeonTryRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class ExitFishingReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ExitFishingRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class ExitSceneWeatherAreaNotify(betterproto.Message):
    weather_gadget_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class ExitTransPointRegionNotify(betterproto.Message):
    point_id: int = betterproto.uint32_field(4)
    scene_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ExpeditionAssistInfo(betterproto.Message):
    target_nick_name: str = betterproto.string_field(1)
    costume_id: int = betterproto.uint32_field(7)
    assist_time: int = betterproto.uint32_field(12)
    avatar_id: int = betterproto.uint32_field(5)
    online_id: str = betterproto.string_field(13)


@dataclass(eq=False, repr=False)
class ExpeditionChallengeEnterRegionNotify(betterproto.Message):
    is_puzzle_finished: bool = betterproto.bool_field(1)
    id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class ExpeditionChallengeFinishedNotify(betterproto.Message):
    id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class ExpeditionRecallReq(betterproto.Message):
    path_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class ExpeditionRecallRsp(betterproto.Message):
    path_id: int = betterproto.uint32_field(2)
    retcode: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class ExpeditionStartReq(betterproto.Message):
    unk3300_aiejkadflkg: int = betterproto.uint32_field(10)
    path_id: int = betterproto.uint32_field(3)
    unk3300_afgpgiigaka: int = betterproto.uint32_field(14)
    avatar_id_list: List[int] = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class ExpeditionStartRsp(betterproto.Message):
    unk3300_aiejkadflkg: int = betterproto.uint32_field(5)
    path_id: int = betterproto.uint32_field(3)
    retcode: int = betterproto.int32_field(6)
    avatar_id_list: List[int] = betterproto.uint32_field(4)
    unk3300_afgpgiigaka: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class ExpeditionTakeRewardReq(betterproto.Message):
    path_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ExpeditionTakeRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(4)
    reward_level: int = betterproto.uint32_field(13)
    path_id: int = betterproto.uint32_field(12)
    is_bonus: bool = betterproto.bool_field(10)


@dataclass(eq=False, repr=False)
class FallPlayerBrief(betterproto.Message):
    is_ground: bool = betterproto.bool_field(7)
    uid: int = betterproto.uint32_field(2)
    score: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class FallPlayerInfo(betterproto.Message):
    cur_score: int = betterproto.uint32_field(3)
    is_ground: bool = betterproto.bool_field(11)
    ball_catch_count_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    uid: int = betterproto.uint32_field(5)
    time_cost: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class FallSettleInfo(betterproto.Message):
    final_score: int = betterproto.uint32_field(14)
    player_info: "OnlinePlayerInfo" = betterproto.message_field(9)
    flower_ring_catch_count_map: Dict[int, int] = betterproto.map_field(
        13, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    uid: int = betterproto.uint32_field(2)
    catch_count: int = betterproto.uint32_field(1)
    remain_time: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class FeatureBlockInfo(betterproto.Message):
    feature_type: int = betterproto.uint32_field(1)
    end_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class FindHilichurlAcceptQuestNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class FindHilichurlFinishSecondQuestNotify(betterproto.Message):
    day_index: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class FinishDeliveryNotify(betterproto.Message):
    finished_quest_index: int = betterproto.uint32_field(12)
    day_index: int = betterproto.uint32_field(7)
    schedule_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class InferenceWordInfo(betterproto.Message):
    unk3300_bfogkohieej: bool = betterproto.bool_field(12)
    unlock_by_word_id: int = betterproto.uint32_field(11)
    unk3300_pkbcaohgnlm: bool = betterproto.bool_field(10)
    word_id: int = betterproto.uint32_field(2)
    unk3300_jphlecoigkf: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class InferencePageInfo(betterproto.Message):
    unlock_word_list: List["InferenceWordInfo"] = betterproto.message_field(3)
    page_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ParentQuestRandomInfo(betterproto.Message):
    factor_list: List[int] = betterproto.uint32_field(1)
    entrance_id: int = betterproto.uint32_field(8)
    template_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class ParentQuest(betterproto.Message):
    inference_page_list: List["InferencePageInfo"] = betterproto.message_field(5)
    quest_var: List[int] = betterproto.int32_field(7)
    video_key: int = betterproto.uint64_field(11)
    unk3300_bomohkdhmnh: int = betterproto.uint32_field(15)
    random_info: "ParentQuestRandomInfo" = betterproto.message_field(9)
    parent_quest_id: int = betterproto.uint32_field(3)
    is_random: bool = betterproto.bool_field(12)
    child_quest_list: List["ChildQuest"] = betterproto.message_field(8)
    is_finished: bool = betterproto.bool_field(1)
    time_var_map: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    unk3300_pcihjlpphnj: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class FinishedParentQuestNotify(betterproto.Message):
    parent_quest_list: List["ParentQuest"] = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class FinishedParentQuestUpdateNotify(betterproto.Message):
    parent_quest_list: List["ParentQuest"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class FinishedTalkIdListNotify(betterproto.Message):
    finished_talk_id_list: List[int] = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class FinishLanternProjectionReq(betterproto.Message):
    finish_time: int = betterproto.uint32_field(8)
    level_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class FinishLanternProjectionRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class FinishMainCoopReq(betterproto.Message):
    id: int = betterproto.uint32_field(14)
    ending_save_point_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class FinishMainCoopRsp(betterproto.Message):
    ending_save_point_id: int = betterproto.uint32_field(4)
    retcode: int = betterproto.int32_field(1)
    id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class FireworksLaunchParam(betterproto.Message):
    type: "FireworksLaunchParamType" = betterproto.enum_field(4)
    value: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class FireworksLaunchSchemeData(betterproto.Message):
    launch_param_list: List["FireworksLaunchParam"] = betterproto.message_field(8)
    fireworks_id_list: List[int] = betterproto.uint32_field(12)
    scheme_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class FireworksLaunchDataNotify(betterproto.Message):
    scheme_data_list: List["FireworksLaunchSchemeData"] = betterproto.message_field(8)
    last_use_scheme_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class FireworksReformParam(betterproto.Message):
    value: int = betterproto.int32_field(1)
    type: "FireworksReformParamType" = betterproto.enum_field(5)


@dataclass(eq=False, repr=False)
class FireworksReformData(betterproto.Message):
    reform_param_list: List["FireworksReformParam"] = betterproto.message_field(8)
    id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class FireworksReformDataNotify(betterproto.Message):
    fireworks_reform_data_list: List["FireworksReformData"] = betterproto.message_field(
        9
    )


@dataclass(eq=False, repr=False)
class FishAttractNotify(betterproto.Message):
    pos: "Vector" = betterproto.message_field(2)
    fish_id_list: List[int] = betterproto.uint32_field(14)
    uid: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class FishBaitGoneNotify(betterproto.Message):
    uid: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class FishBattleBeginReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class FishBattleBeginRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class FishBattleEndReq(betterproto.Message):
    battle_result: "FishBattleResult" = betterproto.enum_field(11)
    is_always_bonus: bool = betterproto.bool_field(3)
    max_bonus_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class FishBattleEndRsp(betterproto.Message):
    battle_result: "FishBattleResult" = betterproto.enum_field(6)
    no_reward_reason: "FishBattleEndRspFishNoRewardReason" = betterproto.enum_field(2)
    retcode: int = betterproto.int32_field(9)
    unk3300_abbbgobdjec: List["ItemParam"] = betterproto.message_field(12)
    is_got_reward: bool = betterproto.bool_field(8)
    unk3300_mdckkpgnkgl: List["ItemParam"] = betterproto.message_field(1)
    reward_item_list: List["ItemParam"] = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class FishBiteReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class FishBiteRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class FishCastRodReq(betterproto.Message):
    unk3300_pjfheddfobm: int = betterproto.uint32_field(7)
    unk3300_icaleibjcda: int = betterproto.uint32_field(13)
    pos: "Vector" = betterproto.message_field(11)
    rod_entity_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class FishCastRodRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(12)


@dataclass(eq=False, repr=False)
class FishChosenNotify(betterproto.Message):
    fish_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class FishEscapeNotify(betterproto.Message):
    uid: int = betterproto.uint32_field(2)
    pos: "Vector" = betterproto.message_field(11)
    fish_id_list: List[int] = betterproto.uint32_field(9)
    reason: "FishEscapeReason" = betterproto.enum_field(12)


@dataclass(eq=False, repr=False)
class FishInfo(betterproto.Message):
    unk3300_akfbfedceln: int = betterproto.uint32_field(14)
    unk3300_fiiclbefhll: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class FishingScore(betterproto.Message):
    fishing_score: int = betterproto.uint32_field(11)
    is_new_record: bool = betterproto.bool_field(10)


@dataclass(eq=False, repr=False)
class FishingGallerySettleInfo(betterproto.Message):
    fishing_score_list: List["FishingScore"] = betterproto.message_field(15)
    fish_map: Dict[int, "FishInfo"] = betterproto.map_field(
        10, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class FishingGallerySettleNotify(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(5)
    settle_info: "FishingGallerySettleInfo" = betterproto.message_field(4)
    level_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class FishPoolDataNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(3)
    today_fish_num: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class FleurFairBalloonSettleInfo(betterproto.Message):
    settle_info: "BalloonSettleInfo" = betterproto.message_field(5)
    is_new_record: bool = betterproto.bool_field(15)


@dataclass(eq=False, repr=False)
class FleurFairBalloonSettleNotify(betterproto.Message):
    minigame_id: int = betterproto.uint32_field(1)
    settle_info_map: Dict[int, "FleurFairBalloonSettleInfo"] = betterproto.map_field(
        6, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class FleurFairPlayerStatInfo(betterproto.Message):
    profile_picture: "ProfilePicture" = betterproto.message_field(5)
    stat_id: int = betterproto.uint32_field(4)
    head_image: int = betterproto.uint32_field(6)
    param: int = betterproto.int32_field(8)
    uid: int = betterproto.uint32_field(9)
    nick_name: str = betterproto.string_field(2)
    online_id: str = betterproto.string_field(11)


@dataclass(eq=False, repr=False)
class FleurFairBossSettleInfo(betterproto.Message):
    cost_time: int = betterproto.uint32_field(14)
    stat_info_list: List["FleurFairPlayerStatInfo"] = betterproto.message_field(11)
    energy: int = betterproto.uint32_field(4)
    is_success: bool = betterproto.bool_field(2)
    reward_token_num: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class FleurFairBuffEnergyNotify(betterproto.Message):
    energy: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class FleurFairFallSettleInfo(betterproto.Message):
    settle_info: "FallSettleInfo" = betterproto.message_field(3)
    is_new_record: bool = betterproto.bool_field(9)


@dataclass(eq=False, repr=False)
class FleurFairFallSettleNotify(betterproto.Message):
    minigame_id: int = betterproto.uint32_field(2)
    settle_info_map: Dict[int, "FleurFairFallSettleInfo"] = betterproto.map_field(
        13, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class FleurFairFinishGalleryStageNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class FleurFairGallerySettleInfo(betterproto.Message):
    is_success: bool = betterproto.bool_field(8)
    energy_stat_map: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_INT32
    )
    energy: int = betterproto.uint32_field(3)
    gallery_stage_index: int = betterproto.uint32_field(6)
    gallery_stage_count: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class FleurFairMusicGameSettleReq(betterproto.Message):
    score: int = betterproto.uint32_field(1)
    correct_hit: int = betterproto.uint32_field(10)
    combo: int = betterproto.uint32_field(3)
    music_basic_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class FleurFairMusicGameSettleRsp(betterproto.Message):
    is_new_record: bool = betterproto.bool_field(15)
    is_unlock_next_level: bool = betterproto.bool_field(7)
    music_basic_id: int = betterproto.uint32_field(4)
    retcode: int = betterproto.int32_field(9)


@dataclass(eq=False, repr=False)
class FleurFairMusicGameStartReq(betterproto.Message):
    music_basic_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class FleurFairMusicGameStartRsp(betterproto.Message):
    music_basic_id: int = betterproto.uint32_field(11)
    retcode: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class FleurFairReplayMiniGameReq(betterproto.Message):
    minigame_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class FleurFairReplayMiniGameRsp(betterproto.Message):
    minigame_id: int = betterproto.uint32_field(6)
    retcode: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class FleurFairStageSettleNotify(betterproto.Message):
    stage_type: int = betterproto.uint32_field(7)
    gallery_settle_info: "FleurFairGallerySettleInfo" = betterproto.message_field(
        1, group="detail"
    )
    boss_settle_info: "FleurFairBossSettleInfo" = betterproto.message_field(
        12, group="detail"
    )


@dataclass(eq=False, repr=False)
class FlightActivityRestartReq(betterproto.Message):
    group_id: int = betterproto.uint32_field(3)
    schedule_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class FlightActivityRestartRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(4)
    group_id: int = betterproto.uint32_field(10)
    schedule_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class FlightActivitySettleNotify(betterproto.Message):
    left_time: int = betterproto.uint32_field(10)
    total_num: int = betterproto.uint32_field(6)
    group_id: int = betterproto.uint32_field(13)
    score: int = betterproto.uint32_field(15)
    unk3300_meekfjjioke: int = betterproto.uint32_field(9)
    is_new_record: bool = betterproto.bool_field(4)
    is_success: bool = betterproto.bool_field(1)
    unk3300_plfmjpnppli: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class FocusAvatarReq(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(5)
    is_focus: bool = betterproto.bool_field(11)


@dataclass(eq=False, repr=False)
class FocusAvatarRsp(betterproto.Message):
    is_focus: bool = betterproto.bool_field(2)
    avatar_guid: int = betterproto.uint64_field(4)
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class ForceAddPlayerFriendReq(betterproto.Message):
    target_uid: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ForceAddPlayerFriendRsp(betterproto.Message):
    target_friend_brief: "FriendBrief" = betterproto.message_field(3)
    retcode: int = betterproto.int32_field(13)
    target_uid: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class ForceDragAvatarNotify(betterproto.Message):
    unk3300_imfnnpghkjj: int = betterproto.uint64_field(3)
    motion_info: "MotionInfo" = betterproto.message_field(9)
    is_first_valid: bool = betterproto.bool_field(7)
    scene_time: int = betterproto.uint32_field(12)
    entity_id: int = betterproto.uint32_field(10)
    unk3300_aflcllfdpbd: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class ForceDragBackTransferNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ForceUpdateInfo(betterproto.Message):
    force_update_url: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ForgeQueueData(betterproto.Message):
    unk3300_kdiplnbhgdh: int = betterproto.uint32_field(1)
    forge_id: int = betterproto.uint32_field(5)
    unk3300_gjeechkdebd: int = betterproto.uint32_field(7)
    unk3300_ooojnabghom: int = betterproto.uint32_field(4)
    unk3300_pjckfnnimnm: int = betterproto.uint32_field(15)
    avatar_id: int = betterproto.uint32_field(12)
    unk3300_pjkhpcimaid: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ForgeDataNotify(betterproto.Message):
    forge_id_list: List[int] = betterproto.uint32_field(13)
    forge_queue_map: Dict[int, "ForgeQueueData"] = betterproto.map_field(
        8, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    max_queue_num: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class ForgeFormulaDataNotify(betterproto.Message):
    is_locked: bool = betterproto.bool_field(4)
    forge_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ForgeGetQueueDataReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ForgeGetQueueDataRsp(betterproto.Message):
    max_queue_num: int = betterproto.uint32_field(4)
    forge_queue_map: Dict[int, "ForgeQueueData"] = betterproto.map_field(
        9, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class ForgeQueueDataNotify(betterproto.Message):
    forge_queue_map: Dict[int, "ForgeQueueData"] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    removed_forge_queue_list: List[int] = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class ForgeQueueManipulateReq(betterproto.Message):
    forge_queue_id: int = betterproto.uint32_field(3)
    manipulate_type: "ForgeQueueManipulateType" = betterproto.enum_field(4)


@dataclass(eq=False, repr=False)
class ForgeQueueManipulateRsp(betterproto.Message):
    extra_output_item_list: List["ItemParam"] = betterproto.message_field(3)
    manipulate_type: "ForgeQueueManipulateType" = betterproto.enum_field(12)
    unk3300_jdhfpcbogfh: List["ItemParam"] = betterproto.message_field(4)
    unk3300_eoldjamhdhm: List["ItemParam"] = betterproto.message_field(14)
    retcode: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class ForgeStartReq(betterproto.Message):
    forge_id: int = betterproto.uint32_field(8)
    avatar_id: int = betterproto.uint32_field(1)
    forge_count: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class ForgeStartRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class FoundationNotify(betterproto.Message):
    info: "FoundationInfo" = betterproto.message_field(6)
    gadget_entity_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class FoundationReq(betterproto.Message):
    gadget_entity_id: int = betterproto.uint32_field(1)
    building_id: int = betterproto.uint32_field(11)
    point_config_id: int = betterproto.uint32_field(10)
    op_type: "FoundationOpType" = betterproto.enum_field(6)


@dataclass(eq=False, repr=False)
class FoundationRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)
    building_id: int = betterproto.uint32_field(10)
    op_type: "FoundationOpType" = betterproto.enum_field(14)
    gadget_entity_id: int = betterproto.uint32_field(2)
    point_config_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class FriendInfoChangeNotify(betterproto.Message):
    uid: int = betterproto.uint32_field(6)
    online_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class FungusCaptureSettleNotify(betterproto.Message):
    is_success: bool = betterproto.bool_field(14)


@dataclass(eq=False, repr=False)
class FungusCultivateReq(betterproto.Message):
    unk3300_ioanljbmbai: int = betterproto.uint32_field(1)
    unk3300_djegjdacdef: int = betterproto.uint32_field(6)
    unk3300_imegfnoldce: int = betterproto.uint32_field(2)
    unk3300_pgjkeicfkll: int = betterproto.uint32_field(5)
    unk3300_mbplicbfagl: int = betterproto.uint32_field(7)
    cultivate_id: int = betterproto.uint32_field(12)
    time: int = betterproto.uint32_field(15)
    unk3300_aegcnhlopep: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class FungusCultivateRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)
    cultivate_id: int = betterproto.uint32_field(12)
    is_new_record: bool = betterproto.bool_field(13)


@dataclass(eq=False, repr=False)
class FungusFighterClearTrainingRuntimeDataReq(betterproto.Message):
    dungeon_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class FungusFighterClearTrainingRuntimeDataRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(14)


@dataclass(eq=False, repr=False)
class FungusFighterPlotInfoNotify(betterproto.Message):
    dungeon_id: int = betterproto.uint32_field(12)
    fungus_id_list: List[int] = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class FungusFighterRestartTrainingDungeonReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class FungusFighterRestartTrainingDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(14)


@dataclass(eq=False, repr=False)
class FungusFighterRuntimeDataNotify(betterproto.Message):
    progress_detail: "FungusTrainingProgressDetail" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class FungusFighterTrainingGallerySettleNotify(betterproto.Message):
    reason: "GalleryStopReason" = betterproto.enum_field(3)
    is_final_settle: bool = betterproto.bool_field(2)
    total_used_time: int = betterproto.uint32_field(14)
    is_new_record: bool = betterproto.bool_field(11)
    unk3300_kkfbmhlolfc: int = betterproto.uint32_field(10)
    unk3300_bhomhphlohl: int = betterproto.uint32_field(13)
    unk3300_pocdegbhjea: int = betterproto.uint32_field(15)
    final_score: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class FungusFighterTrainingInfoNotify(betterproto.Message):
    buff_id: int = betterproto.uint32_field(14)
    unk3300_ioeelcamdck: int = betterproto.uint32_field(10)
    unk3300_hgpgncmndjn: int = betterproto.uint32_field(4)
    unk3300_edhanegnmjm: int = betterproto.uint32_field(3)
    unk3300_gmlipfdmdog: int = betterproto.uint32_field(6)
    unk3300_ekamcpngcgh: int = betterproto.uint32_field(13)
    max_monster_count: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class FungusFighterTrainingSelectFungusReq(betterproto.Message):
    backup_fungus_id_list: List[int] = betterproto.uint32_field(3)
    fight_fungus_id_list: List[int] = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class FungusFighterTrainingSelectFungusRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class FungusFighterTrainingSettleInfo(betterproto.Message):
    used_time: int = betterproto.uint32_field(13)
    reason: "GalleryStopReason" = betterproto.enum_field(4)
    transaction: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class FungusFighterUseBackupFungusReq(betterproto.Message):
    backup_fungus_id_list: List[int] = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class FungusFighterUseBackupFungusRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class FungusRenameReq(betterproto.Message):
    fungus_id: int = betterproto.uint32_field(12)
    name_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class FungusRenameRsp(betterproto.Message):
    fungus_id: int = betterproto.uint32_field(1)
    retcode: int = betterproto.int32_field(7)
    name_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class FurnitureCurModuleArrangeCountNotify(betterproto.Message):
    furniture_arrange_count_list: List["Uint32Pair"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class FurnitureMakeBeHelpedData(betterproto.Message):
    player_name: str = betterproto.string_field(11)
    icon: int = betterproto.uint32_field(7)
    profile_picture: "ProfilePicture" = betterproto.message_field(2)
    time: int = betterproto.fixed32_field(12)
    uid: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class FurnitureMakeData(betterproto.Message):
    begin_time: int = betterproto.fixed32_field(1)
    avatar_id: int = betterproto.uint32_field(5)
    make_id: int = betterproto.uint32_field(10)
    index: int = betterproto.uint32_field(6)
    unk3300_gdibladmjic: int = betterproto.uint32_field(8)
    unk3300_gbdhflefjlg: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class FurnitureMakeSlot(betterproto.Message):
    furniture_make_data_list: List["FurnitureMakeData"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class FurnitureMakeBeHelpedNotify(betterproto.Message):
    furniture_make_helped_data: "FurnitureMakeBeHelpedData" = betterproto.message_field(
        12
    )
    furniture_make_slot: "FurnitureMakeSlot" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class FurnitureMakeCancelReq(betterproto.Message):
    make_id: int = betterproto.uint32_field(14)
    index: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class FurnitureMakeCancelRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)
    make_id: int = betterproto.uint32_field(6)
    furniture_make_slot: "FurnitureMakeSlot" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class FurnitureMakeFinishNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class FurnitureMakeHelpData(betterproto.Message):
    times: int = betterproto.uint32_field(12)
    uid: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class FurnitureMakeHelpReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class FurnitureMakeHelpRsp(betterproto.Message):
    help_data_list: List["FurnitureMakeHelpData"] = betterproto.message_field(4)
    retcode: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class FurnitureMakeInfo(betterproto.Message):
    make_count: int = betterproto.uint32_field(15)
    furniture_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class FurnitureMakeInfoChangeNotify(betterproto.Message):
    make_info: "FurnitureMakeInfo" = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class FurnitureMakeReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class FurnitureMakeRsp(betterproto.Message):
    furniture_make_slot: "FurnitureMakeSlot" = betterproto.message_field(13)
    help_data_list: List["FurnitureMakeHelpData"] = betterproto.message_field(4)
    retcode: int = betterproto.int32_field(11)
    helped_data_list: List["FurnitureMakeBeHelpedData"] = betterproto.message_field(6)
    make_info_list: List["FurnitureMakeInfo"] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class FurnitureMakeStartReq(betterproto.Message):
    make_id: int = betterproto.uint32_field(15)
    avatar_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class FurnitureMakeStartRsp(betterproto.Message):
    furniture_make_slot: "FurnitureMakeSlot" = betterproto.message_field(14)
    retcode: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class GachaActivityCreateRobotReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GachaActivityCreateRobotRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)
    robot_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class GachaActivityNextStageReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GachaActivityNextStageRsp(betterproto.Message):
    stage_id: int = betterproto.uint32_field(11)
    retcode: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class GachaActivityPercentNotify(betterproto.Message):
    unk3300_ghhigkfdone: int = betterproto.uint32_field(13)
    unk3300_eopjbphfdee: int = betterproto.uint32_field(6)
    unk3300_iolpajkdeea: int = betterproto.uint32_field(5)
    target_num_map: Dict[int, int] = betterproto.map_field(
        12, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class GachaActivityResetReq(betterproto.Message):
    stage_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GachaActivityResetRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)
    stage_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class GachaActivityTakeRewardReq(betterproto.Message):
    robot_num_map: Dict[int, int] = betterproto.map_field(
        7, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class GachaActivityTakeRewardRsp(betterproto.Message):
    robot_num_map: Dict[int, int] = betterproto.map_field(
        10, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    retcode: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class GachaActivityUpdateElemNotify(betterproto.Message):
    elem_type: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class GachaUpInfo(betterproto.Message):
    item_parent_type: int = betterproto.uint32_field(15)
    item_id_list: List[int] = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GachaInfo(betterproto.Message):
    unk3300_jlelmhelidc: int = betterproto.uint32_field(5)
    gacha_type: int = betterproto.uint32_field(7)
    unk3300_nmokgfgdffc: int = betterproto.uint32_field(954)
    unk3300_gkdeefnfcac: str = betterproto.string_field(1532)
    unk3300_fogpkbalhpi: str = betterproto.string_field(15)
    unk3300_hlpklmgibib: str = betterproto.string_field(1)
    begin_time: int = betterproto.uint32_field(14)
    schedule_id: int = betterproto.uint32_field(8)
    unk3300_lblebdljdll: List[int] = betterproto.uint32_field(476)
    unk3300_glpmiembggl: int = betterproto.uint32_field(10)
    unk3300_bcjongecboh: str = betterproto.string_field(4)
    unk3300_jogahfbkhnj: str = betterproto.string_field(114)
    unk3300_hlanonbcblm: int = betterproto.uint32_field(245)
    end_time: int = betterproto.uint32_field(2)
    unk3300_coabnbjckeo: List[int] = betterproto.uint32_field(540)
    unk3300_medmcpfcioo: int = betterproto.uint32_field(13)
    unk3300_bllmpajncpi: int = betterproto.uint32_field(1275)
    unk3300_dbfmkamnpcl: int = betterproto.uint32_field(9)
    unk3300_ddbolmghekn: int = betterproto.uint32_field(6)
    is_new_wish: bool = betterproto.bool_field(967)
    unk3300_jlbflpemapp: int = betterproto.uint32_field(12)
    unk3300_keijfmkakdh: int = betterproto.uint32_field(1580)
    unk3300_odfknfomage: str = betterproto.string_field(1259)
    gacha_up_info_list: List["GachaUpInfo"] = betterproto.message_field(1585)
    unk3300_plfmmofngag: int = betterproto.uint32_field(3)
    unk3300_ofohdldfclf: str = betterproto.string_field(11)


@dataclass(eq=False, repr=False)
class GachaOpenWishNotify(betterproto.Message):
    gacha_schedule_id: int = betterproto.uint32_field(1)
    gacha_type: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class GachaSimpleInfoNotify(betterproto.Message):
    is_new: bool = betterproto.bool_field(11)


@dataclass(eq=False, repr=False)
class GachaWishReq(betterproto.Message):
    gacha_type: int = betterproto.uint32_field(3)
    gacha_schedule_id: int = betterproto.uint32_field(12)
    item_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class GachaWishRsp(betterproto.Message):
    unk3300_nmokgfgdffc: int = betterproto.uint32_field(6)
    unk3300_keijfmkakdh: int = betterproto.uint32_field(15)
    gacha_schedule_id: int = betterproto.uint32_field(11)
    retcode: int = betterproto.int32_field(13)
    unk3300_bllmpajncpi: int = betterproto.uint32_field(10)
    gacha_type: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class GadgetAutoPickDropInfoNotify(betterproto.Message):
    item_list: List["Item"] = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class GadgetChainLevelChangeNotify(betterproto.Message):
    gadget_chain_level_map: Dict[int, int] = betterproto.map_field(
        13, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class GadgetChainLevelUpdateNotify(betterproto.Message):
    gadget_chain_level_map: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class GadgetChangeLevelTagReq(betterproto.Message):
    gadget_entity_id: int = betterproto.uint32_field(14)
    level_tag_id: int = betterproto.uint32_field(6)
    combination_info: "CustomGadgetTreeInfo" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class GadgetChangeLevelTagRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class GadgetCustomTreeInfoNotify(betterproto.Message):
    custom_gadget_tree_info: "CustomGadgetTreeInfo" = betterproto.message_field(8)
    gadget_entity_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class GadgetGeneralRewardInfoNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(10)
    general_reward_info: "GadgetGeneralRewardInfo" = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class GadgetInteractReq(betterproto.Message):
    gadget_id: int = betterproto.uint32_field(1)
    resin_cost_type: "ResinCostType" = betterproto.enum_field(13)
    gadget_entity_id: int = betterproto.uint32_field(8)
    op_type: "InterOpType" = betterproto.enum_field(2)
    ui_interact_id: int = betterproto.uint32_field(11)
    is_use_condense_resin: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class GadgetInteractRsp(betterproto.Message):
    interact_type: "InteractType" = betterproto.enum_field(2)
    gadget_id: int = betterproto.uint32_field(11)
    retcode: int = betterproto.int32_field(7)
    gadget_entity_id: int = betterproto.uint32_field(1)
    op_type: "InterOpType" = betterproto.enum_field(8)


@dataclass(eq=False, repr=False)
class GadgetPlayDataNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(13)
    progress: int = betterproto.uint32_field(6)
    play_type: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class GadgetPlayStartNotify(betterproto.Message):
    start_time: int = betterproto.uint32_field(12)
    play_type: int = betterproto.uint32_field(13)
    entity_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class GadgetPlayUidInfo(betterproto.Message):
    online_id: str = betterproto.string_field(5)
    score: int = betterproto.uint32_field(1)
    nickname: str = betterproto.string_field(11)
    icon: int = betterproto.uint32_field(15)
    battle_watcher_id: int = betterproto.uint32_field(9)
    profile_picture: "ProfilePicture" = betterproto.message_field(6)
    uid: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class GadgetPlayStopNotify(betterproto.Message):
    uid_info_list: List["GadgetPlayUidInfo"] = betterproto.message_field(1)
    play_type: int = betterproto.uint32_field(3)
    is_win: bool = betterproto.bool_field(8)
    entity_id: int = betterproto.uint32_field(15)
    score: int = betterproto.uint32_field(5)
    cost_time: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class GadgetPlayUidOpNotify(betterproto.Message):
    param_str: str = betterproto.string_field(14)
    op: int = betterproto.uint32_field(2)
    entity_id: int = betterproto.uint32_field(10)
    param_list: List[int] = betterproto.uint32_field(12)
    play_type: int = betterproto.uint32_field(9)
    uid_list: List[int] = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class GadgetStateNotify(betterproto.Message):
    gadget_entity_id: int = betterproto.uint32_field(7)
    gadget_state: int = betterproto.uint32_field(5)
    is_enable_interact: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class GadgetTalkChangeNotify(betterproto.Message):
    cur_gadget_talk_state: int = betterproto.uint32_field(12)
    gadget_entity_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class GalleryBalloonScoreNotify(betterproto.Message):
    uid_score_map: Dict[int, int] = betterproto.map_field(
        12, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    gallery_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class GalleryBalloonShootNotify(betterproto.Message):
    trigger_entity_id: int = betterproto.uint32_field(3)
    combo: int = betterproto.uint32_field(15)
    combo_disable_time: int = betterproto.uint64_field(9)
    cur_score: int = betterproto.uint32_field(1)
    add_score: int = betterproto.int32_field(2)
    gallery_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class GalleryBounceConjuringHitNotify(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(8)
    add_score: int = betterproto.uint32_field(15)
    is_perfect: bool = betterproto.bool_field(11)


@dataclass(eq=False, repr=False)
class GalleryBrokenFloorFallNotify(betterproto.Message):
    fall_count: int = betterproto.uint32_field(10)
    gallery_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class GalleryBulletHitNotify(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(3)
    hit_count: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class GalleryCrystalLinkBuffInfoNotify(betterproto.Message):
    is_buff_valid: bool = betterproto.bool_field(11)
    buff_id: int = betterproto.uint32_field(14)
    gallery_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GalleryCrystalLinkKillMonsterNotify(betterproto.Message):
    score: int = betterproto.uint32_field(5)
    gallery_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GalleryFallCatchNotify(betterproto.Message):
    add_score: int = betterproto.uint32_field(1)
    gallery_id: int = betterproto.uint32_field(7)
    cur_score: int = betterproto.uint32_field(11)
    time_cost: int = betterproto.uint32_field(15)
    is_ground: bool = betterproto.bool_field(8)
    ball_catch_count_map: Dict[int, int] = betterproto.map_field(
        14, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class GalleryFallScoreNotify(betterproto.Message):
    uid_brief_map: Dict[int, "FallPlayerBrief"] = betterproto.map_field(
        10, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    gallery_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class GalleryFlowerCatchNotify(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(13)
    cur_score: int = betterproto.uint32_field(2)
    add_score: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class GalleryFlowerStartParam(betterproto.Message):
    target_score: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class GalleryIslandPartyDownHillInfoNotify(betterproto.Message):
    coin: int = betterproto.uint32_field(8)
    gallery_id: int = betterproto.uint32_field(14)
    total_kill_monster_count: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class GalleryPreStartNotify(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(4)
    pre_start_end_time: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GalleryStartNotify(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(6)
    end_time: int = betterproto.uint32_field(13)
    owner_uid: int = betterproto.uint32_field(8)
    start_time: int = betterproto.uint32_field(7)
    player_count: int = betterproto.uint32_field(9)
    flower_start_param: "GalleryFlowerStartParam" = betterproto.message_field(
        11, group="detail"
    )


@dataclass(eq=False, repr=False)
class GalleryStopNotify(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class GallerySumoKillMonsterNotify(betterproto.Message):
    score: int = betterproto.uint32_field(6)
    gallery_id: int = betterproto.uint32_field(11)
    kill_elite_monster_num: int = betterproto.uint32_field(14)
    kill_normal_monster_num: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class GalleryWillStartCountdownNotify(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(13)
    start_source: "GalleryStartSource" = betterproto.enum_field(14)
    end_time: int = betterproto.uint32_field(15)
    is_end: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class GameplayRecommendationElementReliquaryRequest(betterproto.Message):
    element_type: int = betterproto.uint32_field(2)
    equip_type: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GameplayRecommendationReliquaryMainPropData(betterproto.Message):
    permillage: int = betterproto.uint32_field(5)
    main_prop_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class GameplayRecommendationElementReliquaryResponse(betterproto.Message):
    element_type: int = betterproto.uint32_field(1)
    equip_type: int = betterproto.uint32_field(9)
    main_prop_data_list: List[
        "GameplayRecommendationReliquaryMainPropData"
    ] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class GameplayRecommendationReliquaryRequest(betterproto.Message):
    equip_type: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class GameplayRecommendationReliquaryResponse(betterproto.Message):
    equip_type: int = betterproto.uint32_field(11)
    main_prop_data_list: List[
        "GameplayRecommendationReliquaryMainPropData"
    ] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GameplayRecommendationSkillRequest(betterproto.Message):
    skill_depot_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class GameplayRecommendationSkillResponse(betterproto.Message):
    skill_id_list: List[int] = betterproto.uint32_field(1)
    skill_depot_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class GcgApplyInviteBattleNotify(betterproto.Message):
    is_agree: bool = betterproto.bool_field(4)
    retcode: int = betterproto.int32_field(14)


@dataclass(eq=False, repr=False)
class GcgApplyInviteBattleReq(betterproto.Message):
    is_agree: bool = betterproto.bool_field(12)


@dataclass(eq=False, repr=False)
class GcgApplyInviteBattleRsp(betterproto.Message):
    punish_end_time: int = betterproto.uint32_field(6)
    retcode: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class GcgAskDuelReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GcgLimitsInfo(betterproto.Message):
    unk3300_mncnolhhgpa: int = betterproto.uint32_field(7)
    unk3300_phkpkfbdgjf: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class GcgSkillLimitsInfo(betterproto.Message):
    skill_id: int = betterproto.uint32_field(1)
    limits_list: List["GcgLimitsInfo"] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class GcgToken(betterproto.Message):
    value: int = betterproto.uint32_field(14)
    key: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class GcgCard(betterproto.Message):
    tag_list: List[int] = betterproto.uint32_field(7)
    guid: int = betterproto.uint32_field(11)
    is_show: bool = betterproto.bool_field(15)
    token_list: List["GcgToken"] = betterproto.message_field(8)
    face_type: int = betterproto.uint32_field(2)
    skill_id_list: List[int] = betterproto.uint32_field(13)
    skill_limits_list: List["GcgSkillLimitsInfo"] = betterproto.message_field(3)
    id: int = betterproto.uint32_field(6)
    controller_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class GcgControllerShowInfo(betterproto.Message):
    psn_id: str = betterproto.string_field(12)
    nick_name: str = betterproto.string_field(10)
    online_id: str = betterproto.string_field(15)
    profile_picture: "ProfilePicture" = betterproto.message_field(3)
    controller_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class GcgAttackCostInfo(betterproto.Message):
    cost_map: List["Uint32Pair"] = betterproto.message_field(1)
    skill_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class GcgPlayCardCostInfo(betterproto.Message):
    card_id: int = betterproto.uint32_field(9)
    cost_map: List["Uint32Pair"] = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class GcgSelectOnStageCostInfo(betterproto.Message):
    card_guid: int = betterproto.uint32_field(3)
    cost_map: List["Uint32Pair"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GcgCostReviseInfo(betterproto.Message):
    can_use_hand_card_id_list: List[int] = betterproto.uint32_field(15)
    select_on_stage_cost_list: List[
        "GcgSelectOnStageCostInfo"
    ] = betterproto.message_field(13)
    play_card_cost_list: List["GcgPlayCardCostInfo"] = betterproto.message_field(5)
    attack_cost_list: List["GcgAttackCostInfo"] = betterproto.message_field(12)
    is_can_attack: bool = betterproto.bool_field(14)


@dataclass(eq=False, repr=False)
class GcgDuelChallenge(betterproto.Message):
    challenge_id: int = betterproto.uint32_field(12)
    cur_progress: int = betterproto.uint32_field(2)
    total_progress: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class GcgMsgAddCards(betterproto.Message):
    zone: "GcgZoneType" = betterproto.enum_field(5)
    reason: "GcgReason" = betterproto.enum_field(7)
    card_guid_list: List[int] = betterproto.uint32_field(4)
    controller_id: int = betterproto.uint32_field(9)
    pos: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class GcgMsgAddDice(betterproto.Message):
    unk3300_kfkogokpifn: Dict[int, "GcgDiceSideType"] = betterproto.map_field(
        13, betterproto.TYPE_UINT32, betterproto.TYPE_ENUM
    )
    reason: "GcgReason" = betterproto.enum_field(10)
    change_count: int = betterproto.int32_field(6)
    unk3300_pcmpcclfeim: Dict[int, "GcgDiceSideType"] = betterproto.map_field(
        11, betterproto.TYPE_UINT32, betterproto.TYPE_ENUM
    )
    controller_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class GcgMsgCardUpdate(betterproto.Message):
    card: "GcgCard" = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class GcgMsgCharDie(betterproto.Message):
    controller_id: int = betterproto.uint32_field(13)
    card_guid: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class GcgMsgClientPerform(betterproto.Message):
    param_list: List[int] = betterproto.uint32_field(4)
    perform_type: "GcgClientPerformType" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class GcgMsgCostDice(betterproto.Message):
    reason: "GcgReason" = betterproto.enum_field(1)
    select_dice_index_list: List[int] = betterproto.uint32_field(12)
    controller_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class GcgMsgCostRevise(betterproto.Message):
    cost_revise: "GcgCostReviseInfo" = betterproto.message_field(3)
    controller_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GcgMsgDiceReroll(betterproto.Message):
    controller_id: int = betterproto.uint32_field(1)
    dice_side_list: List["GcgDiceSideType"] = betterproto.enum_field(8)
    select_dice_index_list: List[int] = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class GcgMsgDiceRoll(betterproto.Message):
    controller_id: int = betterproto.uint32_field(9)
    dice_num: int = betterproto.uint32_field(3)
    dice_side_list: List["GcgDiceSideType"] = betterproto.enum_field(14)


@dataclass(eq=False, repr=False)
class GcgMsgDuelDataChange(betterproto.Message):
    round: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GcgMsgGameOver(betterproto.Message):
    end_reason: "GcgEndReason" = betterproto.enum_field(6)
    win_controller_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GcgMsgModifyAdd(betterproto.Message):
    owner_card_guid: int = betterproto.uint32_field(11)
    pos: int = betterproto.uint32_field(9)
    card_guid_list: List[int] = betterproto.uint32_field(3)
    controller_id: int = betterproto.uint32_field(12)
    reason: "GcgReason" = betterproto.enum_field(15)


@dataclass(eq=False, repr=False)
class GcgMsgModifyRemove(betterproto.Message):
    owner_card_guid: int = betterproto.uint32_field(7)
    reason: "GcgReason" = betterproto.enum_field(3)
    controller_id: int = betterproto.uint32_field(14)
    card_guid_list: List[int] = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class GcgMsgMoveCard(betterproto.Message):
    unk3300_ejhnjmbjbkg: "GcgZoneType" = betterproto.enum_field(9)
    fail_guid_list: List[int] = betterproto.uint32_field(2)
    unk3300_njilobdeecc: "GcgZoneType" = betterproto.enum_field(14)
    controller_id: int = betterproto.uint32_field(4)
    reason: "GcgReason" = betterproto.enum_field(13)
    card_guid_list: List[int] = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class GcgMsgNewCard(betterproto.Message):
    card: "GcgCard" = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class GcgDamageDetail(betterproto.Message):
    card_guid: int = betterproto.uint32_field(4)
    skill_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class GcgMsgNoDamageSkillResult(betterproto.Message):
    unk3300_lpglocddpcl: int = betterproto.uint32_field(7)
    unk3300_epndciajojp: int = betterproto.uint32_field(6)
    target_card_guid: int = betterproto.uint32_field(3)
    detail_list: List["GcgDamageDetail"] = betterproto.message_field(14)
    skill_id: int = betterproto.uint32_field(13)
    unk3300_nnjaoehnppd: int = betterproto.uint32_field(4)
    unk3300_nigdciglake: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class GcgMsgOpTimer(betterproto.Message):
    phase: "GcgPhaseType" = betterproto.enum_field(13)
    controller_id: int = betterproto.uint32_field(14)
    time_stamp: int = betterproto.fixed64_field(15)
    begin_time: int = betterproto.fixed64_field(6)


@dataclass(eq=False, repr=False)
class GcgMsgPveIntention(betterproto.Message):
    card_guid: int = betterproto.uint32_field(1)
    skill_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GcgMsgPveIntentionChange(betterproto.Message):
    change_type: "GcgIntentionChangeType" = betterproto.enum_field(9)
    change_intention_list: List["GcgMsgPveIntention"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class GcgMsgPveIntentionInfo(betterproto.Message):
    intention_map: Dict[int, "GcgMsgPveIntention"] = betterproto.map_field(
        14, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class GcgMsgPass(betterproto.Message):
    controller_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class GcgMsgPhaseChange(betterproto.Message):
    unk3300_jdpadlfffdk: "GcgPhaseType" = betterproto.enum_field(15)
    unk3300_gnaiddmdebn: "GcgPhaseType" = betterproto.enum_field(3)
    allow_controller_map: List["Uint32Pair"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class GcgMsgPhaseContinue(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GcgMsgReactionBegin(betterproto.Message):
    card_guid: int = betterproto.uint32_field(4)
    skill_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class GcgMsgReactionEnd(betterproto.Message):
    skill_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class GcgMsgRemoveCards(betterproto.Message):
    card_guid_list: List[int] = betterproto.uint32_field(2)
    reason: "GcgReason" = betterproto.enum_field(13)
    controller_id: int = betterproto.uint32_field(9)
    zone: "GcgZoneType" = betterproto.enum_field(15)


@dataclass(eq=False, repr=False)
class GcgMsgSelectOnStage(betterproto.Message):
    reason: "GcgReason" = betterproto.enum_field(11)
    controller_id: int = betterproto.uint32_field(12)
    card_guid: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class GcgMsgSelectOnStageByEffect(betterproto.Message):
    card_guid: int = betterproto.uint32_field(15)
    controller_id: int = betterproto.uint32_field(2)
    skill_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GcgCardSkillLimitsInfo(betterproto.Message):
    skill_limits_list: List["GcgSkillLimitsInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GcgMsgSkillLimitsChange(betterproto.Message):
    card_limits_change_map: Dict[int, "GcgCardSkillLimitsInfo"] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class GcgMsgSkillResult(betterproto.Message):
    unk3300_nigdciglake: int = betterproto.uint32_field(9)
    target_card_guid: int = betterproto.uint32_field(13)
    unk3300_pdbagjinfpf: int = betterproto.uint32_field(4)
    detail_list: List["GcgDamageDetail"] = betterproto.message_field(5)
    skill_id: int = betterproto.uint32_field(14)
    damage: int = betterproto.uint32_field(7)
    unk3300_epndciajojp: int = betterproto.uint32_field(12)
    unk3300_nnjaoehnppd: int = betterproto.uint32_field(15)
    unk3300_lpglocddpcl: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class GcgMsgTokenChange(betterproto.Message):
    token_type: int = betterproto.uint32_field(7)
    unk3300_llghgealddi: int = betterproto.uint32_field(10)
    reason: "GcgReason" = betterproto.enum_field(3)
    unk3300_lcnkbfbjdfm: int = betterproto.uint32_field(12)
    card_guid: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class GcgMsgUpdateController(betterproto.Message):
    allow_controller_map: List["Uint32Pair"] = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class GcgMsgUseSkill(betterproto.Message):
    skill_id: int = betterproto.uint32_field(3)
    card_guid: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class GcgMsgUseSkillEnd(betterproto.Message):
    card_guid: int = betterproto.uint32_field(9)
    skill_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GcgMsgWaitingListChange(betterproto.Message):
    controller_id: int = betterproto.uint32_field(11)
    cur_index: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GcgMessage(betterproto.Message):
    token_change: "GcgMsgTokenChange" = betterproto.message_field(2, group="message")
    phase_change: "GcgMsgPhaseChange" = betterproto.message_field(10, group="message")
    add_cards: "GcgMsgAddCards" = betterproto.message_field(5, group="message")
    remove_cards: "GcgMsgRemoveCards" = betterproto.message_field(12, group="message")
    select_on_stage: "GcgMsgSelectOnStage" = betterproto.message_field(
        6, group="message"
    )
    dice_roll: "GcgMsgDiceRoll" = betterproto.message_field(14, group="message")
    dice_reroll: "GcgMsgDiceReroll" = betterproto.message_field(15, group="message")
    pass_: "GcgMsgPass" = betterproto.message_field(8, group="message")
    char_die: "GcgMsgCharDie" = betterproto.message_field(4, group="message")
    skill_result: "GcgMsgSkillResult" = betterproto.message_field(3, group="message")
    cost_dice: "GcgMsgCostDice" = betterproto.message_field(13, group="message")
    add_dice: "GcgMsgAddDice" = betterproto.message_field(7, group="message")
    move_card: "GcgMsgMoveCard" = betterproto.message_field(11, group="message")
    use_skill: "GcgMsgUseSkill" = betterproto.message_field(1, group="message")
    new_card: "GcgMsgNewCard" = betterproto.message_field(296, group="message")
    update_controller: "GcgMsgUpdateController" = betterproto.message_field(
        1111, group="message"
    )
    modify_add: "GcgMsgModifyAdd" = betterproto.message_field(1733, group="message")
    modify_remove: "GcgMsgModifyRemove" = betterproto.message_field(
        2014, group="message"
    )
    use_skill_end: "GcgMsgUseSkillEnd" = betterproto.message_field(
        1368, group="message"
    )
    duel_data_change: "GcgMsgDuelDataChange" = betterproto.message_field(
        1791, group="message"
    )
    client_perform: "GcgMsgClientPerform" = betterproto.message_field(
        1677, group="message"
    )
    game_over: "GcgMsgGameOver" = betterproto.message_field(632, group="message")
    op_timer: "GcgMsgOpTimer" = betterproto.message_field(154, group="message")
    waiting_list_change: "GcgMsgWaitingListChange" = betterproto.message_field(
        1991, group="message"
    )
    card_update: "GcgMsgCardUpdate" = betterproto.message_field(1702, group="message")
    select_on_stage_by_effect: "GcgMsgSelectOnStageByEffect" = (
        betterproto.message_field(1737, group="message")
    )
    cost_revise: "GcgMsgCostRevise" = betterproto.message_field(468, group="message")
    phase_continue: "GcgMsgPhaseContinue" = betterproto.message_field(
        1157, group="message"
    )
    pve_intention_info: "GcgMsgPveIntentionInfo" = betterproto.message_field(
        850, group="message"
    )
    pve_intention_change: "GcgMsgPveIntentionChange" = betterproto.message_field(
        1268, group="message"
    )
    skill_limits_change: "GcgMsgSkillLimitsChange" = betterproto.message_field(
        710, group="message"
    )
    no_damage_skill_result: "GcgMsgNoDamageSkillResult" = betterproto.message_field(
        773, group="message"
    )
    reaction_begin: "GcgMsgReactionBegin" = betterproto.message_field(
        243, group="message"
    )
    reaction_end: "GcgMsgReactionEnd" = betterproto.message_field(1172, group="message")


@dataclass(eq=False, repr=False)
class GcgMessagePack(betterproto.Message):
    action_type: "GcgActionType" = betterproto.enum_field(9)
    msg_list: List["GcgMessage"] = betterproto.message_field(5)
    controller_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class GcgpveIntention(betterproto.Message):
    skill_id_list: List[int] = betterproto.uint32_field(14)
    card_guid: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class GcgPhase(betterproto.Message):
    phase_type: "GcgPhaseType" = betterproto.enum_field(4)
    allow_controller_map: Dict[int, int] = betterproto.map_field(
        12, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class GcgWaitingCharacter(betterproto.Message):
    cond_count: int = betterproto.uint32_field(1)
    card_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class GcgZone(betterproto.Message):
    card_list: List[int] = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class GcgPlayerField(betterproto.Message):
    unk3300_ikjmgahcfpm: int = betterproto.uint32_field(5)
    modify_zone_map: Dict[int, "GcgZone"] = betterproto.map_field(
        7, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    unk3300_gghkffadeal: int = betterproto.uint32_field(731)
    unk3300_aopjiohmpof: "GcgZone" = betterproto.message_field(10)
    unk3300_fdfphndojml: int = betterproto.uint32_field(12)
    unk3300_iplmhkcndle: "GcgZone" = betterproto.message_field(1)
    unk3300_eihomdlenmk: "GcgZone" = betterproto.message_field(9)
    waiting_list: List["GcgWaitingCharacter"] = betterproto.message_field(2)
    unk3300_pbecinkkhnd: int = betterproto.uint32_field(15)
    controller_id: int = betterproto.uint32_field(6)
    unk3300_indjnjjjnkl: "GcgZone" = betterproto.message_field(11)
    unk3300_efnaefbechd: "GcgZone" = betterproto.message_field(4)
    is_passed: bool = betterproto.bool_field(8)
    intention_list: List["GcgpveIntention"] = betterproto.message_field(304)
    dice_side_list: List["GcgDiceSideType"] = betterproto.enum_field(13)
    unk3300_fjnpfbihfgd: int = betterproto.uint32_field(3)
    unk3300_glniflokbpm: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class Unk3300Adhencifkni(betterproto.Message):
    begin_time: int = betterproto.uint64_field(6)
    time_stamp: int = betterproto.uint64_field(13)
    controller_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class GcgDuel(betterproto.Message):
    server_seq: int = betterproto.uint32_field(3)
    show_info_list: List["GcgControllerShowInfo"] = betterproto.message_field(7)
    forbid_finish_challenge_list: List[int] = betterproto.uint32_field(192)
    card_list: List["GcgCard"] = betterproto.message_field(1)
    unk3300_bianmopdeho: int = betterproto.uint32_field(9)
    cost_revise: "GcgCostReviseInfo" = betterproto.message_field(8)
    game_id: int = betterproto.uint32_field(4)
    field_list: List["GcgPlayerField"] = betterproto.message_field(5)
    unk3300_cdcmbokblak: List["Unk3300Adhencifkni"] = betterproto.message_field(1987)
    business_type: "GcgGameBusinessType" = betterproto.enum_field(13)
    intention_list: List["GcgpveIntention"] = betterproto.message_field(2)
    challenge_list: List["GcgDuelChallenge"] = betterproto.message_field(1617)
    history_card_list: List["GcgCard"] = betterproto.message_field(1872)
    round: int = betterproto.uint32_field(11)
    controller_id: int = betterproto.uint32_field(12)
    history_msg_pack_list: List["GcgMessagePack"] = betterproto.message_field(797)
    unk3300_jhddnkfpina: int = betterproto.uint32_field(10)
    card_id_list: List[int] = betterproto.uint32_field(6)
    unk3300_jbbmbkgoono: int = betterproto.uint32_field(15)
    phase: "GcgPhase" = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class GcgAskDuelRsp(betterproto.Message):
    duel: "GcgDuel" = betterproto.message_field(9)
    retcode: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class GcgBackToDuelReq(betterproto.Message):
    is_back: bool = betterproto.bool_field(10)


@dataclass(eq=False, repr=False)
class GcgBackToDuelRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(14)


@dataclass(eq=False, repr=False)
class GcgBasicDataNotify(betterproto.Message):
    level: int = betterproto.uint32_field(6)
    exp: int = betterproto.uint32_field(4)
    level_reward_taken_list: List[int] = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class GcgBossChallengeData(betterproto.Message):
    unlock_level_id_list: List[int] = betterproto.uint32_field(3)
    id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class GcgBossChallengeUpdateNotify(betterproto.Message):
    boss_challenge: "GcgBossChallengeData" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class GcgChallengeData(betterproto.Message):
    challenge_id: int = betterproto.uint32_field(1)
    challenge_type: int = betterproto.uint32_field(2)
    param_list: List[int] = betterproto.uint32_field(3)
    progress: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class GcgChallengeUpdateNotify(betterproto.Message):
    server_seq: int = betterproto.uint32_field(15)
    challenge: "GcgDuelChallenge" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GcgSkillPreviewCardInfo(betterproto.Message):
    card_guid: int = betterproto.uint32_field(10)
    face_type: int = betterproto.uint32_field(2)
    controller_id: int = betterproto.uint32_field(11)
    card_id: int = betterproto.uint32_field(8)
    zone_type: "GcgZoneType" = betterproto.enum_field(14)
    owner_card_guid: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GcgSkillPreviewReactionInfo(betterproto.Message):
    unk3300_aenpledpmjh: int = betterproto.uint32_field(3)
    unk3300_pdehphjfakd: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GcgSkillPreviewElementReactionInfo(betterproto.Message):
    unk3300_jobnbdjhapj: List[int] = betterproto.uint32_field(12)
    unk3300_belbndndgao: List[int] = betterproto.uint32_field(14)
    reaction_list: List["GcgSkillPreviewReactionInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GcgSkillPreviewExtraInfo(betterproto.Message):
    unk3300_kiffjgfdnka: List["GcgSkillPreviewCardInfo"] = betterproto.message_field(6)
    unk3300_gmemmdjkcgn: List["GcgSkillPreviewCardInfo"] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class GcgSkillPreviewHpInfo(betterproto.Message):
    change_type: "GcgSkillHpChangeType" = betterproto.enum_field(8)
    hp_change_value: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class GcgSkillPreviewOnstageChangeInfo(betterproto.Message):
    unk3300_ehhdppfdifb: int = betterproto.uint32_field(8)
    unk3300_baladgfapkl: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class GcgSkillPreviewTokenInfo(betterproto.Message):
    token_type: int = betterproto.uint32_field(11)
    unk3300_mmikppjmhad: int = betterproto.uint32_field(10)
    unk3300_ikicjmefeon: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GcgSkillPreviewTokenChangeInfo(betterproto.Message):
    token_change_list: List["GcgSkillPreviewTokenInfo"] = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class GcgSkillPreviewInfo(betterproto.Message):
    change_onstage_character_list: List[
        "GcgSkillPreviewOnstageChangeInfo"
    ] = betterproto.message_field(6)
    unk3300_dajfjednlkk: List["GcgSkillPreviewCardInfo"] = betterproto.message_field(15)
    skill_id: int = betterproto.uint32_field(12)
    hp_info_map: Dict[int, "GcgSkillPreviewHpInfo"] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    unk3300_agnongelfgc: List["GcgSkillPreviewCardInfo"] = betterproto.message_field(2)
    extra_info: "GcgSkillPreviewExtraInfo" = betterproto.message_field(11)
    reaction_info_map: Dict[
        int, "GcgSkillPreviewElementReactionInfo"
    ] = betterproto.map_field(14, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE)
    card_token_change_map: Dict[
        int, "GcgSkillPreviewTokenChangeInfo"
    ] = betterproto.map_field(8, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE)


@dataclass(eq=False, repr=False)
class GcgChangeOnstageInfo(betterproto.Message):
    is_quick: bool = betterproto.bool_field(11)
    card_guid: int = betterproto.uint32_field(6)
    change_onstage_preview_info: "GcgSkillPreviewInfo" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class GcgClientSettleReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GcgClientSettleRsp(betterproto.Message):
    close_time: int = betterproto.uint32_field(5)
    retcode: int = betterproto.int32_field(9)


@dataclass(eq=False, repr=False)
class GcgDebugReplayNotify(betterproto.Message):
    json_str: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class GcgdsBanCardNotify(betterproto.Message):
    card_list: List[int] = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class GcgdsCardBackUnlockNotify(betterproto.Message):
    card_back_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class GcgdsCardData(betterproto.Message):
    num: int = betterproto.uint32_field(11)
    face_type: int = betterproto.uint32_field(5)
    card_id: int = betterproto.uint32_field(4)
    unk3300_cigghhihjfm: List[int] = betterproto.uint32_field(14)
    unk3300_oafmdjcpcjh: List[int] = betterproto.uint32_field(6)
    proficiency: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class GcgdsCardFaceUnlockNotify(betterproto.Message):
    face_type: int = betterproto.uint32_field(13)
    card_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class GcgdsCardFaceUpdateNotify(betterproto.Message):
    card_id: int = betterproto.uint32_field(9)
    face_type: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GcgdsCardNumChangeNotify(betterproto.Message):
    num: int = betterproto.uint32_field(1)
    card_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class GcgdsCardProficiencyNotify(betterproto.Message):
    proficiency: int = betterproto.uint32_field(10)
    card_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class GcgdsChangeCardBackReq(betterproto.Message):
    card_back_id: int = betterproto.uint32_field(15)
    deck_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class GcgdsChangeCardBackRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(13)
    card_back_id: int = betterproto.uint32_field(5)
    deck_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class GcgdsChangeCardFaceReq(betterproto.Message):
    card_id: int = betterproto.uint32_field(9)
    face_type: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class GcgdsChangeCardFaceRsp(betterproto.Message):
    face_type: int = betterproto.uint32_field(9)
    retcode: int = betterproto.int32_field(5)
    card_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class GcgdsChangeCurDeckReq(betterproto.Message):
    deck_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class GcgdsChangeCurDeckRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(6)
    deck_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GcgdsChangeDeckNameReq(betterproto.Message):
    unk3300_oipmfiibphb: bool = betterproto.bool_field(11)
    deck_id: int = betterproto.uint32_field(2)
    name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GcgdsChangeDeckNameRsp(betterproto.Message):
    unk3300_oipmfiibphb: bool = betterproto.bool_field(5)
    retcode: int = betterproto.int32_field(15)
    deck_id: int = betterproto.uint32_field(10)
    name: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class GcgdsChangeFieldReq(betterproto.Message):
    field_id: int = betterproto.uint32_field(3)
    deck_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class GcgdsChangeFieldRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(14)
    deck_id: int = betterproto.uint32_field(6)
    field_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GcgdsCurDeckChangeNotify(betterproto.Message):
    deck_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GcgdsDeckData(betterproto.Message):
    create_time: int = betterproto.fixed32_field(5)
    field_id: int = betterproto.uint32_field(13)
    card_back_id: int = betterproto.uint32_field(9)
    card_list: List[int] = betterproto.uint32_field(1)
    character_card_list: List[int] = betterproto.uint32_field(7)
    id: int = betterproto.uint32_field(12)
    name: str = betterproto.string_field(10)
    is_valid: bool = betterproto.bool_field(15)


@dataclass(eq=False, repr=False)
class GcgdsDataNotify(betterproto.Message):
    cur_deck_id: int = betterproto.uint32_field(8)
    deck_list: List["GcgdsDeckData"] = betterproto.message_field(3)
    unk3300_gebhjagkeid: List[int] = betterproto.uint32_field(10)
    card_list: List["GcgdsCardData"] = betterproto.message_field(9)
    unk3300_aaeaecgphbh: List[int] = betterproto.uint32_field(5)
    unk3300_jjceinfhkog: List[int] = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GcgdsDeckSaveReq(betterproto.Message):
    deck_id: int = betterproto.uint32_field(4)
    card_list: List[int] = betterproto.uint32_field(11)
    character_card_list: List[int] = betterproto.uint32_field(6)
    name: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class GcgdsDeckSaveRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(9)
    is_valid: bool = betterproto.bool_field(5)
    deck_id: int = betterproto.uint32_field(15)
    create_time: int = betterproto.fixed32_field(7)


@dataclass(eq=False, repr=False)
class GcgdsDeckUnlockNotify(betterproto.Message):
    deck_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class GcgdsDeckUpdateNotify(betterproto.Message):
    is_valid: bool = betterproto.bool_field(2)
    deck_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class GcgdsDeleteDeckReq(betterproto.Message):
    deck_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GcgdsDeleteDeckRsp(betterproto.Message):
    deck_id: int = betterproto.uint32_field(14)
    retcode: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class GcgdsFieldUnlockNotify(betterproto.Message):
    field_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class GcgdsTakeCardProficiencyRewardReq(betterproto.Message):
    reward_index: int = betterproto.uint32_field(15)
    card_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GcgdsTakeCardProficiencyRewardRsp(betterproto.Message):
    card_id: int = betterproto.uint32_field(6)
    retcode: int = betterproto.int32_field(1)
    reward_index: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class GcgDuelExtra(betterproto.Message):
    card_id_list: List[int] = betterproto.uint32_field(1)
    field_id: int = betterproto.uint32_field(2)
    card_back_id: int = betterproto.uint32_field(3)
    card_face_map: Dict[int, int] = betterproto.map_field(
        4, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    challenge_list: List["GcgChallengeData"] = betterproto.message_field(5)
    score: int = betterproto.uint32_field(6)
    is_match_ai: bool = betterproto.bool_field(7)
    ai_deck_id: int = betterproto.uint32_field(8)
    is_internal: bool = betterproto.bool_field(9)
    forbid_finish_challenge_list: List[int] = betterproto.uint32_field(10)
    level: int = betterproto.uint32_field(11)
    client_version: int = betterproto.uint32_field(12)
    platform_type: "PlatformType" = betterproto.enum_field(13)


@dataclass(eq=False, repr=False)
class GcgPlayerBriefData(betterproto.Message):
    online_id: str = betterproto.string_field(5)
    uid: int = betterproto.uint32_field(9)
    controller_id: int = betterproto.uint32_field(10)
    profile_picture: "ProfilePicture" = betterproto.message_field(11)
    nick_name: str = betterproto.string_field(1)
    card_face_map: Dict[int, int] = betterproto.map_field(
        14, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    card_id_list: List[int] = betterproto.uint32_field(13)
    psn_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GcgGameBriefData(betterproto.Message):
    unk3300_ncldognchgf: int = betterproto.uint32_field(13)
    business_type: "GcgGameBusinessType" = betterproto.enum_field(8)
    unk3300_fjjdmibibjn: int = betterproto.uint32_field(14)
    platform_type: int = betterproto.uint32_field(6)
    game_id: int = betterproto.uint32_field(12)
    player_brief_list: List["GcgPlayerBriefData"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class GcgGameBriefDataNotify(betterproto.Message):
    gcg_brief_data: "GcgGameBriefData" = betterproto.message_field(3)
    is_new_game: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class GcgGameCreateFailReasonNotify(betterproto.Message):
    reason: "GcgGameCreateFailReasonNotifyGcgGameCreateReason" = betterproto.enum_field(
        7
    )


@dataclass(eq=False, repr=False)
class GcgGameMaxNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GcgGrowthLevelNotify(betterproto.Message):
    level: int = betterproto.uint32_field(10)
    exp: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GcgGrowthLevelRewardNotify(betterproto.Message):
    level_reward_taken_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GcgGrowthLevelTakeRewardReq(betterproto.Message):
    level: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class GcgGrowthLevelTakeRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(4)
    level: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class GcgHeartBeatNotify(betterproto.Message):
    server_seq: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class GcgInitFinishReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GcgInitFinishRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class GcgInviteBattleNotify(betterproto.Message):
    confirm_end_time: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GcgInviteGuestBattleReq(betterproto.Message):
    uid: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class GcgInviteGuestBattleRsp(betterproto.Message):
    uid: int = betterproto.uint32_field(12)
    retcode: int = betterproto.int32_field(13)
    punish_end_time: int = betterproto.uint32_field(3)
    confirm_end_time: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class GcgLevelChallengeDeleteNotify(betterproto.Message):
    level_id_list: List[int] = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GcgLevelChallengeFinishNotify(betterproto.Message):
    level_id: int = betterproto.uint32_field(14)
    finished_challenge_id_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GcgLevelData(betterproto.Message):
    finished_challenge_id_list: List[int] = betterproto.uint32_field(13)
    level_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class GcgLevelChallengeNotify(betterproto.Message):
    unlock_boss_challenge_list: List[
        "GcgBossChallengeData"
    ] = betterproto.message_field(11)
    unlock_world_challenge_list: List[int] = betterproto.uint32_field(3)
    level_list: List["GcgLevelData"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class MatchPlayerInfo(betterproto.Message):
    is_agreed: bool = betterproto.bool_field(4)
    player_info: "OnlinePlayerInfo" = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class GcgMatchInfo(betterproto.Message):
    player_list: List["MatchPlayerInfo"] = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class GcgMessagePackNotify(betterproto.Message):
    server_seq: int = betterproto.uint32_field(2)
    msg_pack_list: List["GcgMessagePack"] = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class GcgOperationAttack(betterproto.Message):
    skill_id: int = betterproto.uint32_field(15)
    cost_dice_index_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GcgOperationOnStageSelect(betterproto.Message):
    cost_dice_index_list: List[int] = betterproto.uint32_field(10)
    card_guid: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GcgOperationPass(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GcgOperationPlayCard(betterproto.Message):
    replace_card_guid: int = betterproto.uint32_field(8)
    target_card_guid_list: List[int] = betterproto.uint32_field(14)
    card_guid: int = betterproto.uint32_field(1)
    cost_dice_index_list: List[int] = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class GcgOperationReboot(betterproto.Message):
    dice_index_list: List[int] = betterproto.uint32_field(2)
    cost_card_guid_list: List[int] = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class GcgOperationRedraw(betterproto.Message):
    card_list: List[int] = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class GcgOperationReroll(betterproto.Message):
    dice_index_list: List[int] = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class GcgOperationSurrender(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GcgOperation(betterproto.Message):
    op_redraw: "GcgOperationRedraw" = betterproto.message_field(3, group="op")
    op_select_on_stage: "GcgOperationOnStageSelect" = betterproto.message_field(
        9, group="op"
    )
    op_reroll: "GcgOperationReroll" = betterproto.message_field(4, group="op")
    op_attack: "GcgOperationAttack" = betterproto.message_field(7, group="op")
    op_pass: "GcgOperationPass" = betterproto.message_field(6, group="op")
    op_play_card: "GcgOperationPlayCard" = betterproto.message_field(15, group="op")
    op_reboot: "GcgOperationReboot" = betterproto.message_field(5, group="op")
    op_surrender: "GcgOperationSurrender" = betterproto.message_field(10, group="op")


@dataclass(eq=False, repr=False)
class GcgReplayControllerData(betterproto.Message):
    card_id_list: List[int] = betterproto.uint32_field(12)
    controller_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GcgReplayOperationData(betterproto.Message):
    op: "GcgOperation" = betterproto.message_field(1)
    controller_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class Unk3300Ppkpcocomdh(betterproto.Message):
    controller_id: int = betterproto.uint32_field(12)
    op_seq: int = betterproto.uint32_field(13)
    gm_msg: str = betterproto.string_field(2, group="detail")
    duel: "GcgDuel" = betterproto.message_field(14, group="detail")


@dataclass(eq=False, repr=False)
class GcgOperationReplay(betterproto.Message):
    unk3300_fkbljimbhea: List["Unk3300Ppkpcocomdh"] = betterproto.message_field(6)
    seed: int = betterproto.uint32_field(1)
    operation_data_list: List["GcgReplayOperationData"] = betterproto.message_field(8)
    game_id: int = betterproto.uint32_field(2)
    controller_data_list: List["GcgReplayControllerData"] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class GcgOperationReq(betterproto.Message):
    redirect_uid: int = betterproto.uint32_field(12)
    op_seq: int = betterproto.uint32_field(10)
    op: "GcgOperation" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class GcgOperationRsp(betterproto.Message):
    op_seq: int = betterproto.uint32_field(8)
    retcode: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class GcgPlayerGcgState(betterproto.Message):
    uid: int = betterproto.uint32_field(14)
    unk3300_gikomfnnaaa: bool = betterproto.bool_field(11)
    unk3300_dekgmkccgeg: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class GcgResourceStateNotify(betterproto.Message):
    is_complete: bool = betterproto.bool_field(12)


@dataclass(eq=False, repr=False)
class GcgSettleNotify(betterproto.Message):
    reward_item_list: List["ItemParam"] = betterproto.message_field(8)
    finished_challenge_id_list: List[int] = betterproto.uint32_field(1)
    game_id: int = betterproto.uint32_field(3)
    is_win: bool = betterproto.bool_field(2)
    business_type: "GcgGameBusinessType" = betterproto.enum_field(5)
    win_controller_id: int = betterproto.uint32_field(11)
    forbid_finish_challenge_list: List[int] = betterproto.uint32_field(10)
    reason: "GcgEndReason" = betterproto.enum_field(4)


@dataclass(eq=False, repr=False)
class GcgSettleOptionReq(betterproto.Message):
    option: "GcgSettleOption" = betterproto.enum_field(9)


@dataclass(eq=False, repr=False)
class GcgSettleOptionRsp(betterproto.Message):
    option: "GcgSettleOption" = betterproto.enum_field(2)
    retcode: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class GcgSkillPreviewAskReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GcgSkillPreviewAskRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class GcgSkillPreviewPlayCardInfo(betterproto.Message):
    hand_card_guid: int = betterproto.uint32_field(15)
    play_card_info: "GcgSkillPreviewInfo" = betterproto.message_field(10)
    target_card_guid: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class GcgSkillPreviewNotify(betterproto.Message):
    controller_id: int = betterproto.uint32_field(13)
    skill_preview_list: List["GcgSkillPreviewInfo"] = betterproto.message_field(15)
    change_onstage_preview_list: List[
        "GcgChangeOnstageInfo"
    ] = betterproto.message_field(3)
    play_card_list: List["GcgSkillPreviewPlayCardInfo"] = betterproto.message_field(11)
    onstage_card_guid: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GcgStartChallengeByCheckRewardReq(betterproto.Message):
    level_id: int = betterproto.uint32_field(13)
    level_type: "GcgLevelType" = betterproto.enum_field(3)
    config_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class GcgStartChallengeByCheckRewardRsp(betterproto.Message):
    unk3300_gpdpcjlhbde: List[int] = betterproto.uint32_field(3)
    level_id: int = betterproto.uint32_field(5)
    unk3300_pkjmejkapbi: List[int] = betterproto.uint32_field(8)
    level_type: "GcgLevelType" = betterproto.enum_field(2)
    config_id: int = betterproto.uint32_field(9)
    retcode: int = betterproto.int32_field(12)


@dataclass(eq=False, repr=False)
class GcgStartChallengeReq(betterproto.Message):
    level_type: "GcgLevelType" = betterproto.enum_field(12)
    config_id: int = betterproto.uint32_field(7)
    level_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GcgStartChallengeRsp(betterproto.Message):
    config_id: int = betterproto.uint32_field(8)
    level_id: int = betterproto.uint32_field(5)
    level_type: "GcgLevelType" = betterproto.enum_field(11)
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class GcgTavernNpcInfo(betterproto.Message):
    id: int = betterproto.uint32_field(9)
    scene_point_id: int = betterproto.uint32_field(15)
    level_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GcgTavernNpcInfoNotify(betterproto.Message):
    unk3300_fkakhmmiebc: List["GcgTavernNpcInfo"] = betterproto.message_field(12)
    unk3300_bamlnendlcm: List["GcgTavernNpcInfo"] = betterproto.message_field(2)
    character_npc: "GcgTavernNpcInfo" = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class GcgtcInviteReq(betterproto.Message):
    character_id: int = betterproto.uint32_field(8)
    level_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class GcgtcInviteRsp(betterproto.Message):
    character_id: int = betterproto.uint32_field(9)
    retcode: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class GcgtcTavernChallengeData(betterproto.Message):
    unlock_level_id_list: List[int] = betterproto.uint32_field(13)
    character_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class GcgtcTavernChallengeDataNotify(betterproto.Message):
    tavern_challenge_list: List["GcgtcTavernChallengeData"] = betterproto.message_field(
        5
    )


@dataclass(eq=False, repr=False)
class GcgtcTavernChallengeUpdateNotify(betterproto.Message):
    tavern_challenge: "GcgtcTavernChallengeData" = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class GcgtcTavernInfoNotify(betterproto.Message):
    level_id: int = betterproto.uint32_field(5)
    unk3300_imfjbnfmchm: bool = betterproto.bool_field(11)
    unk3300_mbgmhbnbkbk: bool = betterproto.bool_field(8)
    point_id: int = betterproto.uint32_field(4)
    element_type: int = betterproto.uint32_field(6)
    avatar_id: int = betterproto.uint32_field(9)
    character_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class GcgWeekChallengeInfo(betterproto.Message):
    npc_id: int = betterproto.uint32_field(9)
    unlock_time: int = betterproto.uint32_field(8)
    is_finished: bool = betterproto.bool_field(12)


@dataclass(eq=False, repr=False)
class GcgWeekChallengeInfoNotify(betterproto.Message):
    challenge_info_list: List["GcgWeekChallengeInfo"] = betterproto.message_field(3)
    next_refresh_time: int = betterproto.uint32_field(4)
    is_notify_npc_change: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class GcgWorldChallengeUnlockNotify(betterproto.Message):
    unlock_id_list: List[int] = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GcgWorldPlayerGcgStateReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GcgWorldPlayerGcgStateRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)
    player_state: List["GcgPlayerGcgState"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GearColumnInfo(betterproto.Message):
    unk3300_ghibpoiaigf: int = betterproto.uint32_field(6)
    unk3300_keeglhmbakm: bool = betterproto.bool_field(8)
    unk3300_edllmbgndeh: int = betterproto.uint32_field(2)
    gear_id: int = betterproto.uint32_field(7)
    unk3300_hgikkdobank: bool = betterproto.bool_field(15)


@dataclass(eq=False, repr=False)
class GearActivityFinishPlayGearReq(betterproto.Message):
    use_clue: bool = betterproto.bool_field(10)
    level_id: int = betterproto.uint32_field(3)
    is_success: bool = betterproto.bool_field(8)
    gear_column_info_list: List["GearColumnInfo"] = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class GearActivityFinishPlayGearRsp(betterproto.Message):
    level_id: int = betterproto.uint32_field(10)
    retcode: int = betterproto.int32_field(2)
    is_success: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class GearActivityFinishPlayPictureReq(betterproto.Message):
    is_success: bool = betterproto.bool_field(12)


@dataclass(eq=False, repr=False)
class GearActivityFinishPlayPictureRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(12)
    is_success: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class GearActivityStartPlayGearReq(betterproto.Message):
    level_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class GearActivityStartPlayGearRsp(betterproto.Message):
    level_id: int = betterproto.uint32_field(4)
    retcode: int = betterproto.int32_field(12)


@dataclass(eq=False, repr=False)
class GearActivityStartPlayPictureReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GearActivityStartPlayPictureRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class GeneralMatchInfo(betterproto.Message):
    match_id: int = betterproto.uint32_field(8)
    match_param: int = betterproto.uint32_field(3)
    player_list: List["MatchPlayerInfo"] = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class GetActivityInfoReq(betterproto.Message):
    activity_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetActivityInfoRsp(betterproto.Message):
    disable_transfer_point_interaction_list: List[
        "Uint32Pair"
    ] = betterproto.message_field(10)
    retcode: int = betterproto.int32_field(6)
    activity_info_list: List["ActivityInfo"] = betterproto.message_field(2)
    activated_sale_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetActivityScheduleReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetActivityScheduleRsp(betterproto.Message):
    activity_schedule_list: List["ActivityScheduleInfo"] = betterproto.message_field(15)
    retcode: int = betterproto.int32_field(8)
    remain_fly_sea_lamp_num: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class GetActivityShopSheetInfoReq(betterproto.Message):
    shop_type: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class GetActivityShopSheetInfoRsp(betterproto.Message):
    shop_type: int = betterproto.uint32_field(15)
    retcode: int = betterproto.int32_field(7)
    sheet_info_list: List["ActivityShopSheetInfo"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class GetAllActivatedBargainDataReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetAllActivatedBargainDataRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(12)
    snapshot_list: List["BargainSnapshot"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class GetAllH5ActivityInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class H5ActivityInfo(betterproto.Message):
    is_entrance_open: bool = betterproto.bool_field(2)
    unk3300_obkebdckhjf: int = betterproto.uint32_field(1)
    unk3300_dmbnfecakbh: int = betterproto.uint32_field(14)
    content_close_time: int = betterproto.uint32_field(4)
    url: str = betterproto.string_field(3)
    prefab_path: str = betterproto.string_field(15)
    begin_time: int = betterproto.uint32_field(5)
    end_time: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class GetAllH5ActivityInfoRsp(betterproto.Message):
    client_red_dot_timestamp: int = betterproto.uint32_field(3)
    h5_activity_info_list: List["H5ActivityInfo"] = betterproto.message_field(5)
    retcode: int = betterproto.int32_field(14)


@dataclass(eq=False, repr=False)
class GetAllMailNotify(betterproto.Message):
    is_collected: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class GetAllMailReq(betterproto.Message):
    is_collected: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class MailItem(betterproto.Message):
    equip_param: "EquipParam" = betterproto.message_field(1)
    delete_info: "MaterialDeleteInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MailTextContent(betterproto.Message):
    title: str = betterproto.string_field(1)
    content: str = betterproto.string_field(2)
    sender: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class MailData(betterproto.Message):
    mail_id: int = betterproto.uint32_field(1)
    mail_text_content: "MailTextContent" = betterproto.message_field(4)
    item_list: List["MailItem"] = betterproto.message_field(7)
    send_time: int = betterproto.uint32_field(8)
    expire_time: int = betterproto.uint32_field(9)
    importance: int = betterproto.uint32_field(10)
    is_read: bool = betterproto.bool_field(11)
    is_attachment_got: bool = betterproto.bool_field(12)
    config_id: int = betterproto.uint32_field(13)
    argument_list: List[str] = betterproto.string_field(14)
    collect_state: "MailCollectState" = betterproto.enum_field(15)


@dataclass(eq=False, repr=False)
class GetAllMailResultNotify(betterproto.Message):
    unk3300_lmcaadpaicm: int = betterproto.uint32_field(13)
    transaction: str = betterproto.string_field(14)
    is_collected: bool = betterproto.bool_field(12)
    retcode: int = betterproto.int32_field(7)
    mail_list: List["MailData"] = betterproto.message_field(2)
    unk3300_pgjihelkcea: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GetAllMailRsp(betterproto.Message):
    mail_list: List["MailData"] = betterproto.message_field(15)
    is_collected: bool = betterproto.bool_field(12)
    retcode: int = betterproto.int32_field(1)
    is_truncated: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class GetAllSceneGalleryInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class SceneGalleryBalloonInfo(betterproto.Message):
    scene_player_balloon_info_map: Dict[
        int, "BalloonPlayerInfo"
    ] = betterproto.map_field(13, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE)
    end_time: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class SceneGalleryBounceConjuringInfo(betterproto.Message):
    total_score: int = betterproto.uint32_field(4)
    total_destroyed_machine_count: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class SceneGalleryBrokenFloorInfo(betterproto.Message):
    end_time: int = betterproto.uint32_field(10)
    fall_count_map: Dict[int, int] = betterproto.map_field(
        15, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class SceneGalleryBulletInfo(betterproto.Message):
    hit_count_map: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    end_time: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class SceneGalleryBuoyantCombatInfo(betterproto.Message):
    score: int = betterproto.uint32_field(9)
    kill_special_monster_count: int = betterproto.uint32_field(13)
    kill_monster_count: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class SceneGalleryCharAmusementInfo(betterproto.Message):
    is_success: bool = betterproto.bool_field(13)
    max_score: int = betterproto.uint32_field(11)
    cur_score: int = betterproto.uint32_field(9)
    is_last_level: bool = betterproto.bool_field(10)
    is_finish: bool = betterproto.bool_field(14)


@dataclass(eq=False, repr=False)
class SceneGalleryCoinCollectInfo(betterproto.Message):
    unk3300_dkbjmljglib: int = betterproto.uint32_field(11)
    unk3300_cpldpcmbhoe: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class SceneGalleryCrystalLinkInfo(betterproto.Message):
    score: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class SceneGalleryEffigyChallengeV2Info(betterproto.Message):
    unk3300_micpckioeja: int = betterproto.uint32_field(1)
    unk3300_bmpckgjagpe: int = betterproto.uint32_field(8)
    unk3300_eogapbofhop: int = betterproto.uint32_field(2)
    unk3300_mbhbnipepnj: int = betterproto.uint32_field(7)
    unk3300_aieegibmofh: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class SceneGalleryFallInfo(betterproto.Message):
    end_time: int = betterproto.uint32_field(4)
    scene_player_fall_info_map: Dict[int, "FallPlayerInfo"] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class SceneGalleryFlowerInfo(betterproto.Message):
    cur_score: int = betterproto.uint32_field(5)
    target_score: int = betterproto.uint32_field(14)
    end_time: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class SceneGalleryFungusFighterCaptureInfo(betterproto.Message):
    is_hide_progress: bool = betterproto.bool_field(15)


@dataclass(eq=False, repr=False)
class SceneGalleryFungusFighterTrainingInfo(betterproto.Message):
    unk3300_gmlipfdmdog: int = betterproto.uint32_field(15)
    unk3300_ioeelcamdck: int = betterproto.uint32_field(8)
    max_monster_count: int = betterproto.uint32_field(10)
    unk3300_edhanegnmjm: int = betterproto.uint32_field(2)
    buff_id: int = betterproto.uint32_field(13)
    unk3300_hgpgncmndjn: int = betterproto.uint32_field(14)
    unk3300_ekamcpngcgh: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class PlaceInfo(betterproto.Message):
    pos: "Vector" = betterproto.message_field(1)
    rot: "Vector" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SceneGalleryHandballInfo(betterproto.Message):
    ball_place_info: "PlaceInfo" = betterproto.message_field(6)
    is_have_ball: bool = betterproto.bool_field(11)


@dataclass(eq=False, repr=False)
class SceneGalleryHideAndSeekInfo(betterproto.Message):
    unk3300_lhmhalkdbbn: List[int] = betterproto.uint32_field(10)
    unk3300_cnlkmgffaec: List[int] = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class SceneGalleryHomeBalloonInfo(betterproto.Message):
    score: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class SceneGalleryHomeSeekFurnitureInfo(betterproto.Message):
    unk3300_daeebieaomn: int = betterproto.uint32_field(3)
    unk3300_enkogpiehfd: int = betterproto.uint32_field(14)
    player_score_map: Dict[int, int] = betterproto.map_field(
        10, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    unk3300_lgeapljcjfh: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class SceneGalleryInstableSprayBuffInfo(betterproto.Message):
    unk3300_kkdflbmkgef: int = betterproto.uint64_field(3)
    buff_id: int = betterproto.uint32_field(6)
    unk3300_ephaabknlhc: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class SceneGalleryInstableSprayInfo(betterproto.Message):
    score: int = betterproto.uint32_field(10)
    buff_info_list: List[
        "SceneGalleryInstableSprayBuffInfo"
    ] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class SceneGalleryIrodoriMasterInfo(betterproto.Message):
    is_cg_viewed: bool = betterproto.bool_field(12)
    difficulty: int = betterproto.uint32_field(10)
    level_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class SceneGalleryIslandPartyDownHillInfo(betterproto.Message):
    max_kill_monster_count: int = betterproto.uint32_field(10)
    start_source: "GalleryStartSource" = betterproto.enum_field(2)
    total_kill_monster_count: int = betterproto.uint32_field(12)
    coin: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class SceneGalleryIslandPartyRaftInfo(betterproto.Message):
    coin: int = betterproto.uint32_field(12)
    unk3300_fbacmofgpgj: int = betterproto.uint32_field(6)
    point_id: int = betterproto.uint32_field(10)
    unk3300_hhekipecdak: int = betterproto.uint32_field(14)
    start_source: "GalleryStartSource" = betterproto.enum_field(7)
    unk3300_hnecegnmknk: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class SceneGalleryIslandPartySailInfo(betterproto.Message):
    coin: int = betterproto.uint32_field(5)
    unk3300_hcjgdhemblm: int = betterproto.uint32_field(4)
    unk3300_mjhmcapgbik: int = betterproto.uint32_field(6)
    unk3300_pfcjodgndci: int = betterproto.uint32_field(3)
    stage: "IslandPartySailStage" = betterproto.enum_field(14)
    unk3300_mjoiijibahf: int = betterproto.uint32_field(10)
    start_source: "GalleryStartSource" = betterproto.enum_field(13)


@dataclass(eq=False, repr=False)
class SceneGalleryLuminanceStoneChallengeInfo(betterproto.Message):
    clean_mud_count: int = betterproto.uint32_field(12)
    kill_special_monster_count: int = betterproto.uint32_field(3)
    score: int = betterproto.uint32_field(4)
    kill_monster_count: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class SceneGalleryMuqadasPotionInfo(betterproto.Message):
    score: int = betterproto.uint32_field(1)
    unk3300_nholggafmph: int = betterproto.uint32_field(5)
    unk3300_lkeicolmpii: int = betterproto.uint32_field(10)
    capture_weakness_count: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class SceneGalleryProgressInfo(betterproto.Message):
    key: str = betterproto.string_field(3)
    ui_form: int = betterproto.uint32_field(12)
    progress_stage_list: List[int] = betterproto.uint32_field(7)
    progress: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class SceneGallerySalvageEscortInfo(betterproto.Message):
    max_monster_count: int = betterproto.uint32_field(4)
    monster_count: int = betterproto.uint32_field(10)
    unk3300_fgdpfnpennc: int = betterproto.uint32_field(11)
    unk3300_hdmpoajlped: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class SceneGallerySalvagePreventInfo(betterproto.Message):
    monster_count: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SceneGallerySummerTimeV2BoatInfo(betterproto.Message):
    used_time: int = betterproto.uint32_field(6)
    param1: int = betterproto.uint32_field(5)
    param3: int = betterproto.uint32_field(12)
    param2: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SceneGallerySumoInfo(betterproto.Message):
    kill_elite_monster_num: int = betterproto.uint32_field(4)
    score: int = betterproto.uint32_field(7)
    kill_normal_monster_num: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class SceneGalleryTreasureSeelieInfo(betterproto.Message):
    progress: int = betterproto.uint32_field(1)
    goal: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class VintageHuntingFirstStageInfo(betterproto.Message):
    unk3300_hikadhblpeb: int = betterproto.uint32_field(10)
    score: int = betterproto.uint32_field(7)
    unk3300_ipajlkobdkc: int = betterproto.uint32_field(3)
    unk3300_nilgnhopgld: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class VintageHuntingSecondStageInfo(betterproto.Message):
    left_num: int = betterproto.uint32_field(15)
    total_num: int = betterproto.uint32_field(13)
    capture_animal_num: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class VintageHuntingThirdStageInfo(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class SceneGalleryVintageHuntingInfo(betterproto.Message):
    stage_id: int = betterproto.uint32_field(9)
    first_stage_info: "VintageHuntingFirstStageInfo" = betterproto.message_field(
        5, group="info"
    )
    second_stage_info: "VintageHuntingSecondStageInfo" = betterproto.message_field(
        14, group="info"
    )
    third_stage_info: "VintageHuntingThirdStageInfo" = betterproto.message_field(
        8, group="info"
    )


@dataclass(eq=False, repr=False)
class SceneGalleryWindFieldInfo(betterproto.Message):
    unk3300_mmonpdmiebn: int = betterproto.uint32_field(6)
    unk3300_ojhjpbcaona: int = betterproto.uint32_field(2)
    unk3300_nbibkfkocfk: int = betterproto.uint32_field(15)
    unk3300_ekmhmhjdhil: int = betterproto.uint32_field(13)
    unk3300_gnjkocljfnm: int = betterproto.uint32_field(7)
    unk3300_gnkcfhmdohj: int = betterproto.uint32_field(3)
    unk3300_ffodakmkgek: int = betterproto.uint32_field(4)
    unk3300_glnhbjjjink: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class SceneGalleryInfo(betterproto.Message):
    pre_start_end_time: int = betterproto.uint32_field(14)
    owner_uid: int = betterproto.uint32_field(9)
    progress_info_list: List["SceneGalleryProgressInfo"] = betterproto.message_field(10)
    gallery_id: int = betterproto.uint32_field(4)
    start_time: int = betterproto.uint32_field(3)
    player_count: int = betterproto.uint32_field(15)
    end_time: int = betterproto.uint32_field(1)
    stage: "GalleryStageType" = betterproto.enum_field(8)
    balloon_info: "SceneGalleryBalloonInfo" = betterproto.message_field(5, group="info")
    fall_info: "SceneGalleryFallInfo" = betterproto.message_field(7, group="info")
    flower_info: "SceneGalleryFlowerInfo" = betterproto.message_field(11, group="info")
    bullet_info: "SceneGalleryBulletInfo" = betterproto.message_field(12, group="info")
    broken_floor_info: "SceneGalleryBrokenFloorInfo" = betterproto.message_field(
        6, group="info"
    )
    hide_and_seek_info: "SceneGalleryHideAndSeekInfo" = betterproto.message_field(
        13, group="info"
    )
    buoyant_combat_info: "SceneGalleryBuoyantCombatInfo" = betterproto.message_field(
        1224, group="info"
    )
    bounce_conjuring_info: "SceneGalleryBounceConjuringInfo" = (
        betterproto.message_field(621, group="info")
    )
    handball_info: "SceneGalleryHandballInfo" = betterproto.message_field(
        1835, group="info"
    )
    sumo_info: "SceneGallerySumoInfo" = betterproto.message_field(877, group="info")
    salvage_prevent_info: "SceneGallerySalvagePreventInfo" = betterproto.message_field(
        1477, group="info"
    )
    salvage_escort_info: "SceneGallerySalvageEscortInfo" = betterproto.message_field(
        732, group="info"
    )
    home_balloon_info: "SceneGalleryHomeBalloonInfo" = betterproto.message_field(
        1866, group="info"
    )
    crystal_link_info: "SceneGalleryCrystalLinkInfo" = betterproto.message_field(
        666, group="info"
    )
    irodori_master_info: "SceneGalleryIrodoriMasterInfo" = betterproto.message_field(
        1679, group="info"
    )
    luminance_stone_challenge_info: "SceneGalleryLuminanceStoneChallengeInfo" = (
        betterproto.message_field(1847, group="info")
    )
    home_seek_furniture_info: "SceneGalleryHomeSeekFurnitureInfo" = (
        betterproto.message_field(540, group="info")
    )
    island_party_down_hill_info: "SceneGalleryIslandPartyDownHillInfo" = (
        betterproto.message_field(2047, group="info")
    )
    summer_time_v2_boat_info: "SceneGallerySummerTimeV2BoatInfo" = (
        betterproto.message_field(1890, group="info")
    )
    island_party_raft_info: "SceneGalleryIslandPartyRaftInfo" = (
        betterproto.message_field(244, group="info")
    )
    island_party_sail_info: "SceneGalleryIslandPartySailInfo" = (
        betterproto.message_field(633, group="info")
    )
    instable_spray_info: "SceneGalleryInstableSprayInfo" = betterproto.message_field(
        75, group="info"
    )
    muqadas_potion_info: "SceneGalleryMuqadasPotionInfo" = betterproto.message_field(
        496, group="info"
    )
    treasure_seelie_info: "SceneGalleryTreasureSeelieInfo" = betterproto.message_field(
        16, group="info"
    )
    vintage_hunting_info: "SceneGalleryVintageHuntingInfo" = betterproto.message_field(
        1470, group="info"
    )
    wind_field_info: "SceneGalleryWindFieldInfo" = betterproto.message_field(
        1001, group="info"
    )
    fungus_fighter_training_info: "SceneGalleryFungusFighterTrainingInfo" = (
        betterproto.message_field(861, group="info")
    )
    effigy_challenge_info: "SceneGalleryEffigyChallengeV2Info" = (
        betterproto.message_field(1577, group="info")
    )
    fungus_fighter_capture_info: "SceneGalleryFungusFighterCaptureInfo" = (
        betterproto.message_field(711, group="info")
    )
    char_amusement_info: "SceneGalleryCharAmusementInfo" = betterproto.message_field(
        152, group="info"
    )
    coin_collect_info: "SceneGalleryCoinCollectInfo" = betterproto.message_field(
        1243, group="info"
    )


@dataclass(eq=False, repr=False)
class GetAllSceneGalleryInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(3)
    gallery_info_list: List["SceneGalleryInfo"] = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class GetAllUnlockNameCardReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetAllUnlockNameCardRsp(betterproto.Message):
    name_card_list: List[int] = betterproto.uint32_field(11)
    retcode: int = betterproto.int32_field(14)


@dataclass(eq=False, repr=False)
class GetAreaExplorePointReq(betterproto.Message):
    area_id_list: List[int] = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class GetAreaExplorePointRsp(betterproto.Message):
    explore_point_list: List[int] = betterproto.uint32_field(4)
    retcode: int = betterproto.int32_field(2)
    area_id_list: List[int] = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class GetAuthkeyReq(betterproto.Message):
    unk3300_fgbhhpokcjh: int = betterproto.uint32_field(6)
    auth_appid: str = betterproto.string_field(13)
    unk3300_dodlfcnoamb: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class GetAuthkeyRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)
    authkey: str = betterproto.string_field(6)
    unk3300_dodlfcnoamb: int = betterproto.uint32_field(13)
    unk3300_fgbhhpokcjh: int = betterproto.uint32_field(3)
    auth_appid: str = betterproto.string_field(7)
    game_biz: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetAuthSalesmanInfoReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class GetAuthSalesmanInfoRsp(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(15)
    retcode: int = betterproto.int32_field(8)
    day_reward_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GetBargainDataReq(betterproto.Message):
    bargain_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class GetBargainDataRsp(betterproto.Message):
    bargain_id: int = betterproto.uint32_field(4)
    snapshot: "BargainSnapshot" = betterproto.message_field(15)
    retcode: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class GetBattlePassProductReq(betterproto.Message):
    battle_pass_product_play_type: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GetBattlePassProductRsp(betterproto.Message):
    cur_schedule_id: int = betterproto.uint32_field(14)
    product_id: str = betterproto.string_field(2)
    price_tier: str = betterproto.string_field(9)
    retcode: int = betterproto.int32_field(10)
    battle_pass_product_play_type: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class GetBlossomBriefInfoListReq(betterproto.Message):
    city_id_list: List[int] = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class GetBlossomBriefInfoListRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(14)
    brief_info_list: List["BlossomBriefInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetBonusActivityRewardReq(betterproto.Message):
    bonus_activity_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class GetBonusActivityRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(11)
    bonus_activity_info_list: "BonusActivityInfo" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GetChatEmojiCollectionReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetChatEmojiCollectionRsp(betterproto.Message):
    chat_emoji_collection_data: "ChatEmojiCollectionData" = betterproto.message_field(
        15
    )
    retcode: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class GetCityHuntingOfferReq(betterproto.Message):
    city_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class HuntingPair(betterproto.Message):
    monster_config_id: int = betterproto.uint32_field(1)
    refresh_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class HuntingOfferData(betterproto.Message):
    hunting_pair: "HuntingPair" = betterproto.message_field(15)
    state: "HuntingOfferState" = betterproto.enum_field(1)
    city_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GetCityHuntingOfferRsp(betterproto.Message):
    hunting_offer_list: List["HuntingOfferData"] = betterproto.message_field(2)
    retcode: int = betterproto.int32_field(9)
    cur_week_finished_count: int = betterproto.uint32_field(1)
    ongoing_hunting_pair: "HuntingPair" = betterproto.message_field(15)
    next_refresh_time: int = betterproto.uint32_field(5)
    city_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class GetCityReputationInfoReq(betterproto.Message):
    city_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class GetCityReputationInfoRsp(betterproto.Message):
    city_reputation_info: "CityReputationInfo" = betterproto.message_field(11)
    city_id: int = betterproto.uint32_field(7)
    retcode: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class GetCityReputationMapInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetCityReputationMapInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(13)
    unk3300_daighhpjhoo: List[int] = betterproto.uint32_field(4)
    unk3300_gjfnopnmfng: bool = betterproto.bool_field(12)
    unk3300_ncmhmodiikm: bool = betterproto.bool_field(5)
    unk3300_papbohkomfk: List[int] = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class GetCompoundDataReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetCompoundDataRsp(betterproto.Message):
    compound_queue_data_list: List["CompoundQueueData"] = betterproto.message_field(4)
    unlock_compound_list: List[int] = betterproto.uint32_field(10)
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class GetCustomDungeonReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetCustomDungeonRsp(betterproto.Message):
    brief_list: List["CustomDungeonBrief"] = betterproto.message_field(5)
    retcode: int = betterproto.int32_field(3)
    ban_info: "CustomDungeonBanInfo" = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class GetDailyDungeonEntryInfoReq(betterproto.Message):
    scene_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class GetDailyDungeonEntryInfoRsp(betterproto.Message):
    daily_dungeon_info_list: List["DailyDungeonEntryInfo"] = betterproto.message_field(
        1
    )
    retcode: int = betterproto.int32_field(9)


@dataclass(eq=False, repr=False)
class GetDungeonEntryExploreConditionReq(betterproto.Message):
    dungeon_entry_config_id: int = betterproto.uint32_field(2)
    scene_id: int = betterproto.uint32_field(9)
    dungeon_entry_scene_point_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class GetDungeonEntryExploreConditionRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(5)
    dungeon_entry_cond: "DungeonEntryCond" = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class GetExpeditionAssistInfoListReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetExpeditionAssistInfoListRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(6)
    assist_info_list: List["ExpeditionAssistInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetFriendShowAvatarInfoReq(betterproto.Message):
    uid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ShowEquip(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    reliquary: "Reliquary" = betterproto.message_field(2, group="detail")
    weapon: "Weapon" = betterproto.message_field(3, group="detail")


@dataclass(eq=False, repr=False)
class ShowAvatarInfo(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(1)
    prop_map: Dict[int, "PropValue"] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    talent_id_list: List[int] = betterproto.uint32_field(3)
    fight_prop_map: Dict[int, float] = betterproto.map_field(
        4, betterproto.TYPE_UINT32, betterproto.TYPE_FLOAT
    )
    skill_depot_id: int = betterproto.uint32_field(5)
    core_proud_skill_level: int = betterproto.uint32_field(6)
    inherent_proud_skill_list: List[int] = betterproto.uint32_field(7)
    skill_level_map: Dict[int, int] = betterproto.map_field(
        8, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    proud_skill_extra_level_map: Dict[int, int] = betterproto.map_field(
        9, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    equip_list: List["ShowEquip"] = betterproto.message_field(10)
    fetter_info: "AvatarFetterInfo" = betterproto.message_field(11)
    costume_id: int = betterproto.uint32_field(12)
    excel_info: "AvatarExcelInfo" = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class GetFriendShowAvatarInfoRsp(betterproto.Message):
    show_avatar_info_list: List["ShowAvatarInfo"] = betterproto.message_field(5)
    uid: int = betterproto.uint32_field(9)
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class GetFriendShowNameCardInfoReq(betterproto.Message):
    uid: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class GetFriendShowNameCardInfoRsp(betterproto.Message):
    show_name_card_id_list: List[int] = betterproto.uint32_field(5)
    uid: int = betterproto.uint32_field(9)
    retcode: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class GetFurnitureCurModuleArrangeCountReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetGachaInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetGachaInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(14)
    daily_gacha_times: int = betterproto.uint32_field(6)
    gacha_info_list: List["GachaInfo"] = betterproto.message_field(10)
    unk3300_ohfmhihjhpj: bool = betterproto.bool_field(4)
    gacha_random: int = betterproto.uint32_field(9)
    unk3300_hbiliaeihnk: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class GetGameplayRecommendationReq(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(6)
    skill_request: "GameplayRecommendationSkillRequest" = betterproto.message_field(
        1566, group="detail"
    )
    reliquary_request: "GameplayRecommendationReliquaryRequest" = (
        betterproto.message_field(72, group="detail")
    )
    element_reliquary_request: "GameplayRecommendationElementReliquaryRequest" = (
        betterproto.message_field(867, group="detail")
    )


@dataclass(eq=False, repr=False)
class GetGameplayRecommendationRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)
    avatar_id: int = betterproto.uint32_field(15)
    skill_response: "GameplayRecommendationSkillResponse" = betterproto.message_field(
        680, group="detail"
    )
    reliquary_response: "GameplayRecommendationReliquaryResponse" = (
        betterproto.message_field(1153, group="detail")
    )
    element_reliquary_response: "GameplayRecommendationElementReliquaryResponse" = (
        betterproto.message_field(714, group="detail")
    )


@dataclass(eq=False, repr=False)
class GetHomeExchangeWoodInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetHomeExchangeWoodInfoRsp(betterproto.Message):
    wood_info_list: List[
        "GetHomeExchangeWoodInfoRspHomeExchangeWoodInfo"
    ] = betterproto.message_field(7)
    retcode: int = betterproto.int32_field(12)


@dataclass(eq=False, repr=False)
class GetHomeExchangeWoodInfoRspHomeExchangeWoodInfo(betterproto.Message):
    wood_id: int = betterproto.uint32_field(1)
    exchanged_count: int = betterproto.uint32_field(7)
    next_refresh_time: int = betterproto.uint32_field(14)
    exchange_limit: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class GetHomeLevelUpRewardReq(betterproto.Message):
    level: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class GetHomeLevelUpRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)
    level: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class GetHuntingOfferRewardReq(betterproto.Message):
    hunting_pair: "HuntingPair" = betterproto.message_field(10)
    city_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class GetHuntingOfferRewardRsp(betterproto.Message):
    city_id: int = betterproto.uint32_field(3)
    retcode: int = betterproto.int32_field(1)
    hunting_pair: "HuntingPair" = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class GetInvestigationMonsterReq(betterproto.Message):
    is_for_mark: bool = betterproto.bool_field(8)
    city_id_list: List[int] = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class InvestigationMonster(betterproto.Message):
    is_alive: bool = betterproto.bool_field(13)
    pos: "Vector" = betterproto.message_field(7)
    scene_id: int = betterproto.uint32_field(12)
    next_refresh_time: int = betterproto.uint32_field(8)
    city_id: int = betterproto.uint32_field(14)
    group_id: int = betterproto.uint32_field(1735)
    unk3300_onlalcckiee: int = betterproto.uint32_field(1)
    weekly_boss_resin_discount_info: "WeeklyBossResinDiscountInfo" = (
        betterproto.message_field(3)
    )
    unk3300_dkkobdiekpp: int = betterproto.uint32_field(6)
    id: int = betterproto.uint32_field(9)
    monster_id: int = betterproto.uint32_field(562)
    lock_state: "InvestigationMonsterLockState" = betterproto.enum_field(4)
    unk3300_jhleheooggb: int = betterproto.uint32_field(10)
    is_area_locked: bool = betterproto.bool_field(5)
    level: int = betterproto.uint32_field(2)
    unk3300_knkfcokmeci: int = betterproto.uint32_field(11)
    resin: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class GetInvestigationMonsterRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(13)
    is_for_mark: bool = betterproto.bool_field(11)
    monster_list: List["InvestigationMonster"] = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class GetMailItemReq(betterproto.Message):
    mail_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetMailItemRsp(betterproto.Message):
    item_list: List["EquipParam"] = betterproto.message_field(6)
    mail_id_list: List[int] = betterproto.uint32_field(3)
    retcode: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class GetMapAreaReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MapAreaInfo(betterproto.Message):
    map_area_id: int = betterproto.uint32_field(1)
    is_open: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class GetMapAreaRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(14)
    map_area_info_list: List["MapAreaInfo"] = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class GetMapMarkTipsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MapMarkTipsInfo(betterproto.Message):
    tips_type: "MapMarkTipsType" = betterproto.enum_field(1)
    point_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GetMapMarkTipsRsp(betterproto.Message):
    mark_tips_list: List["MapMarkTipsInfo"] = betterproto.message_field(8)
    retcode: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class GetMechanicusInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MechanicusInfo(betterproto.Message):
    mechanicus_id: int = betterproto.uint32_field(1)
    punish_over_time: int = betterproto.uint32_field(11)
    is_finish_teach_dungeon: bool = betterproto.bool_field(7)
    unk3300_kjlgfepieng: List[int] = betterproto.uint32_field(6)
    unk3300_eebeocmaikn: List[int] = betterproto.uint32_field(9)
    coin: int = betterproto.uint32_field(10)
    gear_level_pair_list: List["Uint32Pair"] = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class GetMechanicusInfoRsp(betterproto.Message):
    mechanicus_info: "MechanicusInfo" = betterproto.message_field(5)
    retcode: int = betterproto.int32_field(12)


@dataclass(eq=False, repr=False)
class GetNextResourceInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetNextResourceInfoRsp(betterproto.Message):
    next_res_version_config: "ResVersionConfig" = betterproto.message_field(6)
    retcode: int = betterproto.int32_field(8)
    next_resource_url: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class GetOnlinePlayerInfoReq(betterproto.Message):
    is_online_id: bool = betterproto.bool_field(8)
    target_uid: int = betterproto.uint32_field(1, group="player_id")
    online_id: str = betterproto.string_field(7, group="player_id")
    psn_id: str = betterproto.string_field(4, group="player_id")


@dataclass(eq=False, repr=False)
class GetOnlinePlayerInfoRsp(betterproto.Message):
    target_uid: int = betterproto.uint32_field(9)
    param: int = betterproto.uint32_field(3)
    target_player_info: "OnlinePlayerInfo" = betterproto.message_field(6)
    retcode: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class GetOnlinePlayerListReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetOnlinePlayerListRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)
    param: int = betterproto.uint32_field(8)
    player_info_list: List["OnlinePlayerInfo"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class GetOpActivityInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class OpActivityInfo(betterproto.Message):
    activity_id: int = betterproto.uint32_field(15)
    schedule_id: int = betterproto.uint32_field(14)
    end_time: int = betterproto.uint32_field(4)
    begin_time: int = betterproto.uint32_field(13)
    is_has_change: bool = betterproto.bool_field(7)
    bonus_info: "BonusOpActivityInfo" = betterproto.message_field(6, group="detail")


@dataclass(eq=False, repr=False)
class GetOpActivityInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(6)
    op_activity_info_list: List["OpActivityInfo"] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class GetParentQuestVideoKeyReq(betterproto.Message):
    parent_quest_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class GetParentQuestVideoKeyRsp(betterproto.Message):
    parent_quest_id: int = betterproto.uint32_field(15)
    video_key: int = betterproto.uint64_field(12)
    retcode: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class GetPlayerAskFriendListReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetPlayerAskFriendListRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(11)
    ask_friend_list: List["FriendBrief"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GetPlayerBlacklistReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetPlayerBlacklistRsp(betterproto.Message):
    blacklist: List["FriendBrief"] = betterproto.message_field(5)
    retcode: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class GetPlayerFriendListReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetPlayerFriendListRsp(betterproto.Message):
    ask_friend_list: List["FriendBrief"] = betterproto.message_field(13)
    retcode: int = betterproto.int32_field(4)
    friend_list: List["FriendBrief"] = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class GetPlayerHomeCompInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetPlayerMpModeAvailabilityReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetPlayerMpModeAvailabilityRsp(betterproto.Message):
    param_list: List[int] = betterproto.uint32_field(8)
    mp_ret: int = betterproto.int32_field(12)
    retcode: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class GetPlayerSocialDetailReq(betterproto.Message):
    uid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SocialDetail(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    nickname: str = betterproto.string_field(2)
    level: int = betterproto.uint32_field(3)
    avatar_id: int = betterproto.uint32_field(4)
    signature: str = betterproto.string_field(5)
    birthday: "Birthday" = betterproto.message_field(6)
    world_level: int = betterproto.uint32_field(7)
    reserved_list: List[int] = betterproto.uint32_field(8)
    online_state: "FriendOnlineState" = betterproto.enum_field(9)
    param: int = betterproto.uint32_field(10)
    is_friend: bool = betterproto.bool_field(11)
    is_mp_mode_available: bool = betterproto.bool_field(12)
    online_id: str = betterproto.string_field(13)
    name_card_id: int = betterproto.uint32_field(14)
    is_in_blacklist: bool = betterproto.bool_field(15)
    is_chat_no_disturb: bool = betterproto.bool_field(16)
    remark_name: str = betterproto.string_field(17)
    finish_achievement_num: int = betterproto.uint32_field(18)
    tower_floor_index: int = betterproto.uint32_field(19)
    tower_level_index: int = betterproto.uint32_field(20)
    is_show_avatar: bool = betterproto.bool_field(21)
    show_avatar_info_list: List["SocialShowAvatarInfo"] = betterproto.message_field(22)
    show_name_card_id_list: List[int] = betterproto.uint32_field(23)
    friend_enter_home_option: "FriendEnterHomeOption" = betterproto.enum_field(24)
    profile_picture: "ProfilePicture" = betterproto.message_field(25)


@dataclass(eq=False, repr=False)
class GetPlayerSocialDetailRsp(betterproto.Message):
    detail_data: "SocialDetail" = betterproto.message_field(6)
    retcode: int = betterproto.int32_field(14)


@dataclass(eq=False, repr=False)
class GetPlayerTokenReq(betterproto.Message):
    uid: int = betterproto.uint32_field(10)
    unk3300_dilmopplpem: int = betterproto.uint32_field(1735)
    platform_type: int = betterproto.uint32_field(2)
    is_guest: bool = betterproto.bool_field(14)
    online_id: str = betterproto.string_field(12)
    account_type: int = betterproto.uint32_field(6)
    channel_id: int = betterproto.uint32_field(8)
    client_rand_key: str = betterproto.string_field(400)
    unk3300_phnohckihia: str = betterproto.string_field(3)
    lang: int = betterproto.uint32_field(1548)
    unk3300_pkonaoidnfk: str = betterproto.string_field(13)
    unk3300_pmgfbmjnncl: int = betterproto.uint32_field(1)
    psn_id: str = betterproto.string_field(5)
    key_id: int = betterproto.uint32_field(1175)
    account_uid: str = betterproto.string_field(4)
    client_ip_str: str = betterproto.string_field(15)
    account_token: str = betterproto.string_field(9)
    country_code: str = betterproto.string_field(11)
    birthday: str = betterproto.string_field(292)
    unk3300_iadfjhnfkib: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class StopServerInfo(betterproto.Message):
    stop_begin_time: int = betterproto.uint32_field(1)
    stop_end_time: int = betterproto.uint32_field(2)
    url: str = betterproto.string_field(3)
    content_msg: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class GetPlayerTokenRsp(betterproto.Message):
    security_cmd_buffer: bytes = betterproto.bytes_field(6)
    unk3300_pipldeapmmn: int = betterproto.uint32_field(7)
    is_guest: bool = betterproto.bool_field(11)
    unk3300_ajbbipfmbel: bool = betterproto.bool_field(126)
    key_id: int = betterproto.uint32_field(134)
    sign: str = betterproto.string_field(1666)
    secret_key: str = betterproto.string_field(15)
    account_type: int = betterproto.uint32_field(8)
    channel_id: int = betterproto.uint32_field(676)
    extra_bin_data: bytes = betterproto.bytes_field(5)
    secret_key_seed: int = betterproto.uint64_field(3)
    token: str = betterproto.string_field(13)
    server_rand_key: str = betterproto.string_field(1188)
    unk3300_dilmopplpem: int = betterproto.uint32_field(1670)
    birthday: str = betterproto.string_field(1847)
    tag: int = betterproto.uint32_field(1099)
    client_ip_str: str = betterproto.string_field(1382)
    unk3300_iadfjhnfkib: int = betterproto.uint32_field(1038)
    retcode: int = betterproto.int32_field(2)
    client_version_random_key: str = betterproto.string_field(1152)
    psn_id: str = betterproto.string_field(242)
    is_proficient_player: bool = betterproto.bool_field(9)
    platform_type: int = betterproto.uint32_field(10)
    reg_platform: int = betterproto.uint32_field(646)
    stop_server: "StopServerInfo" = betterproto.message_field(1897)
    unk3300_fhpcjmiilpa: int = betterproto.uint32_field(12)
    unk3300_cfbhahohdkc: bool = betterproto.bool_field(746)
    account_uid: str = betterproto.string_field(1)
    finish_collection_id_list: List[int] = betterproto.uint32_field(1766)
    msg: str = betterproto.string_field(4)
    country_code: str = betterproto.string_field(245)
    uid: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class GetPushTipsRewardReq(betterproto.Message):
    push_tips_id_list: List[int] = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class GetPushTipsRewardRsp(betterproto.Message):
    push_tips_id_list: List[int] = betterproto.uint32_field(5)
    retcode: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class GetQuestLackingResourceReq(betterproto.Message):
    quest_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class GetQuestLackingResourceRsp(betterproto.Message):
    lacked_place_map: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    lacked_npc_map: Dict[int, int] = betterproto.map_field(
        7, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    lacked_place_list: List[int] = betterproto.uint32_field(11)
    quest_id: int = betterproto.uint32_field(3)
    retcode: int = betterproto.int32_field(6)
    lacked_npc_list: List[int] = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class GetQuestTalkHistoryReq(betterproto.Message):
    parent_quest_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class GetQuestTalkHistoryRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(4)
    parent_quest_id: int = betterproto.uint32_field(3)
    talk_id_list: List[int] = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class GetRecentMpPlayerListReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetRecentMpPlayerListRsp(betterproto.Message):
    recent_mp_player_brief_list: List["FriendBrief"] = betterproto.message_field(9)
    retcode: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class GetRecommendCustomDungeonReq(betterproto.Message):
    is_refresh: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class OtherCustomDungeonBrief(betterproto.Message):
    is_adventure_dungeon: bool = betterproto.bool_field(12)
    battle_min_cost_time: int = betterproto.uint32_field(10)
    tag_list: List[int] = betterproto.uint32_field(13)
    is_stored: bool = betterproto.bool_field(8)
    dungeon_id: int = betterproto.uint32_field(15)
    is_psn_platform: bool = betterproto.bool_field(1)
    dungeon_guid: int = betterproto.uint64_field(7)
    setting: "CustomDungeonSetting" = betterproto.message_field(2)
    social: "CustomDungeonSocial" = betterproto.message_field(14)
    abstract: "CustomDungeonAbstract" = betterproto.message_field(4)
    creator_detail: "SocialDetail" = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class GetRecommendCustomDungeonRsp(betterproto.Message):
    custom_dungeon_list: List["OtherCustomDungeonBrief"] = betterproto.message_field(7)
    retcode: int = betterproto.int32_field(14)


@dataclass(eq=False, repr=False)
class GetRegionSearchReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetReunionMissionInfoReq(betterproto.Message):
    mission_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ReunionWatcherInfo(betterproto.Message):
    total_progress: int = betterproto.uint32_field(4)
    reward_unlock_time: int = betterproto.uint32_field(1)
    watcher_id: int = betterproto.uint32_field(9)
    is_taken_reward: bool = betterproto.bool_field(12)
    cur_progress: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class ReunionMissionInfo(betterproto.Message):
    is_taken_reward: bool = betterproto.bool_field(10)
    is_finished: bool = betterproto.bool_field(13)
    watcher_list: List["ReunionWatcherInfo"] = betterproto.message_field(15)
    cur_day_watcher_list: List["ReunionWatcherInfo"] = betterproto.message_field(8)
    next_refresh_time: int = betterproto.uint32_field(5)
    is_taken_reward_list: List[bool] = betterproto.bool_field(4)
    mission_id: int = betterproto.uint32_field(9)
    cur_score: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GetReunionMissionInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(2)
    mission_info: "ReunionMissionInfo" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class GetReunionPrivilegeInfoReq(betterproto.Message):
    privilege_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class ReunionPrivilegeInfo(betterproto.Message):
    unk3300_gjbeafpmfaa: int = betterproto.uint32_field(14)
    privilege_id: int = betterproto.uint32_field(2)
    unk3300_alolacfgmhi: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetReunionPrivilegeInfoRsp(betterproto.Message):
    privilege_info: "ReunionPrivilegeInfo" = betterproto.message_field(6)
    retcode: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class GetReunionSignInInfoReq(betterproto.Message):
    sign_in_config_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ReunionSignInInfo(betterproto.Message):
    unk3300_mnjelidkmcf: int = betterproto.uint32_field(3)
    reward_day_list: List[int] = betterproto.uint32_field(12)
    config_id: int = betterproto.uint32_field(8)
    unk3300_nfnokbnblge: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class GetReunionSignInInfoRsp(betterproto.Message):
    sign_in_info: "ReunionSignInInfo" = betterproto.message_field(2)
    retcode: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class GetRogueDairyRepairInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetRogueDairyRepairInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class GetSceneAreaReq(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    belong_uid: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GetSceneAreaRsp(betterproto.Message):
    scene_id: int = betterproto.uint32_field(8)
    retcode: int = betterproto.int32_field(1)
    area_id_list: List[int] = betterproto.uint32_field(15)
    city_info_list: List["CityInfo"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class GetSceneNpcPositionReq(betterproto.Message):
    scene_id: int = betterproto.uint32_field(7)
    npc_id_list: List[int] = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class NpcPositionInfo(betterproto.Message):
    npc_id: int = betterproto.uint32_field(1)
    pos: "Vector" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetSceneNpcPositionRsp(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    npc_info_list: List["NpcPositionInfo"] = betterproto.message_field(2)
    retcode: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class GetScenePerformanceReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetScenePerformanceRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    unk3300_glnfifpnjie: int = betterproto.uint32_field(4)
    unk3300_ihbpcpcjibc: int = betterproto.uint32_field(2)
    unk3300_mmaljifdkjk: int = betterproto.uint32_field(13)
    unk3300_pdpjemekhkd: int = betterproto.uint32_field(10)
    unk3300_liofgahknia: int = betterproto.uint32_field(14)
    unk3300_mijmklbgkml: int = betterproto.uint32_field(11)
    unk3300_jmljlnkljnp: int = betterproto.uint32_field(15)
    pos: "Vector" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class GetScenePointReq(betterproto.Message):
    scene_id: int = betterproto.uint32_field(13)
    belong_uid: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class GetScenePointRsp(betterproto.Message):
    unlock_area_list: List[int] = betterproto.uint32_field(9)
    locked_point_list: List[int] = betterproto.uint32_field(15)
    retcode: int = betterproto.int32_field(13)
    unhide_point_list: List[int] = betterproto.uint32_field(3)
    hide_point_list: List[int] = betterproto.uint32_field(10)
    group_unlimit_point_list: List[int] = betterproto.uint32_field(1)
    not_interact_dungeon_entry_list: List[int] = betterproto.uint32_field(11)
    to_be_explore_dungeon_entry_list: List[int] = betterproto.uint32_field(6)
    not_explored_dungeon_entry_list: List[int] = betterproto.uint32_field(7)
    belong_uid: int = betterproto.uint32_field(12)
    unlocked_point_list: List[int] = betterproto.uint32_field(2)
    scene_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class GetShopmallDataReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetShopmallDataRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(2)
    shop_type_list: List[int] = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class GetShopReq(betterproto.Message):
    shop_type: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class ShopCardProduct(betterproto.Message):
    product_id: str = betterproto.string_field(1)
    price_tier: str = betterproto.string_field(2)
    mcoin_base: int = betterproto.uint32_field(3)
    hcoin_per_day: int = betterproto.uint32_field(4)
    days: int = betterproto.uint32_field(5)
    remain_reward_days: int = betterproto.uint32_field(6)
    card_product_type: int = betterproto.uint32_field(7)
    resin_card: "ShopCardProductResinCard" = betterproto.message_field(
        101, group="extra_card_data"
    )


@dataclass(eq=False, repr=False)
class ShopCardProductResinCard(betterproto.Message):
    base_item_list: List["ItemParam"] = betterproto.message_field(1)
    per_day_item_list: List["ItemParam"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ShopConcertProduct(betterproto.Message):
    product_id: str = betterproto.string_field(1)
    price_tier: str = betterproto.string_field(2)
    obtain_count: int = betterproto.uint32_field(3)
    obtain_limit: int = betterproto.uint32_field(4)
    begin_time: int = betterproto.uint32_field(5)
    end_time: int = betterproto.uint32_field(6)
    buy_times: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class ShopMcoinProduct(betterproto.Message):
    product_id: str = betterproto.string_field(1)
    price_tier: str = betterproto.string_field(2)
    mcoin_base: int = betterproto.uint32_field(3)
    mcoin_non_first: int = betterproto.uint32_field(4)
    mcoin_first: int = betterproto.uint32_field(5)
    bought_num: int = betterproto.uint32_field(6)
    is_audit: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class Shop(betterproto.Message):
    shop_type: int = betterproto.uint32_field(1)
    next_refresh_time: int = betterproto.uint32_field(5)
    city_id: int = betterproto.uint32_field(12)
    city_reputation_level: int = betterproto.uint32_field(8)
    goods_list: List["ShopGoods"] = betterproto.message_field(3)
    card_product_list: List["ShopCardProduct"] = betterproto.message_field(11)
    concert_product_list: List["ShopConcertProduct"] = betterproto.message_field(9)
    mcoin_product_list: List["ShopMcoinProduct"] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class GetShopRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    shop: "Shop" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class GetSignInRewardReq(betterproto.Message):
    reward_day: int = betterproto.uint32_field(4)
    schedule_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SignInData(betterproto.Message):
    day_count: int = betterproto.uint32_field(4)
    reward_item_list: List["ItemParam"] = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class SignInInfo(betterproto.Message):
    is_cond_satisfied: bool = betterproto.bool_field(1)
    signin_data_list: List["SignInData"] = betterproto.message_field(10)
    unk3300_mnjelidkmcf: int = betterproto.uint32_field(5)
    schedule_id: int = betterproto.uint32_field(7)
    unk3300_nfnokbnblge: int = betterproto.uint32_field(3)
    reward_day_list: List[int] = betterproto.uint32_field(4)
    begin_time: int = betterproto.uint32_field(6)
    config_id: int = betterproto.uint32_field(9)
    end_time: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class GetSignInRewardRsp(betterproto.Message):
    sign_in_info: "SignInInfo" = betterproto.message_field(3)
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class GetStoreCustomDungeonReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetStoreCustomDungeonRsp(betterproto.Message):
    custom_dungeon_list: List["OtherCustomDungeonBrief"] = betterproto.message_field(2)
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class GetUgcBriefInfoReq(betterproto.Message):
    ugc_guid: int = betterproto.uint64_field(5)
    ugc_type: "UgcType" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class GetUgcBriefInfoRsp(betterproto.Message):
    ugc_guid: int = betterproto.uint64_field(3)
    retcode: int = betterproto.int32_field(12)
    ugc_type: "UgcType" = betterproto.enum_field(9)
    music_brief_info: "UgcMusicBriefInfo" = betterproto.message_field(7, group="brief")


@dataclass(eq=False, repr=False)
class GetUgcReq(betterproto.Message):
    ugc_guid: int = betterproto.uint64_field(6)
    ugc_type: "UgcType" = betterproto.enum_field(2)
    get_ugc_type: "GetUgcType" = betterproto.enum_field(12)
    ugc_record_usage: "RecordUsage" = betterproto.enum_field(13)
    is_require_brief: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class UgcMusicNote(betterproto.Message):
    start_time: int = betterproto.uint32_field(11)
    end_time: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class UgcMusicTrack(betterproto.Message):
    music_note_list: List["UgcMusicNote"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class UgcMusicRecord(betterproto.Message):
    music_id: int = betterproto.uint32_field(1)
    music_track_list: List["UgcMusicTrack"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class GetUgcRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(10)
    ugc_record_usage: "RecordUsage" = betterproto.enum_field(5)
    ugc_type: "UgcType" = betterproto.enum_field(6)
    ugc_guid: int = betterproto.uint64_field(3)
    music_record: "UgcMusicRecord" = betterproto.message_field(2, group="record")
    music_brief_info: "UgcMusicBriefInfo" = betterproto.message_field(
        1540, group="brief"
    )


@dataclass(eq=False, repr=False)
class GetWidgetSlotReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetWidgetSlotRsp(betterproto.Message):
    slot_list: List["WidgetSlotData"] = betterproto.message_field(3)
    retcode: int = betterproto.int32_field(10)


@dataclass(eq=False, repr=False)
class GetWorldMpInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetWorldMpInfoRsp(betterproto.Message):
    quit_mp_valid_time: int = betterproto.uint32_field(15)
    retcode: int = betterproto.int32_field(1)
    is_in_mp_mode: bool = betterproto.bool_field(14)


@dataclass(eq=False, repr=False)
class GiveUpRoguelikeDungeonCardReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GiveUpRoguelikeDungeonCardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class GivingRecord(betterproto.Message):
    is_gadget_giving: bool = betterproto.bool_field(3)
    group_id: int = betterproto.uint32_field(7)
    is_finished: bool = betterproto.bool_field(6)
    material_count_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    config_id: int = betterproto.uint32_field(4)
    last_group_id: int = betterproto.uint32_field(5)
    giving_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class GivingRecordChangeNotify(betterproto.Message):
    is_deactive: bool = betterproto.bool_field(14)
    giving_record: "GivingRecord" = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class GivingRecordNotify(betterproto.Message):
    giving_record_list: List["GivingRecord"] = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class GlobalBuildingInfoNotify(betterproto.Message):
    max_num: int = betterproto.uint32_field(1)
    current_num: int = betterproto.uint32_field(3)
    building_list: List["BuildingInfo"] = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class Vector3Int(betterproto.Message):
    x: int = betterproto.int32_field(1)
    y: int = betterproto.int32_field(2)
    z: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class GmObstacleInfo(betterproto.Message):
    shape: "GmObstacleInfoShapeType" = betterproto.enum_field(2)
    rotation: "MathQuaternion" = betterproto.message_field(8)
    center: "Vector" = betterproto.message_field(15)
    timestamp: int = betterproto.int64_field(1)
    obstacle_id: int = betterproto.int32_field(13)
    extents: "Vector3Int" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class GmShowNavMeshReq(betterproto.Message):
    extent: "Vector" = betterproto.message_field(3)
    center: "Vector" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class PbNavMeshPoly(betterproto.Message):
    area: int = betterproto.int32_field(14)
    vects: List[int] = betterproto.int32_field(13)
    edge_types: List["PbNavMeshPolyEdgeType"] = betterproto.enum_field(5)


@dataclass(eq=False, repr=False)
class PbNavMeshTile(betterproto.Message):
    vecs: List["Vector"] = betterproto.message_field(12)
    polys: List["PbNavMeshPoly"] = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class GmShowNavMeshRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    tiles: List["PbNavMeshTile"] = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class GmShowObstacleReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GmShowObstacleRsp(betterproto.Message):
    obstacles: List["GmObstacleInfo"] = betterproto.message_field(8)
    retcode: int = betterproto.int32_field(12)


@dataclass(eq=False, repr=False)
class GmTalkNotify(betterproto.Message):
    msg: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GmTalkReq(betterproto.Message):
    msg: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class GmTalkRsp(betterproto.Message):
    retmsg: str = betterproto.string_field(11)
    retcode: int = betterproto.int32_field(4)
    msg: str = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class Reward(betterproto.Message):
    reward_id: int = betterproto.uint32_field(1)
    item_list: List["ItemParam"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GrantRewardNotify(betterproto.Message):
    reward: "Reward" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GravenInnocenceEditCarveCombinationReq(betterproto.Message):
    combination_info: "CustomGadgetTreeInfo" = betterproto.message_field(4)
    entity_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class GravenInnocenceEditCarveCombinationRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class GravenInnocencePhotoFinishReq(betterproto.Message):
    param: int = betterproto.uint32_field(6)
    object_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class GravenInnocencePhotoFinishRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)
    object_id: int = betterproto.uint32_field(3)
    param: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class GravenInnocencePhotoReminderNotify(betterproto.Message):
    reminder_id: int = betterproto.uint32_field(13)
    group_bundle_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class GravenInnocenceRaceRestartReq(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class GravenInnocenceRaceRestartRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(2)
    gallery_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GravenInnocenceRaceSettleNotify(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(9)
    is_new_record: bool = betterproto.bool_field(3)
    level_id: int = betterproto.uint32_field(11)
    unk3300_boiphopmhjm: int = betterproto.uint32_field(8)
    score: int = betterproto.uint32_field(4)
    is_success: bool = betterproto.bool_field(10)
    reason: "GalleryStopReason" = betterproto.enum_field(12)
    unk3300_ipgjkkfdpjj: int = betterproto.uint32_field(6)
    remain_time: int = betterproto.uint32_field(2)
    unk3300_ohahhknajkl: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class GroupLinkBundle(betterproto.Message):
    bundle_id: int = betterproto.uint32_field(1)
    center: "Vector" = betterproto.message_field(12)
    is_show_mark: bool = betterproto.bool_field(11)
    scene_id: int = betterproto.uint32_field(2)
    is_activated: bool = betterproto.bool_field(10)
    radius: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class GroupLinkAllNotify(betterproto.Message):
    bundle_list: List["GroupLinkBundle"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class GroupLinkChangeNotify(betterproto.Message):
    bundle: "GroupLinkBundle" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class GroupLinkDeleteNotify(betterproto.Message):
    bundle_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class GroupLinkMarkUpdateNotify(betterproto.Message):
    bundle: "GroupLinkBundle" = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class GroupSuiteNotify(betterproto.Message):
    group_map: Dict[int, int] = betterproto.map_field(
        4, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class GroupUnloadNotify(betterproto.Message):
    group_list: List[int] = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GuestBeginEnterSceneNotify(betterproto.Message):
    uid: int = betterproto.uint32_field(14)
    scene_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GuestPostEnterSceneNotify(betterproto.Message):
    uid: int = betterproto.uint32_field(9)
    scene_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class H5ActivityIdsNotify(betterproto.Message):
    client_red_dot_timestamp: int = betterproto.uint32_field(5)
    h5_activity_map: Dict[int, int] = betterproto.map_field(
        12, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class HashedString(betterproto.Message):
    hash: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class HideAndSeekChooseMapReq(betterproto.Message):
    map_list: List[int] = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class HideAndSeekChooseMapRsp(betterproto.Message):
    map_list: List[int] = betterproto.uint32_field(11)
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class HideAndSeekPlayerBattleInfo(betterproto.Message):
    is_ready: bool = betterproto.bool_field(12)
    skill_list: List[int] = betterproto.uint32_field(11)
    avatar_id: int = betterproto.uint32_field(15)
    costume_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class HideAndSeekPlayerCapturedNotify(betterproto.Message):
    ghost_skill_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class HideAndSeekPlayerReadyNotify(betterproto.Message):
    uid_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class HideAndSeekPlayerSetAvatarNotify(betterproto.Message):
    uid: int = betterproto.uint32_field(12)
    costume_id: int = betterproto.uint32_field(8)
    avatar_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class HideAndSeekSelectAvatarReq(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class HideAndSeekSelectAvatarRsp(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(8)
    retcode: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class HideAndSeekSelectSkillReq(betterproto.Message):
    skill_list: List[int] = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class HideAndSeekSelectSkillRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    skill_list: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class HideAndSeekSetReadyReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class HideAndSeekSetReadyRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class HideAndSeekSettleInfo(betterproto.Message):
    card_list: List["ExhibitionDisplayInfo"] = betterproto.message_field(2)
    nickname: str = betterproto.string_field(15)
    head_image: int = betterproto.uint32_field(9)
    uid: int = betterproto.uint32_field(6)
    online_id: str = betterproto.string_field(5)
    profile_picture: "ProfilePicture" = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class HideAndSeekSettleNotify(betterproto.Message):
    play_index: int = betterproto.uint32_field(6)
    score_list: List["ExhibitionDisplayInfo"] = betterproto.message_field(11)
    reason: "HideAndSeekSettleNotifySettleReason" = betterproto.enum_field(1)
    winner_list: List[int] = betterproto.uint32_field(2)
    cost_time: int = betterproto.uint32_field(15)
    stage_type: int = betterproto.uint32_field(7)
    is_record_score: bool = betterproto.bool_field(5)
    settle_info_list: List["HideAndSeekSettleInfo"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class HideAndSeekStageInfo(betterproto.Message):
    hunter_uid: int = betterproto.uint32_field(9)
    battle_info_map: Dict[int, "HideAndSeekPlayerBattleInfo"] = betterproto.map_field(
        8, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    is_record_score: bool = betterproto.bool_field(5)
    hider_uid_list: List[int] = betterproto.uint32_field(2)
    map_id: int = betterproto.uint32_field(13)
    stage_type: "HideAndSeekStageType" = betterproto.enum_field(6)


@dataclass(eq=False, repr=False)
class HitClientTrivialNotify(betterproto.Message):
    owner_entity_id: int = betterproto.uint32_field(14)
    position: "Vector" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class HitTreeInfo(betterproto.Message):
    tree_pos: "Vector" = betterproto.message_field(10)
    tree_type: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class HitTreeNotify(betterproto.Message):
    tree_type: int = betterproto.uint32_field(8)
    drop_pos: "Vector" = betterproto.message_field(12)
    tree_pos: "Vector" = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class HomeAllUnlockedBgmIdListNotify(betterproto.Message):
    all_unlocked_bgm_id_list: List[int] = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class HomeAnimalData(betterproto.Message):
    furniture_id: int = betterproto.uint32_field(6)
    spawn_rot: "Vector" = betterproto.message_field(14)
    spawn_pos: "Vector" = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class HomeAvatarAllFinishRewardNotify(betterproto.Message):
    event_id_list: List[int] = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class HomeAvatarCostumeChangeNotify(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(12)
    costume_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class HomeAvatarRewardEventGetReq(betterproto.Message):
    event_id: int = betterproto.uint32_field(2)
    avatar_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class HomeAvatarRewardEventGetRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(3)
    event_id: int = betterproto.uint32_field(8)
    item_list: List["ItemParam"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class HomeAvatarRewardEventInfo(betterproto.Message):
    random_position: int = betterproto.uint32_field(9)
    suite_id: int = betterproto.uint32_field(11)
    guid: int = betterproto.uint32_field(6)
    event_id: int = betterproto.uint32_field(5)
    avatar_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class HomeAvatarRewardEventNotify(betterproto.Message):
    pending_list: List["HomeAvatarRewardEventInfo"] = betterproto.message_field(8)
    reward_event: "HomeAvatarRewardEventInfo" = betterproto.message_field(14)
    is_event_trigger: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class HomeAvatarSummonEventInfo(betterproto.Message):
    random_position: int = betterproto.uint32_field(11)
    guid: int = betterproto.uint32_field(5)
    event_over_time: int = betterproto.uint32_field(6)
    suit_id: int = betterproto.uint32_field(12)
    avatar_id: int = betterproto.uint32_field(8)
    event_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class HomeAvatarSummonAllEventNotify(betterproto.Message):
    summon_event_list: List["HomeAvatarSummonEventInfo"] = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class HomeAvatarSummonEventReq(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(11)
    suit_id: int = betterproto.uint32_field(14)
    guid: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class HomeAvatarSummonEventRsp(betterproto.Message):
    event_id: int = betterproto.uint32_field(9)
    retcode: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class HomeAvatarSummonFinishReq(betterproto.Message):
    event_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class HomeAvatarSummonFinishRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(3)
    event_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class HomeAvatarTalkFinishInfo(betterproto.Message):
    finish_talk_id_list: List[int] = betterproto.uint32_field(4)
    avatar_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class HomeAvatarTalkFinishInfoNotify(betterproto.Message):
    avatar_talk_info_list: List["HomeAvatarTalkFinishInfo"] = betterproto.message_field(
        9
    )


@dataclass(eq=False, repr=False)
class HomeAvatarTalkReq(betterproto.Message):
    talk_id: int = betterproto.uint32_field(10)
    avatar_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class HomeAvatarTalkRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(10)
    avatar_talk_info: "HomeAvatarTalkFinishInfo" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class HomeAvtarAllFinishRewardNotify(betterproto.Message):
    event_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class HomeGroupPlayerInfo(betterproto.Message):
    psn_id: str = betterproto.string_field(10)
    nickname: str = betterproto.string_field(13)
    uid: int = betterproto.uint32_field(1)
    profile_picture: "ProfilePicture" = betterproto.message_field(2)
    player_level: int = betterproto.uint32_field(9)
    online_id: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class HomeBalloonGalleryRecord(betterproto.Message):
    score: int = betterproto.uint32_field(12)
    hit_count: int = betterproto.uint32_field(3)
    player_info: "HomeGroupPlayerInfo" = betterproto.message_field(9)
    timestamp: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class HomeBalloonGalleryScoreNotify(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(1)
    trigger_entity_id: int = betterproto.uint32_field(3)
    add_score: int = betterproto.uint32_field(4)
    cur_score: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class HomeBalloonGallerySettleNotify(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(8)
    rank: int = betterproto.uint32_field(13)
    settle_info: "BalloonGallerySettleInfo" = betterproto.message_field(5)
    is_new_record: bool = betterproto.bool_field(9)


@dataclass(eq=False, repr=False)
class HomeBalloonRecord(betterproto.Message):
    record_list: List["HomeBalloonGalleryRecord"] = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class HomeLimitedShopInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(9)
    next_guest_open_time: int = betterproto.fixed32_field(8)
    djinn_rot: "Vector" = betterproto.message_field(11)
    next_open_time: int = betterproto.fixed32_field(5)
    djinn_pos: "Vector" = betterproto.message_field(2)
    next_close_time: int = betterproto.fixed32_field(15)


@dataclass(eq=False, repr=False)
class HomeBasicInfo(betterproto.Message):
    exp: int = betterproto.uint64_field(3)
    home_owner_uid: int = betterproto.uint32_field(11)
    cur_room_scene_id: int = betterproto.uint32_field(14)
    owner_nick_name: str = betterproto.string_field(6)
    cur_module_id: int = betterproto.uint32_field(4)
    limited_shop_info: "HomeLimitedShopInfo" = betterproto.message_field(13)
    is_in_edit_mode: bool = betterproto.bool_field(7)
    level: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class HomeBasicInfoNotify(betterproto.Message):
    basic_info: "HomeBasicInfo" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class HomeBlockDotPattern(betterproto.Message):
    width: int = betterproto.uint32_field(13)
    data: bytes = betterproto.bytes_field(12)
    height: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class HomeBlockSubFieldData(betterproto.Message):
    pos: "Vector" = betterproto.message_field(4)
    rot: "Vector" = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class HomeBlockFieldData(betterproto.Message):
    sub_field_list: List["HomeBlockSubFieldData"] = betterproto.message_field(4)
    guid: int = betterproto.uint32_field(15)
    pos: "Vector" = betterproto.message_field(8)
    furniture_id: int = betterproto.uint32_field(12)
    rot: "Vector" = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class HomeFurnitureCustomSuiteData(betterproto.Message):
    included_furniture_index_list: List[int] = betterproto.int32_field(14)
    spawn_pos: "Vector" = betterproto.message_field(5)
    guid: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class HomeFurnitureData(betterproto.Message):
    furniture_id: int = betterproto.uint32_field(8)
    parent_furniture_index: int = betterproto.int32_field(15)
    guid: int = betterproto.uint32_field(12)
    spawn_rot: "Vector" = betterproto.message_field(6)
    spawn_pos: "Vector" = betterproto.message_field(2)
    version: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class HomeFurnitureGroupData(betterproto.Message):
    virtual_furniture_list: List["HomeFurnitureData"] = betterproto.message_field(1)
    group_furniture_index: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class HomeFurnitureSuiteData(betterproto.Message):
    is_allow_summon: bool = betterproto.bool_field(4)
    suite_id: int = betterproto.uint32_field(3)
    guid: int = betterproto.uint32_field(5)
    spawn_pos: "Vector" = betterproto.message_field(9)
    included_furniture_index_list: List[int] = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class HomeNpcData(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(11)
    spawn_pos: "Vector" = betterproto.message_field(13)
    costume_id: int = betterproto.uint32_field(4)
    spawn_rot: "Vector" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class WeekendDjinnInfo(betterproto.Message):
    pos: "Vector" = betterproto.message_field(13)
    rot: "Vector" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class HomeBlockArrangementInfo(betterproto.Message):
    unk3300_gmmaidijojm: List["HomeFurnitureData"] = betterproto.message_field(10)
    deploy_animal_list: List["HomeAnimalData"] = betterproto.message_field(7)
    furniture_suite_list: List["HomeFurnitureSuiteData"] = betterproto.message_field(3)
    weekend_djinn_info_list: List["WeekendDjinnInfo"] = betterproto.message_field(5)
    block_id: int = betterproto.uint32_field(14)
    dot_pattern_list: List["HomeBlockDotPattern"] = betterproto.message_field(6)
    is_unlocked: bool = betterproto.bool_field(15)
    deploy_npc_list: List["HomeNpcData"] = betterproto.message_field(1)
    furniture_group_list: List["HomeFurnitureGroupData"] = betterproto.message_field(8)
    field_list: List["HomeBlockFieldData"] = betterproto.message_field(13)
    comfort_value: int = betterproto.uint32_field(9)
    unk3300_deiecjcafln: List["HomeFurnitureData"] = betterproto.message_field(12)
    furniture_custom_suite_list: List[
        "HomeFurnitureCustomSuiteData"
    ] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class HomeFurnitureArrangementMuipData(betterproto.Message):
    furniture_id: int = betterproto.uint32_field(1)
    spawn_pos: "Vector" = betterproto.message_field(2)
    spawn_rot: "Vector" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class HomeBlockArrangementMuipData(betterproto.Message):
    block_id: int = betterproto.uint32_field(1)
    furniture_data_list: List[
        "HomeFurnitureArrangementMuipData"
    ] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HomeBlockNotify(betterproto.Message):
    end_time: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class HomeBlueprintBriefMuipData(betterproto.Message):
    share_code: str = betterproto.string_field(1)
    owner_uid: int = betterproto.uint32_field(2)
    module_id: int = betterproto.uint32_field(3)
    scene_id: int = betterproto.uint32_field(4)
    block_id: int = betterproto.uint32_field(5)
    is_allow_copy: bool = betterproto.bool_field(6)
    create_time: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class HomeBlueprintBatchBriefMuipData(betterproto.Message):
    brief_list: List["HomeBlueprintBriefMuipData"] = betterproto.message_field(1)
    not_exist_share_code_list: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class HomeBlueprintInfoNotify(betterproto.Message):
    is_allow_friend_copy: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class HomeBlueprintSearchInfo(betterproto.Message):
    share_code: str = betterproto.string_field(2)
    scene_id: int = betterproto.uint32_field(15)
    block_id: int = betterproto.uint32_field(13)
    module_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class HomeBlueprintSlotInfo(betterproto.Message):
    create_time: int = betterproto.uint32_field(12)
    scene_id: int = betterproto.uint32_field(10)
    share_code: str = betterproto.string_field(9)
    module_id: int = betterproto.uint32_field(3)
    block_id: int = betterproto.uint32_field(2)
    slot_id: int = betterproto.uint32_field(8)
    is_allow_copy: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class HomeChangeBgmNotify(betterproto.Message):
    bgm_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class HomeChangeBgmReq(betterproto.Message):
    bgm_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class HomeChangeBgmRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class HomeChangeEditModeReq(betterproto.Message):
    is_enter_edit_mode: bool = betterproto.bool_field(15)


@dataclass(eq=False, repr=False)
class HomeChangeEditModeRsp(betterproto.Message):
    is_enter_edit_mode: bool = betterproto.bool_field(2)
    retcode: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class HomeChangeModuleReq(betterproto.Message):
    target_module_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class HomeChangeModuleRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(14)
    target_module_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class HomeChooseModuleReq(betterproto.Message):
    module_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class HomeChooseModuleRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(9)
    module_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class HomeClearGroupRecordReq(betterproto.Message):
    group_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class HomeClearGroupRecordRsp(betterproto.Message):
    group_id: int = betterproto.uint32_field(10)
    retcode: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class HomeModuleComfortInfo(betterproto.Message):
    room_scene_comfort_value: int = betterproto.uint32_field(5)
    world_scene_block_comfort_value_list: List[int] = betterproto.uint32_field(10)
    module_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class HomeComfortInfoNotify(betterproto.Message):
    module_info_list: List["HomeModuleComfortInfo"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class HomeSceneArrangementInfo(betterproto.Message):
    comfort_value: int = betterproto.uint32_field(6)
    block_arrangement_info_list: List[
        "HomeBlockArrangementInfo"
    ] = betterproto.message_field(1)
    is_set_born_pos: bool = betterproto.bool_field(4)
    djinn_pos: "Vector" = betterproto.message_field(14)
    born_rot: "Vector" = betterproto.message_field(10)
    bgm_id: int = betterproto.uint32_field(5)
    born_pos: "Vector" = betterproto.message_field(11)
    unk3300_gchnamhbphg: List["HomeFurnitureData"] = betterproto.message_field(2)
    main_house: "HomeFurnitureData" = betterproto.message_field(15)
    scene_id: int = betterproto.uint32_field(8)
    unk3300_hpchpodnbph: List["HomeFurnitureData"] = betterproto.message_field(9)
    tmp_version: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class HomeCreateBlueprintReq(betterproto.Message):
    scene_arrangement_info: "HomeSceneArrangementInfo" = betterproto.message_field(4)
    gen_share_code_count: int = betterproto.uint32_field(9)
    server_share_code: str = betterproto.string_field(5)
    slot_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class HomeCreateBlueprintRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)
    slot_info: "HomeBlueprintSlotInfo" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class HomeCustomFurnitureInfo(betterproto.Message):
    guid: int = betterproto.uint32_field(7)
    sub_furniture_list: List["CustomCommonNodeInfo"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class HomeCustomFurnitureInfoNotify(betterproto.Message):
    delete_custom_furniture_list: List[int] = betterproto.uint32_field(13)
    custom_furniture_info_list: List[
        "HomeCustomFurnitureInfo"
    ] = betterproto.message_field(15)
    used_sub_furniture_count_map: Dict[int, int] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class HomeDeleteBlueprintReq(betterproto.Message):
    slot_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class HomeDeleteBlueprintRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(2)
    slot_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class HomeEditCustomFurnitureReq(betterproto.Message):
    custom_furniture_info: "HomeCustomFurnitureInfo" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class HomeEditCustomFurnitureRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    custom_furniture_info: "HomeCustomFurnitureInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HomeEnterEditModeFinishReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class HomeEnterEditModeFinishRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class HomeExchangeWoodReq(betterproto.Message):
    wood_id: int = betterproto.uint32_field(1)
    material_count_map: Dict[int, int] = betterproto.map_field(
        4, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class HomeExchangeWoodRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)
    exchanged_count: int = betterproto.uint32_field(8)
    wood_count: int = betterproto.uint32_field(5)
    wood_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class HomeFishFarmingInfo(betterproto.Message):
    fish_id_list: List[int] = betterproto.uint32_field(13)
    fishpond_guid: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class HomeFishFarmingInfoNotify(betterproto.Message):
    fish_farming_info_list: List["HomeFishFarmingInfo"] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class HomeGalleryInPlayingNotify(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class HomeGetArrangementInfoReq(betterproto.Message):
    scene_id_list: List[int] = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class HomeGetArrangementInfoRsp(betterproto.Message):
    scene_arrangement_info_list: List[
        "HomeSceneArrangementInfo"
    ] = betterproto.message_field(13)
    retcode: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class HomeGetBasicInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class HomeGetBlueprintSlotInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class HomeGetBlueprintSlotInfoRsp(betterproto.Message):
    delete_slot_id_list: List[int] = betterproto.uint32_field(1)
    slot_info_list: List["HomeBlueprintSlotInfo"] = betterproto.message_field(15)
    retcode: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class HomeGetFishFarmingInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class HomeGetFishFarmingInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)
    fish_farming_info_list: List["HomeFishFarmingInfo"] = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class HomeGetGroupRecordReq(betterproto.Message):
    group_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class HomeRacingGalleryRecord(betterproto.Message):
    timestamp: int = betterproto.uint32_field(13)
    player_info: "HomeGroupPlayerInfo" = betterproto.message_field(2)
    use_time: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class HomeRacingRecord(betterproto.Message):
    record_list: List["HomeRacingGalleryRecord"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class HomeSeekFurniturePlayerScore(betterproto.Message):
    score: int = betterproto.uint32_field(8)
    player_info: "HomeGroupPlayerInfo" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class HomeSeekFurnitureOneRecord(betterproto.Message):
    timestamp: int = betterproto.uint32_field(12)
    engaged_player_score_list: List[
        "HomeSeekFurniturePlayerScore"
    ] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class HomeSeekFurnitureAllRecord(betterproto.Message):
    record_list: List["HomeSeekFurnitureOneRecord"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class HomeStakePlayRecord(betterproto.Message):
    engaged_player_info_list: List["HomeGroupPlayerInfo"] = betterproto.message_field(7)
    timestamp: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class HomeStakeRecord(betterproto.Message):
    record_list: List["HomeStakePlayRecord"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class HomeGroupRecord(betterproto.Message):
    group_id: int = betterproto.uint32_field(15)
    racing_gallery_info: "HomeRacingRecord" = betterproto.message_field(
        835, group="detail"
    )
    balloon_gallery_info: "HomeBalloonRecord" = betterproto.message_field(
        726, group="detail"
    )
    stake_play_info: "HomeStakeRecord" = betterproto.message_field(1818, group="detail")
    seek_furniture_gallery_info: "HomeSeekFurnitureAllRecord" = (
        betterproto.message_field(370, group="detail")
    )


@dataclass(eq=False, repr=False)
class HomeGetGroupRecordRsp(betterproto.Message):
    group_record: "HomeGroupRecord" = betterproto.message_field(6)
    retcode: int = betterproto.int32_field(7)
    record_type: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class HomeGetOnlineStatusReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class HomeGetOnlineStatusRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    player_info_list: List["OnlinePlayerInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HomeKickPlayerReq(betterproto.Message):
    is_kick_all: bool = betterproto.bool_field(14)
    target_uid: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class HomeKickPlayerRsp(betterproto.Message):
    is_kick_all: bool = betterproto.bool_field(2)
    retcode: int = betterproto.int32_field(14)
    target_uid: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class HomeLimitedShopGoods(betterproto.Message):
    unk3300_ehkficbackc: int = betterproto.uint32_field(8)
    unk3300_oodccoaighi: int = betterproto.uint32_field(10)
    unk3300_dbjcmmbhbni: int = betterproto.uint32_field(12)
    bought_num: int = betterproto.uint32_field(5)
    goods_item: "ItemParam" = betterproto.message_field(2)
    cost_item_list: List["ItemParam"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class HomeLimitedShop(betterproto.Message):
    goods_list: List["HomeLimitedShopGoods"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class HomeLimitedShopBuyGoodsReq(betterproto.Message):
    goods: "HomeLimitedShopGoods" = betterproto.message_field(6)
    buy_count: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class HomeLimitedShopBuyGoodsRsp(betterproto.Message):
    goods_list: List["HomeLimitedShopGoods"] = betterproto.message_field(3)
    buy_count: int = betterproto.uint32_field(10)
    retcode: int = betterproto.int32_field(13)
    goods: "HomeLimitedShopGoods" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class HomeLimitedShopGoodsListReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class HomeLimitedShopGoodsListRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    shop: "HomeLimitedShop" = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class HomeLimitedShopInfoChangeNotify(betterproto.Message):
    goods_list: List["HomeLimitedShopGoods"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HomeLimitedShopInfoNotify(betterproto.Message):
    shop_info: "HomeLimitedShopInfo" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class HomeLimitedShopInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class HomeLimitedShopInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(9)
    shop_info: "HomeLimitedShopInfo" = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class HomeMarkPointNpcData(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(1)
    costume_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class HomeMarkPointSuiteData(betterproto.Message):
    suite_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class HomeMarkPointFurnitureData(betterproto.Message):
    guid: int = betterproto.uint32_field(1)
    furniture_id: int = betterproto.uint32_field(2)
    furniture_type: int = betterproto.uint32_field(3)
    pos: "Vector" = betterproto.message_field(4)
    npc_data: "HomeMarkPointNpcData" = betterproto.message_field(6, group="extra")
    suite_data: "HomeMarkPointSuiteData" = betterproto.message_field(7, group="extra")


@dataclass(eq=False, repr=False)
class HomeMarkPointSceneData(betterproto.Message):
    unk3300_onjjjepfkji: "Vector" = betterproto.message_field(9)
    scene_id: int = betterproto.uint32_field(6)
    unk3300_hfnoingpmjp: "Vector" = betterproto.message_field(11)
    module_id: int = betterproto.uint32_field(8)
    furniture_list: List["HomeMarkPointFurnitureData"] = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class HomeMarkPointNotify(betterproto.Message):
    mark_point_data_list: List["HomeMarkPointSceneData"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class HomeModuleSeenReq(betterproto.Message):
    seen_module_id_list: List[int] = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class HomeModuleSeenRsp(betterproto.Message):
    seen_module_id_list: List[int] = betterproto.uint32_field(9)
    retcode: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class HomeModuleUnlockNotify(betterproto.Message):
    module_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class HomeNewUnlockedBgmIdListNotify(betterproto.Message):
    new_unlocked_bgm_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class HomePictureFrameInfo(betterproto.Message):
    picture_id: int = betterproto.uint32_field(9)
    guid: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class HomePictureFrameInfoNotify(betterproto.Message):
    picture_frame_info_list: List["HomePictureFrameInfo"] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class HomePlantSubFieldData(betterproto.Message):
    field_status: "HomePlantFieldStatus" = betterproto.enum_field(5)
    unk3300_ielheaamakg: int = betterproto.uint32_field(7)
    entity_id_list: List[int] = betterproto.uint32_field(12)
    end_time: int = betterproto.fixed32_field(6)
    unk3300_gajhlgklbbk: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class HomePlantFieldData(betterproto.Message):
    scene_id: int = betterproto.uint32_field(15)
    field_guid: int = betterproto.uint32_field(5)
    sub_field_list: List["HomePlantSubFieldData"] = betterproto.message_field(3)
    furniture_id: int = betterproto.uint32_field(1)
    spawn_pos: "Vector" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class HomePlantFieldNotify(betterproto.Message):
    field: "HomePlantFieldData" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class HomePlantInfoNotify(betterproto.Message):
    field_list: List["HomePlantFieldData"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class HomePlantInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class HomePlantInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)
    field_list: List["HomePlantFieldData"] = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class HomePlantSeedReq(betterproto.Message):
    seed_id_list: List[int] = betterproto.uint32_field(7)
    field_guid: int = betterproto.uint32_field(1)
    index: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class HomePlantSeedRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class HomePlantWeedReq(betterproto.Message):
    field_guid: int = betterproto.uint32_field(13)
    index: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class HomePlantWeedRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class HomePreChangeEditModeNotify(betterproto.Message):
    is_enter_edit_mode: bool = betterproto.bool_field(10)


@dataclass(eq=False, repr=False)
class HomePreviewBlueprintReq(betterproto.Message):
    share_code: str = betterproto.string_field(10)


@dataclass(eq=False, repr=False)
class HomePreviewBlueprintRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(13)
    scene_arrangement_info: "HomeSceneArrangementInfo" = betterproto.message_field(5)
    share_code: str = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class HomePriorCheckNotify(betterproto.Message):
    end_time: int = betterproto.fixed32_field(3)


@dataclass(eq=False, repr=False)
class RacingGallerySettleInfo(betterproto.Message):
    winner_uid: int = betterproto.uint32_field(10)
    use_time: int = betterproto.uint32_field(15)
    reason: "GalleryStopReason" = betterproto.enum_field(11)


@dataclass(eq=False, repr=False)
class HomeRacingGallerySettleNotify(betterproto.Message):
    settle_info: "RacingGallerySettleInfo" = betterproto.message_field(14)
    is_new_record: bool = betterproto.bool_field(7)
    rank: int = betterproto.uint32_field(15)
    gallery_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class HomeResource(betterproto.Message):
    store_limit: int = betterproto.uint32_field(6)
    next_refresh_time: int = betterproto.fixed32_field(13)
    store_value: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class HomeResourceNotify(betterproto.Message):
    fetter_exp: "HomeResource" = betterproto.message_field(7)
    home_coin: "HomeResource" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class HomeResourceTakeFetterExpReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class HomeResourceTakeFetterExpRsp(betterproto.Message):
    fetter_exp: "HomeResource" = betterproto.message_field(4)
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class HomeResourceTakeHomeCoinReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class HomeResourceTakeHomeCoinRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(4)
    home_coin: "HomeResource" = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class HomeSaveArrangementNoChangeReq(betterproto.Message):
    scene_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class HomeSaveArrangementNoChangeRsp(betterproto.Message):
    scene_id: int = betterproto.uint32_field(9)
    retcode: int = betterproto.int32_field(10)


@dataclass(eq=False, repr=False)
class HomeSceneArrangementMuipData(betterproto.Message):
    module_id: int = betterproto.uint32_field(1)
    scene_id: int = betterproto.uint32_field(2)
    is_room: bool = betterproto.bool_field(3)
    block_data_list: List["HomeBlockArrangementMuipData"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class HomeSceneInitFinishReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class HomeSceneInitFinishRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class HomeSceneJumpReq(betterproto.Message):
    is_enter_room_scene: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class HomeSceneJumpRsp(betterproto.Message):
    is_enter_room_scene: bool = betterproto.bool_field(6)
    retcode: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class HomeScenePointFishFarmingInfo(betterproto.Message):
    scene_id: int = betterproto.uint32_field(9)
    local_entity_id: int = betterproto.uint32_field(7)
    fish_id_list: List[int] = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class HomeScenePointFishFarmingInfoNotify(betterproto.Message):
    fish_farming_info_list: List[
        "HomeScenePointFishFarmingInfo"
    ] = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class HomeSearchBlueprintReq(betterproto.Message):
    share_code: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class HomeSearchBlueprintRsp(betterproto.Message):
    search_info: "HomeBlueprintSearchInfo" = betterproto.message_field(4)
    retcode: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class HomeSeekFurnitureGalleryScoreNotify(betterproto.Message):
    reason: "GalleryStopReason" = betterproto.enum_field(7)
    gallery_id: int = betterproto.uint32_field(13)
    record: "HomeSeekFurnitureOneRecord" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HomeSetBlueprintFriendOptionReq(betterproto.Message):
    is_allow_friend_copy: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class HomeSetBlueprintFriendOptionRsp(betterproto.Message):
    is_allow_friend_copy: bool = betterproto.bool_field(14)
    retcode: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class HomeSetBlueprintSlotOptionReq(betterproto.Message):
    slot_id: int = betterproto.uint32_field(3)
    is_allow_copy: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class HomeSetBlueprintSlotOptionRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(5)
    is_allow_copy: bool = betterproto.bool_field(15)
    slot_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class HomeTransferData(betterproto.Message):
    spawn_pos: "Vector" = betterproto.message_field(1)
    guid: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class HomeTransferReq(betterproto.Message):
    is_transfer_to_safe_point: bool = betterproto.bool_field(4)
    guid: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class HomeTransferRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(12)


@dataclass(eq=False, repr=False)
class HomeUpdateArrangementInfoReq(betterproto.Message):
    scene_arrangement_info: "HomeSceneArrangementInfo" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class HomeUpdateArrangementInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class HomeUpdateFishFarmingInfoReq(betterproto.Message):
    fish_farming_info: "HomeFishFarmingInfo" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class HomeUpdateFishFarmingInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(14)


@dataclass(eq=False, repr=False)
class HomeUpdatePictureFrameInfoReq(betterproto.Message):
    picture_frame_info: "HomePictureFrameInfo" = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class HomeUpdatePictureFrameInfoRsp(betterproto.Message):
    picture_frame_info: "HomePictureFrameInfo" = betterproto.message_field(6)
    retcode: int = betterproto.int32_field(9)


@dataclass(eq=False, repr=False)
class HomeUpdateScenePointFishFarmingInfoReq(betterproto.Message):
    fish_farming_info: "HomeScenePointFishFarmingInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HomeUpdateScenePointFishFarmingInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class HomeVerifyBlockData(betterproto.Message):
    block_id: int = betterproto.uint32_field(11)
    furniture_count: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class HomeVerifySceneData(betterproto.Message):
    scene_id: int = betterproto.uint32_field(7)
    blocks: List["HomeVerifyBlockData"] = betterproto.message_field(8)
    version: int = betterproto.uint32_field(2)
    is_room: int = betterproto.uint32_field(9)
    module_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class HomeVerifyData(betterproto.Message):
    home_info: "HomeVerifySceneData" = betterproto.message_field(4)
    arrangement_data: "HomeSceneArrangementMuipData" = betterproto.message_field(9)
    timestamp: int = betterproto.fixed32_field(11)
    token: str = betterproto.string_field(1)
    aid: str = betterproto.string_field(10)
    lang: "LanguageType" = betterproto.enum_field(6)
    uid: int = betterproto.uint32_field(2)
    region: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class HomeVerifyFurnitureData(betterproto.Message):
    type: List[int] = betterproto.uint32_field(12)
    num: int = betterproto.uint32_field(7)
    id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class HostPlayerNotify(betterproto.Message):
    host_peer_id: int = betterproto.uint32_field(12)
    host_uid: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class HuntingFailNotify(betterproto.Message):
    hunting_pair: "HuntingPair" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class HuntingGiveUpReq(betterproto.Message):
    hunting_pair: "HuntingPair" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HuntingGiveUpRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(2)
    hunting_pair: "HuntingPair" = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class HuntingOngoingNotify(betterproto.Message):
    hunting_pair: "HuntingPair" = betterproto.message_field(11)
    finish_clue_count: int = betterproto.uint32_field(7)
    next_position: "Vector" = betterproto.message_field(2)
    is_final: bool = betterproto.bool_field(5)
    is_started: bool = betterproto.bool_field(13)
    fail_time: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class HuntingRevealClueNotify(betterproto.Message):
    hunting_pair: "HuntingPair" = betterproto.message_field(3)
    finished_group_id: int = betterproto.uint32_field(6)
    finish_clue_count: int = betterproto.uint32_field(14)
    clue_position: "Vector" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HuntingRevealFinalNotify(betterproto.Message):
    final_position: "Vector" = betterproto.message_field(3)
    hunting_pair: "HuntingPair" = betterproto.message_field(9)
    finished_group_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class HuntingStartNotify(betterproto.Message):
    hunting_pair: "HuntingPair" = betterproto.message_field(3)
    fail_time: int = betterproto.uint32_field(5)
    clue_position: "Vector" = betterproto.message_field(6)
    is_final: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class HuntingSuccessNotify(betterproto.Message):
    hunting_pair: "HuntingPair" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class InBattleChessInfo(betterproto.Message):
    round: int = betterproto.uint32_field(2)
    mystery_info: "ChessMysteryInfo" = betterproto.message_field(6)
    player_info_map: Dict[int, "ChessPlayerInfo"] = betterproto.map_field(
        15, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    max_escapable_monsters: int = betterproto.uint32_field(7)
    escaped_monsters: int = betterproto.uint32_field(11)
    selected_card_info_list: List["ChessCardInfo"] = betterproto.message_field(4)
    total_round: int = betterproto.uint32_field(13)
    left_monsters: int = betterproto.uint32_field(5)
    ban_card_tag_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class InBattleChessSettleInfo(betterproto.Message):
    unk3300_lpanfebfjoj: int = betterproto.uint32_field(5)
    scene_time_ms: int = betterproto.uint64_field(8)
    unk3300_nkhdfhapncn: int = betterproto.uint32_field(13)
    is_success: bool = betterproto.bool_field(6)
    unk3300_emnlldjhmei: int = betterproto.uint32_field(1)
    score_list: List["ExhibitionDisplayInfo"] = betterproto.message_field(4)
    unk3300_ipgiljcbabk: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class InBattleFleurFairInfo(betterproto.Message):
    gallery_stage_index: int = betterproto.uint32_field(7)
    preview_display_duration: int = betterproto.uint32_field(11)
    unk3300_nnpmbfgjell: List[int] = betterproto.uint32_field(15)
    preview_stage_index: int = betterproto.uint32_field(9)
    unk3300_ijbkklgomie: List[int] = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class IrodoriChessMysteryInfo(betterproto.Message):
    entrance_detail_info: "IrodoriChessEntranceDetailInfo" = betterproto.message_field(
        3
    )
    exit_point_id_list: List[int] = betterproto.uint32_field(14)
    entrance_point_id_list: List[int] = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class InBattleIrodoriChessInfo(betterproto.Message):
    settle_score: int = betterproto.uint32_field(1)
    mystery_info: "IrodoriChessMysteryInfo" = betterproto.message_field(2)
    left_monsters: int = betterproto.uint32_field(15)
    selected_card_id_list: List[int] = betterproto.uint32_field(10)
    building_points: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class InBattleIrodoriChessSettleInfo(betterproto.Message):
    kill_monster_num: int = betterproto.uint32_field(15)
    scene_time_ms: int = betterproto.uint64_field(14)
    is_perfect: bool = betterproto.bool_field(8)
    is_new_record: bool = betterproto.bool_field(7)
    settle_score: int = betterproto.uint32_field(10)
    is_activity_end: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class InBattleMechanicusBuildingInfo(betterproto.Message):
    refund_points: int = betterproto.uint32_field(8)
    cost_points: int = betterproto.uint32_field(15)
    level: int = betterproto.uint32_field(13)
    building_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class InBattleMechanicusBuildingPointsNotify(betterproto.Message):
    player_building_points_map: Dict[int, int] = betterproto.map_field(
        12, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class InBattleMechanicusCardInfo(betterproto.Message):
    unk3300_kcieinmepdh: int = betterproto.uint32_field(2)
    unk3300_ndaookkgjph: int = betterproto.uint32_field(7)
    cost_points: int = betterproto.uint32_field(5)
    card_id: int = betterproto.uint32_field(3)
    unk3300_fnahkhodbkn: int = betterproto.uint32_field(13)
    challenge_state: "InBattleMechanicusCardChallengeState" = betterproto.enum_field(15)


@dataclass(eq=False, repr=False)
class InBattleMechanicusCardResultNotify(betterproto.Message):
    group_id: int = betterproto.uint32_field(10)
    card_list: List["InBattleMechanicusCardInfo"] = betterproto.message_field(8)
    play_index: int = betterproto.uint32_field(14)
    player_confirmed_card_map: Dict[int, int] = betterproto.map_field(
        9, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    wait_begin_time_us: int = betterproto.uint64_field(2)
    wait_seconds: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class InBattleMechanicusConfirmCardNotify(betterproto.Message):
    group_id: int = betterproto.uint32_field(11)
    player_uid: int = betterproto.uint32_field(12)
    card_id: int = betterproto.uint32_field(8)
    play_index: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class InBattleMechanicusConfirmCardReq(betterproto.Message):
    card_id: int = betterproto.uint32_field(3)
    play_index: int = betterproto.uint32_field(8)
    group_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class InBattleMechanicusConfirmCardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(7)
    group_id: int = betterproto.uint32_field(5)
    card_id: int = betterproto.uint32_field(9)
    play_index: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class InBattleMechanicusEscapeMonsterNotify(betterproto.Message):
    escaped_monster_num: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class InBattleMechanicusMonsterInfo(betterproto.Message):
    level: int = betterproto.uint32_field(10)
    monster_id: int = betterproto.uint32_field(8)
    count: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class InBattleMechanicusPlayerInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(13)
    is_card_confirmed: bool = betterproto.bool_field(12)
    building_points: int = betterproto.uint32_field(2)
    building_list: List["InBattleMechanicusBuildingInfo"] = betterproto.message_field(5)
    pick_card_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class InBattleMechanicusInfo(betterproto.Message):
    unk3300_mnndelkiblg: List[int] = betterproto.uint32_field(656)
    unk3300_ghbehpgbbih: List[int] = betterproto.uint32_field(683)
    stage: "InBattleMechanicusStageType" = betterproto.enum_field(7)
    unk3300_eboigfmokhk: int = betterproto.uint32_field(4)
    wait_seconds: int = betterproto.uint32_field(13)
    left_monster_num: int = betterproto.uint32_field(15)
    unk3300_ifipklogeof: int = betterproto.uint64_field(6)
    player_list: List["InBattleMechanicusPlayerInfo"] = betterproto.message_field(12)
    total_round: int = betterproto.uint32_field(1)
    unk3300_iapinolialf: int = betterproto.uint64_field(14)
    monster_list: List["InBattleMechanicusMonsterInfo"] = betterproto.message_field(9)
    unk3300_cijalcamhcd: int = betterproto.uint32_field(3)
    wait_begin_time_us: int = betterproto.uint64_field(2)
    history_card_list: List["InBattleMechanicusCardInfo"] = betterproto.message_field(5)
    pick_card_list: List["InBattleMechanicusCardInfo"] = betterproto.message_field(8)
    escaped_monster_num: int = betterproto.uint32_field(10)
    round: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class InBattleMechanicusLeftMonsterNotify(betterproto.Message):
    left_monster_num: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class InBattleMechanicusPickCardNotify(betterproto.Message):
    player_uid: int = betterproto.uint32_field(1)
    card_id: int = betterproto.uint32_field(11)
    group_id: int = betterproto.uint32_field(12)
    play_index: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class InBattleMechanicusPickCardReq(betterproto.Message):
    card_id: int = betterproto.uint32_field(9)
    play_index: int = betterproto.uint32_field(4)
    group_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class InBattleMechanicusPickCardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(4)
    group_id: int = betterproto.uint32_field(14)
    play_index: int = betterproto.uint32_field(10)
    card_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class MultistageSettleWatcherInfo(betterproto.Message):
    is_inverse: bool = betterproto.bool_field(3)
    cur_progress: int = betterproto.uint32_field(6)
    watcher_id: int = betterproto.uint32_field(5)
    total_progress: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class InBattleMechanicusSettleInfo(betterproto.Message):
    scene_time_ms: int = betterproto.uint64_field(12)
    is_success: bool = betterproto.bool_field(13)
    group_id: int = betterproto.uint32_field(10)
    unk3300_ekaiaplnipm: int = betterproto.uint32_field(9)
    unk3300_haeopaobbfe: int = betterproto.uint32_field(4)
    unk3300_nambbhmjjln: int = betterproto.uint32_field(11)
    play_index: int = betterproto.uint32_field(8)
    watcher_list: List["MultistageSettleWatcherInfo"] = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class InBattleMechanicusSettleNotify(betterproto.Message):
    scene_time_ms: int = betterproto.uint64_field(15)
    group_id: int = betterproto.uint32_field(5)
    watcher_list: List["MultistageSettleWatcherInfo"] = betterproto.message_field(2)
    unk3300_nambbhmjjln: int = betterproto.uint32_field(13)
    unk3300_haeopaobbfe: int = betterproto.uint32_field(3)
    unk3300_ekaiaplnipm: int = betterproto.uint32_field(10)
    play_index: int = betterproto.uint32_field(6)
    is_success: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class InstableSprayEnterDungeonReq(betterproto.Message):
    stage_id: int = betterproto.uint32_field(5)
    avatar_info_list: List["InstableSprayAvatarInfo"] = betterproto.message_field(2)
    difficulty: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class InstableSprayEnterDungeonRsp(betterproto.Message):
    level_id: int = betterproto.uint32_field(4)
    retcode: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class InstableSprayGalleryInfoNotify(betterproto.Message):
    score: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class InstableSprayLevelFinishNotify(betterproto.Message):
    round: int = betterproto.uint32_field(2)
    level_id: int = betterproto.uint32_field(15)
    unk3300_amebapiplgl: bool = betterproto.bool_field(3)
    unk3300_dhkhbklbipa: bool = betterproto.bool_field(12)
    stage_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class InstableSprayRestartDungeonReq(betterproto.Message):
    avatar_info_list: List["InstableSprayAvatarInfo"] = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class InstableSprayRestartDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(12)
    level_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class InstableSpraySwitchTeamReq(betterproto.Message):
    avatar_info_list: List["InstableSprayAvatarInfo"] = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class InstableSpraySwitchTeamRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(7)
    level_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class InteractDailyDungeonInfoNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class InterpretInferenceWordReq(betterproto.Message):
    page_id: int = betterproto.uint32_field(3)
    word_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class InterpretInferenceWordRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)
    word_id: int = betterproto.uint32_field(2)
    page_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class InterruptGalleryReq(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class InterruptGalleryRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(10)
    gallery_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class Investigation(betterproto.Message):
    total_progress: int = betterproto.uint32_field(5)
    progress: int = betterproto.uint32_field(14)
    id: int = betterproto.uint32_field(10)
    state: "InvestigationState" = betterproto.enum_field(6)


@dataclass(eq=False, repr=False)
class InvestigationMonsterUpdateNotify(betterproto.Message):
    investigation_monster: "InvestigationMonster" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class InvestigationQuestDailyNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class InvestigationReadQuestDailyNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class InvestigationTarget(betterproto.Message):
    investigation_id: int = betterproto.uint32_field(8)
    quest_id: int = betterproto.uint32_field(6)
    state: "InvestigationTargetState" = betterproto.enum_field(2)
    total_progress: int = betterproto.uint32_field(5)
    progress: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class IrodoriChessEquipCardReq(betterproto.Message):
    is_hard_map: bool = betterproto.bool_field(8)
    level_id: int = betterproto.uint32_field(1)
    card_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class IrodoriChessEquipCardRsp(betterproto.Message):
    card_id: int = betterproto.uint32_field(9)
    level_id: int = betterproto.uint32_field(2)
    is_hard_map: bool = betterproto.bool_field(8)
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class IrodoriChessLeftMonsterNotify(betterproto.Message):
    left_monsters: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class IrodoriChessPlayerInfo(betterproto.Message):
    settle_score: int = betterproto.uint32_field(11)
    uid: int = betterproto.uint32_field(10)
    building_points: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class IrodoriChessPlayerInfoNotify(betterproto.Message):
    player_info: "IrodoriChessPlayerInfo" = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class IrodoriChessUnequipCardReq(betterproto.Message):
    level_id: int = betterproto.uint32_field(1)
    card_id: int = betterproto.uint32_field(3)
    is_hard_map: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class IrodoriChessUnequipCardRsp(betterproto.Message):
    card_id: int = betterproto.uint32_field(10)
    retcode: int = betterproto.int32_field(2)
    level_id: int = betterproto.uint32_field(12)
    is_hard_map: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class IrodoriEditFlowerCombinationReq(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    combination_info: "CustomGadgetTreeInfo" = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class IrodoriEditFlowerCombinationRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(2)
    unk3300_iaplhbkjlbf: bool = betterproto.bool_field(8)
    unk3300_dbbgpomdkpk: bool = betterproto.bool_field(9)


@dataclass(eq=False, repr=False)
class IrodoriFillPoetryReq(betterproto.Message):
    line_id: int = betterproto.uint32_field(6)
    theme_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class IrodoriFillPoetryRsp(betterproto.Message):
    theme_data: "IrodoriPoetryThemeData" = betterproto.message_field(8)
    retcode: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class IrodoriMasterGalleryCgEndNotify(betterproto.Message):
    level_id: int = betterproto.uint32_field(11)
    gallery_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class IrodoriMasterGallerySettleInfo(betterproto.Message):
    reason: "GalleryStopReason" = betterproto.enum_field(10)
    difficult: int = betterproto.uint32_field(2)
    finish_time: int = betterproto.uint32_field(4)
    level_id: int = betterproto.uint32_field(1)
    is_finish: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class IrodoriMasterGallerySettleNotify(betterproto.Message):
    settle_info: "IrodoriMasterGallerySettleInfo" = betterproto.message_field(9)
    gallery_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class IrodoriMasterStartGalleryReq(betterproto.Message):
    difficulty: int = betterproto.uint32_field(15)
    level_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class IrodoriMasterStartGalleryRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class IrodoriScanEntityReq(betterproto.Message):
    entity_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class IrodoriScanEntityRsp(betterproto.Message):
    theme_data: "IrodoriPoetryThemeData" = betterproto.message_field(1)
    retcode: int = betterproto.int32_field(12)
    is_get_inspiration: bool = betterproto.bool_field(13)


@dataclass(eq=False, repr=False)
class IslandPartyGallerySettleInfo(betterproto.Message):
    card_list: List["ExhibitionDisplayInfo"] = betterproto.message_field(1)
    player_info: "OnlinePlayerInfo" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class IslandPartyRaftInfoNotify(betterproto.Message):
    unk3300_hnecegnmknk: int = betterproto.uint32_field(4)
    unk3300_fbacmofgpgj: int = betterproto.uint32_field(1)
    point_id: int = betterproto.uint32_field(8)
    coin: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class IslandPartySailInfoNotify(betterproto.Message):
    stage: "IslandPartySailStage" = betterproto.enum_field(2)
    kill_monster_count: int = betterproto.uint32_field(6)
    coin: int = betterproto.uint32_field(14)
    progress: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class IslandPartySettleNotify(betterproto.Message):
    time_remain: int = betterproto.uint32_field(9)
    is_new_record: bool = betterproto.bool_field(3)
    score_list: List["ExhibitionDisplayInfo"] = betterproto.message_field(5)
    reason: "GalleryStopReason" = betterproto.enum_field(12)
    settle_info_list: List["IslandPartyGallerySettleInfo"] = betterproto.message_field(
        13
    )


@dataclass(eq=False, repr=False)
class ItemHint(betterproto.Message):
    is_new: bool = betterproto.bool_field(9)
    guid: int = betterproto.uint64_field(10)
    count: int = betterproto.uint32_field(15)
    item_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ItemAddHintNotify(betterproto.Message):
    unk3300_flikebjincl: bool = betterproto.bool_field(5)
    unk3300_nijlgehnbnc: bool = betterproto.bool_field(4)
    item_list: List["ItemHint"] = betterproto.message_field(11)
    overflow_transformed_item_list: List["ItemHint"] = betterproto.message_field(1)
    unk3300_kiomjnhfmde: bool = betterproto.bool_field(6)
    reason: int = betterproto.uint32_field(14)
    position: "Vector" = betterproto.message_field(12)
    quest_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ItemCdGroupTimeNotify(betterproto.Message):
    item_cd_map: Dict[int, int] = betterproto.map_field(
        7, betterproto.TYPE_UINT32, betterproto.TYPE_UINT64
    )


@dataclass(eq=False, repr=False)
class ItemGivingReq(betterproto.Message):
    giving_id: int = betterproto.uint32_field(6)
    item_giving_type: "ItemGivingReqItemGivingType" = betterproto.enum_field(8)
    item_param_list: List["ItemParam"] = betterproto.message_field(12)
    item_guid_count_map: Dict[int, int] = betterproto.map_field(
        11, betterproto.TYPE_UINT64, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class ItemGivingRsp(betterproto.Message):
    giving_group_id: int = betterproto.uint32_field(15)
    retcode: int = betterproto.int32_field(5)
    giving_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class ItemRenameAvatarReq(betterproto.Message):
    rename_id: int = betterproto.uint32_field(11)
    avatar_name: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class ItemRenameAvatarRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(14)
    cd_time: int = betterproto.uint32_field(5)
    rename_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class JoinHomeWorldFailNotify(betterproto.Message):
    retcode: int = betterproto.int32_field(6)
    target_uid: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class JoinPlayerFailNotify(betterproto.Message):
    retcode: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class JoinPlayerSceneReq(betterproto.Message):
    target_uid: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class JoinPlayerSceneRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class KeepAliveNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class LanternRiteDoFireworksReformReq(betterproto.Message):
    stage_id: int = betterproto.uint32_field(15)
    challenge_id: int = betterproto.uint32_field(13)
    factor_id: int = betterproto.uint32_field(9)
    skill_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class LanternRiteFireworksReformFactorInfo(betterproto.Message):
    factor_value: int = betterproto.uint32_field(12)
    factor_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class LanternRiteDoFireworksReformRsp(betterproto.Message):
    factor_info_list: List[
        "LanternRiteFireworksReformFactorInfo"
    ] = betterproto.message_field(6)
    retcode: int = betterproto.int32_field(4)
    unk3300_bjhgcfanmbi: int = betterproto.uint32_field(12)
    unk3300_omhpiggdcbo: int = betterproto.uint32_field(10)
    challenge_id: int = betterproto.uint32_field(9)
    unk3300_lkofbpdkegg: int = betterproto.uint32_field(8)
    is_lucky: bool = betterproto.bool_field(1)
    unk3300_lkkbpajocml: int = betterproto.uint32_field(14)
    stage_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class LanternRiteEndFireworksReformReq(betterproto.Message):
    stage_id: int = betterproto.uint32_field(1)
    challenge_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class LanternRiteEndFireworksReformRsp(betterproto.Message):
    unk3300_cgjnbgakfad: bool = betterproto.bool_field(11)
    unk3300_fpefiadfbni: bool = betterproto.bool_field(1)
    retcode: int = betterproto.int32_field(9)
    stage_id: int = betterproto.uint32_field(13)
    final_score: int = betterproto.uint32_field(15)
    unk3300_almnegciila: bool = betterproto.bool_field(6)
    is_new_record: bool = betterproto.bool_field(10)
    challenge_id: int = betterproto.uint32_field(4)
    is_full_score: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class LanternRiteFireworksReformSkillInfo(betterproto.Message):
    is_unlock: bool = betterproto.bool_field(9)
    skill_id: int = betterproto.uint32_field(1)
    unk3300_iepbapjhlei: int = betterproto.uint32_field(15)
    unk3300_edppffflfgg: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class LanternRiteStartFireworksReformReq(betterproto.Message):
    challenge_id: int = betterproto.uint32_field(2)
    stage_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class LanternRiteStartFireworksReformRsp(betterproto.Message):
    stage_id: int = betterproto.uint32_field(6)
    challenge_id: int = betterproto.uint32_field(4)
    unk3300_bjhgcfanmbi: int = betterproto.uint32_field(14)
    unk3300_lkofbpdkegg: int = betterproto.uint32_field(12)
    factor_info_list: List[
        "LanternRiteFireworksReformFactorInfo"
    ] = betterproto.message_field(13)
    retcode: int = betterproto.int32_field(2)
    unk3300_omhpiggdcbo: int = betterproto.uint32_field(11)
    skill_info_list: List[
        "LanternRiteFireworksReformSkillInfo"
    ] = betterproto.message_field(15)
    unk3300_lkkbpajocml: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class LanternRiteTakeSkinRewardReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class LanternRiteTakeSkinRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(10)


@dataclass(eq=False, repr=False)
class LastPacketPrintNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class LaunchFireworksReq(betterproto.Message):
    scheme_data: "FireworksLaunchSchemeData" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class LaunchFireworksRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class LeaveSceneReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class LeaveSceneRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class LeaveWorldNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class LevelTagDataNotify(betterproto.Message):
    level_tag_id_list: List[int] = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class LevelupCityReq(betterproto.Message):
    scene_id: int = betterproto.uint32_field(9)
    item_num: int = betterproto.uint32_field(13)
    area_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class LevelupCityRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(7)
    city_info: "CityInfo" = betterproto.message_field(14)
    scene_id: int = betterproto.uint32_field(11)
    area_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class LifeStateChangeNotify(betterproto.Message):
    move_reliable_seq: int = betterproto.uint32_field(7)
    entity_id: int = betterproto.uint32_field(8)
    life_state: int = betterproto.uint32_field(10)
    server_buff_list: List["ServerBuff"] = betterproto.message_field(15)
    source_entity_id: int = betterproto.uint32_field(11)
    die_type: "PlayerDieType" = betterproto.enum_field(4)
    attack_tag: str = betterproto.string_field(13)


@dataclass(eq=False, repr=False)
class LikeCustomDungeonReq(betterproto.Message):
    is_cancel_like: bool = betterproto.bool_field(2)
    dungeon_guid: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class LikeCustomDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(9)


@dataclass(eq=False, repr=False)
class LiveEndNotify(betterproto.Message):
    live_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class LiveStartNotify(betterproto.Message):
    live_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class LoadActivityTerrainNotify(betterproto.Message):
    activity_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class LockedPersonallineData(betterproto.Message):
    lock_reason: "LockedPersonallineDataLockReason" = betterproto.enum_field(13)
    personal_line_id: int = betterproto.uint32_field(3)
    chapter_id: int = betterproto.uint32_field(4, group="param")
    level: int = betterproto.uint32_field(15, group="param")


@dataclass(eq=False, repr=False)
class LuaEnvironmentEffectNotify(betterproto.Message):
    type: int = betterproto.uint32_field(8)
    int_param_list: List[int] = betterproto.int32_field(10)
    effect_alias: str = betterproto.string_field(3)
    float_param_list: List[float] = betterproto.float_field(12)


@dataclass(eq=False, repr=False)
class LuaSetOptionNotify(betterproto.Message):
    lua_set_param: str = betterproto.string_field(1)
    option_type: "LuaSetOptionNotifyLuaOptionType" = betterproto.enum_field(7)


@dataclass(eq=False, repr=False)
class LuminanceStoneChallengeGallerySettleInfo(betterproto.Message):
    final_score: int = betterproto.uint32_field(12)
    clean_mud_count: int = betterproto.uint32_field(8)
    reason: "GalleryStopReason" = betterproto.enum_field(15)
    gallery_id: int = betterproto.uint32_field(11)
    kill_special_monster_count: int = betterproto.uint32_field(4)
    kill_monster_count: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class LuminanceStoneChallengeSettleInfo(betterproto.Message):
    is_new_record: bool = betterproto.bool_field(6)
    settle_info: "LuminanceStoneChallengeGallerySettleInfo" = betterproto.message_field(
        10
    )


@dataclass(eq=False, repr=False)
class LuminanceStoneChallengeSettleNotify(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(3)
    settle_info: "LuminanceStoneChallengeSettleInfo" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class LunaRiteAreaFinishNotify(betterproto.Message):
    area_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class LunaRiteGroupBundleRegisterNotify(betterproto.Message):
    group_link_bundle_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class LunaRiteHintPointRemoveNotify(betterproto.Message):
    hint_point_index: List[int] = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class LunaRiteHintPointReq(betterproto.Message):
    area_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class LunaRiteHintPointRsp(betterproto.Message):
    area_id: int = betterproto.uint32_field(9)
    hint_point: List["LunaRiteHintPoint"] = betterproto.message_field(11)
    hint_status: "LunaRiteHintStatusType" = betterproto.enum_field(5)
    retcode: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class LunaRiteSacrificeReq(betterproto.Message):
    index: int = betterproto.uint32_field(2)
    area_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class LunaRiteSacrificeRsp(betterproto.Message):
    sacrifice_list: List[int] = betterproto.uint32_field(11)
    retcode: int = betterproto.int32_field(12)
    index: int = betterproto.uint32_field(3)
    area_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class LunaRiteTakeSacrificeRewardReq(betterproto.Message):
    index: int = betterproto.uint32_field(4)
    area_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class LunaRiteTakeSacrificeRewardRsp(betterproto.Message):
    area_id: int = betterproto.uint32_field(14)
    retcode: int = betterproto.int32_field(1)
    sacrifice_reward_index: int = betterproto.uint32_field(6)
    sacrifice_reward_list: List[int] = betterproto.uint32_field(9)
    index: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class MailChangeNotify(betterproto.Message):
    del_mail_id_list: List[int] = betterproto.uint32_field(15)
    mail_list: List["MailData"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MainCoopFailNotify(betterproto.Message):
    textmap_id: str = betterproto.string_field(7)
    chapter_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class MainCoopUpdateNotify(betterproto.Message):
    main_coop_list: List["MainCoop"] = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class MapAreaChangeNotify(betterproto.Message):
    map_area_info_list: List["MapAreaInfo"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class MapInfo(betterproto.Message):
    minx: int = betterproto.int32_field(1)
    maxx: int = betterproto.int32_field(2)
    minz: int = betterproto.int32_field(3)
    maxz: int = betterproto.int32_field(4)
    cells: List["CellInfo"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class MarkEntityInMinMapNotify(betterproto.Message):
    position: "Vector" = betterproto.message_field(4)
    entity_id: int = betterproto.uint32_field(3)
    monster_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class MarkMapReq(betterproto.Message):
    op: "MarkMapReqOperation" = betterproto.enum_field(3)
    old: "MapMarkPoint" = betterproto.message_field(6)
    mark: "MapMarkPoint" = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class MarkMapRsp(betterproto.Message):
    mark_list: List["MapMarkPoint"] = betterproto.message_field(2)
    retcode: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class MarkNewNotify(betterproto.Message):
    id_list: List[int] = betterproto.uint32_field(7)
    mark_new_type: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class MarkTargetInvestigationMonsterNotify(betterproto.Message):
    monster_id: int = betterproto.uint32_field(10)
    scene_id: int = betterproto.uint32_field(7)
    group_id: int = betterproto.uint32_field(15)
    investigation_monster_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ShapeBox(betterproto.Message):
    center: "Vector" = betterproto.message_field(1)
    axis0: "Vector" = betterproto.message_field(2)
    axis1: "Vector" = betterproto.message_field(3)
    axis2: "Vector" = betterproto.message_field(4)
    extents: "Vector" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class ShapeSphere(betterproto.Message):
    center: "Vector" = betterproto.message_field(1)
    radius: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class MassiveEntityElementOpBatchNotify(betterproto.Message):
    attacker_id: int = betterproto.uint32_field(8)
    attack_element_durability: float = betterproto.float_field(4)
    unk3300_pnangdnnfch: int = betterproto.int32_field(2)
    entity_type: int = betterproto.int32_field(10)
    unk3300_knldjpemckp: int = betterproto.int32_field(7)
    op_idx: int = betterproto.uint32_field(11)
    user_id: int = betterproto.uint32_field(1)
    shape_sphere: "ShapeSphere" = betterproto.message_field(14, group="check_shape")
    shape_box: "ShapeBox" = betterproto.message_field(13, group="check_shape")


@dataclass(eq=False, repr=False)
class MassiveEntityState(betterproto.Message):
    entity_type: int = betterproto.uint32_field(1)
    obj_id: int = betterproto.int64_field(2)
    element_state: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class MassiveEntityStateChangedNotify(betterproto.Message):
    massive_entity_state_list: List["MassiveEntityState"] = betterproto.message_field(
        14
    )


@dataclass(eq=False, repr=False)
class MaterialDeleteReturnNotify(betterproto.Message):
    type: "MaterialDeleteReturnType" = betterproto.enum_field(7)
    unk3300_ofokfkbaljd: Dict[int, int] = betterproto.map_field(
        12, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    unk3300_laihdkjahaf: Dict[int, int] = betterproto.map_field(
        8, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class MaterialDeleteUpdateNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class McoinExchangeHcoinReq(betterproto.Message):
    hcoin: int = betterproto.uint32_field(1)
    mcoin_cost: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class McoinExchangeHcoinRsp(betterproto.Message):
    mcoin_cost: int = betterproto.uint32_field(12)
    retcode: int = betterproto.int32_field(10)
    hcoin: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MechanicusCandidateTeamCreateReq(betterproto.Message):
    difficult_level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MechanicusCandidateTeamCreateRsp(betterproto.Message):
    difficult_level: int = betterproto.uint32_field(11)
    dungeon_id: int = betterproto.uint32_field(5)
    retcode: int = betterproto.int32_field(10)


@dataclass(eq=False, repr=False)
class MechanicusCloseNotify(betterproto.Message):
    mechanicus_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class MechanicusCoinNotify(betterproto.Message):
    coin: int = betterproto.uint32_field(8)
    mechanicus_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class MechanicusLevelupGearReq(betterproto.Message):
    mechanicus_id: int = betterproto.uint32_field(14)
    gear_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class MechanicusLevelupGearRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)
    gear_id: int = betterproto.uint32_field(9)
    mechanicus_id: int = betterproto.uint32_field(4)
    after_gear_level: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class MechanicusOpenNotify(betterproto.Message):
    mechanicus_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class MechanicusSequenceOpenNotify(betterproto.Message):
    mechanicus_id: int = betterproto.uint32_field(12)
    sequence_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class MechanicusUnlockGearReq(betterproto.Message):
    gear_id: int = betterproto.uint32_field(6)
    mechanicus_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class MechanicusUnlockGearRsp(betterproto.Message):
    gear_id: int = betterproto.uint32_field(1)
    mechanicus_id: int = betterproto.uint32_field(7)
    retcode: int = betterproto.int32_field(10)


@dataclass(eq=False, repr=False)
class MeetNpcReq(betterproto.Message):
    npc_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class MeetNpcRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(13)
    npc_first_met_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class MetNpcIdListNotify(betterproto.Message):
    npc_first_met_id_list: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class MichiaeMatsuriDarkPressureLevelUpdateNotify(betterproto.Message):
    dark_pressure_level: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class MichiaeMatsuriGainCrystalExpUpdateNotify(betterproto.Message):
    activity_id: int = betterproto.uint32_field(13)
    gain_crystal_exp: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class MichiaeMatsuriInteractStatueReq(betterproto.Message):
    statue_entity_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class MichiaeMatsuriInteractStatueRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class MichiaeMatsuriRemoveChallengeMarkNotify(betterproto.Message):
    group_id: int = betterproto.uint32_field(10)
    gadget_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class MichiaeMatsuriRemoveChestMarkNotify(betterproto.Message):
    group_id: int = betterproto.uint32_field(5)
    config_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class MichiaeMatsuriStartBossChallengeReq(betterproto.Message):
    difficulty: int = betterproto.uint32_field(4)
    gadget_entity_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class MichiaeMatsuriStartBossChallengeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(12)


@dataclass(eq=False, repr=False)
class MichiaeMatsuriStartDarkChallengeReq(betterproto.Message):
    worktop_entity_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class MichiaeMatsuriStartDarkChallengeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(12)


@dataclass(eq=False, repr=False)
class MichiaeMatsuriUnlockCrystalSkillReq(betterproto.Message):
    crystal_skill_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class MichiaeMatsuriUnlockCrystalSkillRsp(betterproto.Message):
    crystal_skill_id: int = betterproto.uint32_field(8)
    retcode: int = betterproto.int32_field(10)


@dataclass(eq=False, repr=False)
class MiracleRingDataNotify(betterproto.Message):
    is_gadget_created: bool = betterproto.bool_field(15)
    gadget_entity_id: int = betterproto.uint32_field(7)
    unk3300_oonpdlmplnc: int = betterproto.uint32_field(9)
    unk3300_poiaegjnekp: int = betterproto.uint32_field(8)
    last_take_reward_time: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class MiracleRingDeliverItemReq(betterproto.Message):
    item_param_list: List["ItemParam"] = betterproto.message_field(3)
    gadget_entity_id: int = betterproto.uint32_field(6)
    gadget_id: int = betterproto.uint32_field(8)
    food_weapon_guid_list: List[int] = betterproto.uint64_field(13)
    op_type: "InterOpType" = betterproto.enum_field(15)


@dataclass(eq=False, repr=False)
class MiracleRingDeliverItemRsp(betterproto.Message):
    gadget_id: int = betterproto.uint32_field(2)
    op_type: "InterOpType" = betterproto.enum_field(6)
    gadget_entity_id: int = betterproto.uint32_field(13)
    retcode: int = betterproto.int32_field(15)
    interact_type: "InteractType" = betterproto.enum_field(12)


@dataclass(eq=False, repr=False)
class MiracleRingDestroyNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class MiracleRingDropResultNotify(betterproto.Message):
    last_take_reward_time: int = betterproto.int32_field(15)
    drop_result: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class MiracleRingTakeRewardReq(betterproto.Message):
    gadget_entity_id: int = betterproto.uint32_field(14)
    gadget_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class MiracleRingTakeRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(10)


@dataclass(eq=False, repr=False)
class MistTrialDungeonFailNotify(betterproto.Message):
    dungeon_id: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class MistTrialFloorLevelNotify(betterproto.Message):
    dungeon_scene_id: int = betterproto.uint32_field(6)
    floor_level: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class MistTrialGetChallengeMissionReq(betterproto.Message):
    trial_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class MistTrialMissionInfo(betterproto.Message):
    param: int = betterproto.uint32_field(8)
    watcher_list_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class MistTrialGetChallengeMissionRsp(betterproto.Message):
    trial_id: int = betterproto.uint32_field(6)
    mission_info_list: List["MistTrialMissionInfo"] = betterproto.message_field(3)
    retcode: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class MistTrialGetDungeonExhibitionDataReq(betterproto.Message):
    trial_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class MistTrialGetDungeonExhibitionDataRsp(betterproto.Message):
    trial_id: int = betterproto.uint32_field(10)
    retcode: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class MistTrialSelectAvatarAndEnterDungeonReq(betterproto.Message):
    select_avatar_index_list: List[
        "MistTrialSelectAvatarAndEnterDungeonReqSelectAvatarIndex"
    ] = betterproto.message_field(11)
    select_trial_avatar_id_list: List[int] = betterproto.uint32_field(1)
    enter_point_id: int = betterproto.uint32_field(8)
    trial_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class MistTrialSelectAvatarAndEnterDungeonReqSelectAvatarIndex(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MistTrialSelectAvatarAndEnterDungeonRsp(betterproto.Message):
    trial_id: int = betterproto.uint32_field(2)
    retcode: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class MistTrialSettleNotify(betterproto.Message):
    unk3300_kfkhaacdjdj: Dict[int, int] = betterproto.map_field(
        5, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    unk3300_gmpeellanli: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    dungeon_scene_id: int = betterproto.uint32_field(12)
    first_pass_time: int = betterproto.uint32_field(8)
    best_hit_avatar: "MistTrialBestAvatar" = betterproto.message_field(3)
    best_avatar_list: List["MistTrialBestAvatar"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class MonsterAiConfigHashNotify(betterproto.Message):
    hash_value: int = betterproto.int32_field(7)
    entity_id: int = betterproto.uint32_field(14)
    job_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class MonsterAlertChangeNotify(betterproto.Message):
    monster_entity_list: List[int] = betterproto.uint32_field(5)
    is_alert: int = betterproto.uint32_field(12)
    avatar_entity_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class MonsterForceAlertNotify(betterproto.Message):
    monster_entity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MonsterPointArrayRouteUpdateNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(5)
    monster_route: "MonsterRoute" = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class MonsterSummonTagNotify(betterproto.Message):
    monster_entity_id: int = betterproto.uint32_field(8)
    summon_tag_map: Dict[int, int] = betterproto.map_field(
        4, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class MpBlockNotify(betterproto.Message):
    end_time: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class MpLevelEntityInfo(betterproto.Message):
    ability_info: "AbilitySyncStateInfo" = betterproto.message_field(15)
    entity_id: int = betterproto.uint32_field(10)
    authority_peer_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class MpPlayGuestReplyInviteReq(betterproto.Message):
    mp_play_id: int = betterproto.uint32_field(13)
    is_agree: bool = betterproto.bool_field(12)


@dataclass(eq=False, repr=False)
class MpPlayGuestReplyInviteRsp(betterproto.Message):
    mp_play_id: int = betterproto.uint32_field(7)
    retcode: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class MpPlayGuestReplyNotify(betterproto.Message):
    is_agree: bool = betterproto.bool_field(4)
    uid: int = betterproto.uint32_field(11)
    mp_play_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MpPlayInviteResultNotify(betterproto.Message):
    all_agree: bool = betterproto.bool_field(14)
    mp_play_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MpPlayOwnerCheckReq(betterproto.Message):
    mp_play_id: int = betterproto.uint32_field(13)
    is_skip_match: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class MpPlayOwnerCheckRsp(betterproto.Message):
    wrong_uid: int = betterproto.uint32_field(4)
    mp_play_id: int = betterproto.uint32_field(9)
    is_skip_match: bool = betterproto.bool_field(15)
    retcode: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class MpPlayOwnerInviteNotify(betterproto.Message):
    mp_play_id: int = betterproto.uint32_field(11)
    is_remain_reward: bool = betterproto.bool_field(4)
    cd: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class MpPlayOwnerStartInviteReq(betterproto.Message):
    is_skip_match: bool = betterproto.bool_field(9)
    mp_play_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class MpPlayOwnerStartInviteRsp(betterproto.Message):
    is_skip_match: bool = betterproto.bool_field(14)
    retcode: int = betterproto.int32_field(8)
    mp_play_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class MpPlayPrepareInterruptNotify(betterproto.Message):
    mp_play_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MpPlayPrepareNotify(betterproto.Message):
    mp_play_id: int = betterproto.uint32_field(3)
    prepare_end_time: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class MsgParam(betterproto.Message):
    int_param: int = betterproto.uint32_field(13, group="param")
    flt_param: float = betterproto.float_field(14, group="param")
    str_param: str = betterproto.string_field(4, group="param")


@dataclass(eq=False, repr=False)
class MultistagePlayEndNotify(betterproto.Message):
    group_id: int = betterproto.uint32_field(4)
    play_index: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class MultistagePlayFinishStageReq(betterproto.Message):
    group_id: int = betterproto.uint32_field(12)
    play_index: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class MultistagePlayFinishStageRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(9)
    group_id: int = betterproto.uint32_field(2)
    play_index: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class MultistagePlayInfo(betterproto.Message):
    play_index: int = betterproto.uint32_field(13)
    duration: int = betterproto.uint32_field(2)
    stage_type: int = betterproto.uint32_field(5)
    group_id: int = betterproto.uint32_field(1)
    stage_index: int = betterproto.uint32_field(10)
    begin_time: int = betterproto.uint32_field(9)
    play_type: int = betterproto.uint32_field(15)
    mechanicus_info: "InBattleMechanicusInfo" = betterproto.message_field(
        1303, group="detail"
    )
    fleur_fair_info: "InBattleFleurFairInfo" = betterproto.message_field(
        1502, group="detail"
    )
    hide_and_seek_info: "HideAndSeekStageInfo" = betterproto.message_field(
        1725, group="detail"
    )
    chess_info: "InBattleChessInfo" = betterproto.message_field(1756, group="detail")
    irodori_chess_info: "InBattleIrodoriChessInfo" = betterproto.message_field(
        1835, group="detail"
    )
    char_amusement_info: "CharAmusementInfo" = betterproto.message_field(
        1015, group="detail"
    )
    brick_breaker_info: "BrickBreakerStageInfo" = betterproto.message_field(
        547, group="detail"
    )
    coin_collect_info: "CoinCollectStageInfo" = betterproto.message_field(
        1263, group="detail"
    )


@dataclass(eq=False, repr=False)
class MultistagePlayInfoNotify(betterproto.Message):
    info: "MultistagePlayInfo" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class MultistagePlaySettleNotify(betterproto.Message):
    group_id: int = betterproto.uint32_field(3)
    play_index: int = betterproto.uint32_field(9)
    mechanicus_settle_info: "InBattleMechanicusSettleInfo" = betterproto.message_field(
        649, group="detail"
    )
    chess_settle_info: "InBattleChessSettleInfo" = betterproto.message_field(
        512, group="detail"
    )
    irodori_chess_settle_info: "InBattleIrodoriChessSettleInfo" = (
        betterproto.message_field(520, group="detail")
    )


@dataclass(eq=False, repr=False)
class MultistagePlayStageEndNotify(betterproto.Message):
    group_id: int = betterproto.uint32_field(3)
    play_index: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MuqadasPotionActivityEnterDungeonReq(betterproto.Message):
    level_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class MuqadasPotionActivityEnterDungeonRsp(betterproto.Message):
    level_id: int = betterproto.uint32_field(14)
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class MuqadasPotionCaptureWeaknessReq(betterproto.Message):
    level_id: int = betterproto.uint32_field(7)
    capture_weakness_count: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class MuqadasPotionCaptureWeaknessRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class MuqadasPotionDungeonSettleNotify(betterproto.Message):
    is_success: bool = betterproto.bool_field(1)
    is_new_record: bool = betterproto.bool_field(5)
    level_id: int = betterproto.uint32_field(8)
    capture_weakness_count: int = betterproto.uint32_field(3)
    final_score: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class MuqadasPotionRestartDungeonReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MuqadasPotionRestartDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class MusicGameSettleReq(betterproto.Message):
    unk3300_mlldapciddo: List[int] = betterproto.uint32_field(14)
    unk3300_hhbcepnlcll: List[int] = betterproto.uint32_field(1007)
    unk3300_dmlnkoloaah: bool = betterproto.bool_field(1984)
    unk3300_ebojmgocple: int = betterproto.uint32_field(82)
    max_combo: int = betterproto.uint32_field(10)
    is_save_score: bool = betterproto.bool_field(7)
    speed: float = betterproto.float_field(790)
    unk3300_mdhejnfhbbi: int = betterproto.uint32_field(15)
    score: int = betterproto.uint32_field(8)
    unk3300_bhigamndfml: bool = betterproto.bool_field(291)
    correct_hit: int = betterproto.uint32_field(11)
    unk3300_hepjncaoemp: int = betterproto.uint32_field(1)
    combo: int = betterproto.uint32_field(4)
    unk3300_ipodkencaok: int = betterproto.uint32_field(304)
    ugc_guid: int = betterproto.uint64_field(3)
    unk3300_ahaghahgpld: int = betterproto.uint32_field(12)
    music_basic_id: int = betterproto.uint32_field(5)
    unk3300_gjmiidioomm: int = betterproto.uint32_field(1951)


@dataclass(eq=False, repr=False)
class MusicGameSettleRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(12)
    ugc_guid: int = betterproto.uint64_field(7)
    is_new_record: bool = betterproto.bool_field(8)
    is_unlock_next_level: bool = betterproto.bool_field(10)
    music_basic_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MusicGameStartReq(betterproto.Message):
    music_basic_id: int = betterproto.uint32_field(11)
    is_save_score: bool = betterproto.bool_field(12)
    ugc_guid: int = betterproto.uint64_field(9)


@dataclass(eq=False, repr=False)
class MusicGameStartRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(12)
    music_basic_id: int = betterproto.uint32_field(13)
    ugc_guid: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class PbNavMeshStatsInfo(betterproto.Message):
    unk3300_mokpjbiphni: int = betterproto.int32_field(8)
    unk3300_imlhljaoblf: int = betterproto.int32_field(3)
    unk3300_dhjkkjlkdhb: int = betterproto.int32_field(15)
    unk3300_eeonkadbjme: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class NavMeshStatsNotify(betterproto.Message):
    infos: List["PbNavMeshStatsInfo"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class NicknameAuditConfigNotify(betterproto.Message):
    submit_limit: int = betterproto.uint32_field(3)
    is_open: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class NicknameSignatureAuditData(betterproto.Message):
    aid: str = betterproto.string_field(1)
    entity_id: str = betterproto.string_field(2)
    lang: str = betterproto.string_field(3)
    queue_key: str = betterproto.string_field(4)
    region: str = betterproto.string_field(5)
    uid: int = betterproto.uint32_field(6)
    audit_field_list: List["ContentAuditField"] = betterproto.message_field(7)
    aux_field_list: List["ContentAuditAuxiliaryField"] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class NightCrowGadgetObservationMatchReq(betterproto.Message):
    gadget_entity_id: int = betterproto.uint32_field(7)
    target_gadget_state: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class NightCrowGadgetObservationMatchRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class NormalUidOpNotify(betterproto.Message):
    param_index: int = betterproto.uint32_field(2)
    param_uid_list: List[int] = betterproto.uint32_field(1)
    duration: int = betterproto.uint32_field(8)
    param_list: List[int] = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class NpcTalkReq(betterproto.Message):
    entity_id: int = betterproto.uint32_field(14)
    npc_entity_id: int = betterproto.uint32_field(11)
    talk_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class NpcTalkRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(11)
    cur_talk_id: int = betterproto.uint32_field(12)
    npc_entity_id: int = betterproto.uint32_field(4)
    entity_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class NpcTalkStateNotify(betterproto.Message):
    is_ban: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class ObstacleInfo(betterproto.Message):
    rotation: "MathQuaternion" = betterproto.message_field(11)
    shape: "ObstacleInfoShapeType" = betterproto.enum_field(2)
    extents: "Vector3Int" = betterproto.message_field(4)
    center: "Vector" = betterproto.message_field(7)
    obstacle_id: int = betterproto.int32_field(10)


@dataclass(eq=False, repr=False)
class ObstacleModifyNotify(betterproto.Message):
    remove_obstacle_ids: List[int] = betterproto.int32_field(7)
    add_obstacles: List["ObstacleInfo"] = betterproto.message_field(15)
    scene_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class OfferingInteractReq(betterproto.Message):
    offering_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class PlayerOfferingData(betterproto.Message):
    level: int = betterproto.uint32_field(8)
    offering_id: int = betterproto.uint32_field(3)
    is_new_max_level: bool = betterproto.bool_field(14)
    is_first_interact: bool = betterproto.bool_field(9)
    taken_level_reward_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class OfferingInteractRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    offering_data: "PlayerOfferingData" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class OneoffGatherPointDetectorDataNotify(betterproto.Message):
    oneoff_gather_point_detector_data_list: List[
        "OneoffGatherPointDetectorData"
    ] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class OpActivityDataNotify(betterproto.Message):
    op_activity_info_list: List["OpActivityInfo"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class OpActivityTagBriefInfo(betterproto.Message):
    has_reward: bool = betterproto.bool_field(14)
    op_activity_type: int = betterproto.uint32_field(2)
    config_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class OpActivityStateNotify(betterproto.Message):
    finished_bonus_activity_id_list: List[int] = betterproto.uint32_field(6)
    opened_op_activity_info_list: List[
        "OpActivityTagBriefInfo"
    ] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class OpActivityUpdateNotify(betterproto.Message):
    op_activity_info: "OpActivityInfo" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class OpenBlossomCircleCampGuideNotify(betterproto.Message):
    refresh_id: int = betterproto.uint32_field(8)
    circle_camp_id_list: List[int] = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class OpenStateChangeNotify(betterproto.Message):
    open_state_map: Dict[int, int] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class OpenStateUpdateNotify(betterproto.Message):
    open_state_map: Dict[int, int] = betterproto.map_field(
        12, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class OrderDisplayNotify(betterproto.Message):
    order_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class OrderFinishNotify(betterproto.Message):
    order_id: int = betterproto.uint32_field(8)
    product_id: str = betterproto.string_field(5)
    card_product_remain_days: int = betterproto.uint32_field(6)
    item_list: List["ItemParam"] = betterproto.message_field(4)
    add_mcoin: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class OtherPlayerEnterHomeNotify(betterproto.Message):
    nickname: str = betterproto.string_field(5)
    reason: "OtherPlayerEnterHomeNotifyReason" = betterproto.enum_field(10)


@dataclass(eq=False, repr=False)
class OutStuckCustomDungeonReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class OutStuckCustomDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(10)


@dataclass(eq=False, repr=False)
class PacketHead(betterproto.Message):
    packet_id: int = betterproto.uint32_field(1)
    rpc_id: int = betterproto.uint32_field(2)
    client_sequence_id: int = betterproto.uint32_field(3)
    enet_channel_id: int = betterproto.uint32_field(4)
    enet_is_reliable: int = betterproto.uint32_field(5)
    sent_ms: int = betterproto.uint64_field(6)
    user_id: int = betterproto.uint32_field(11)
    user_ip: int = betterproto.uint32_field(12)
    user_session_id: int = betterproto.uint32_field(13)
    recv_time_ms: int = betterproto.uint64_field(21)
    rpc_begin_time_ms: int = betterproto.uint32_field(22)
    ext_map: Dict[int, int] = betterproto.map_field(
        23, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    sender_app_id: int = betterproto.uint32_field(24)
    source_service: int = betterproto.uint32_field(31)
    target_service: int = betterproto.uint32_field(32)
    service_app_id_map: Dict[int, int] = betterproto.map_field(
        33, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    is_set_game_thread: bool = betterproto.bool_field(34)
    game_thread_index: int = betterproto.uint32_field(35)


@dataclass(eq=False, repr=False)
class ParentQuestInferenceDataNotify(betterproto.Message):
    parent_quest_id: int = betterproto.uint32_field(8)
    inference_page_list: List["InferencePageInfo"] = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class PathfindingEnterSceneReq(betterproto.Message):
    scene_id: int = betterproto.uint32_field(10)
    unk3300_mggfoilelkh: int = betterproto.uint32_field(12)
    unk3300_jhlkdohpifb: int = betterproto.uint32_field(2)
    activity_id: List[int] = betterproto.uint32_field(13)
    version: int = betterproto.uint32_field(11)
    is_editor: bool = betterproto.bool_field(8)
    obstacles: List["ObstacleInfo"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class PathfindingEnterSceneRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class PathfindingPingNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class PerformOperationNotify(betterproto.Message):
    operate_type: "PerformOperationNotifyOperateType" = betterproto.enum_field(13)
    index: int = betterproto.uint32_field(7)
    pos: "Vector" = betterproto.message_field(9)
    entity_id: int = betterproto.uint32_field(5)
    rot: "Vector" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class PersistentDungeonSwitchAvatarReq(betterproto.Message):
    cur_avatar_guid: int = betterproto.uint64_field(14)
    avatar_team_guid_list: List[int] = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class PersistentDungeonSwitchAvatarRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(4)
    avatar_team_guid_list: List[int] = betterproto.uint64_field(9)
    cur_avatar_guid: int = betterproto.uint64_field(15)


@dataclass(eq=False, repr=False)
class PersonalLineAllDataReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class PersonalLineAllDataRsp(betterproto.Message):
    cur_finished_daily_task_count: int = betterproto.uint32_field(12)
    locked_personal_line_list: List[
        "LockedPersonallineData"
    ] = betterproto.message_field(10)
    retcode: int = betterproto.int32_field(2)
    unk3300_bhlegleicfj: List[int] = betterproto.uint32_field(1)
    unk3300_bgcignegbin: List[int] = betterproto.uint32_field(6)
    legendary_key_count: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class PersonalLineNewUnlockNotify(betterproto.Message):
    personal_line_id_list: List[int] = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class PersonalSceneJumpReq(betterproto.Message):
    point_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class PersonalSceneJumpRsp(betterproto.Message):
    dest_scene_id: int = betterproto.uint32_field(3)
    dest_pos: "Vector" = betterproto.message_field(8)
    retcode: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class PhotoActivityClientViewReq(betterproto.Message):
    pos_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class PhotoActivityClientViewRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(13)
    pos_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PhotoActivityFinishReq(betterproto.Message):
    pos_id: int = betterproto.uint32_field(8)
    check_root_id: int = betterproto.uint32_field(11)
    is_succ: bool = betterproto.bool_field(15)


@dataclass(eq=False, repr=False)
class PhotoActivityFinishRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(3)
    pos_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class PhotoGallerySettleInfo(betterproto.Message):
    reason: "GalleryStopReason" = betterproto.enum_field(13)


@dataclass(eq=False, repr=False)
class PingReq(betterproto.Message):
    client_time: int = betterproto.uint32_field(6)
    total_tick_time: float = betterproto.double_field(9)
    ue_time: float = betterproto.float_field(2)
    seq: int = betterproto.uint32_field(12)
    sc_data: bytes = betterproto.bytes_field(3)


@dataclass(eq=False, repr=False)
class PingRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(7)
    client_time: int = betterproto.uint32_field(10)
    seq: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class PlantFlowerAcceptAllGiveFlowerReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class PlantFlowerAcceptFlowerResultInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(9)
    unk3300_palejediajp: Dict[int, int] = betterproto.map_field(
        6, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    unk3300_ilaaddcopke: Dict[int, int] = betterproto.map_field(
        7, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class PlantFlowerAcceptAllGiveFlowerRsp(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(12)
    retcode: int = betterproto.int32_field(6)
    accept_flower_result_info_list: List[
        "PlantFlowerAcceptFlowerResultInfo"
    ] = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class PlantFlowerAcceptGiveFlowerReq(betterproto.Message):
    uid: int = betterproto.uint32_field(13)
    schedule_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class PlantFlowerAcceptGiveFlowerRsp(betterproto.Message):
    accept_flower_result_info: "PlantFlowerAcceptFlowerResultInfo" = (
        betterproto.message_field(3)
    )
    schedule_id: int = betterproto.uint32_field(6)
    retcode: int = betterproto.int32_field(9)


@dataclass(eq=False, repr=False)
class PlantFlowerEditFlowerCombinationReq(betterproto.Message):
    entity_id: int = betterproto.uint32_field(3)
    flower_combination_info: "CustomGadgetTreeInfo" = betterproto.message_field(8)
    schedule_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class PlantFlowerEditFlowerCombinationRsp(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(7)
    retcode: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class PlantFlowerFriendFlowerWishData(betterproto.Message):
    uid: int = betterproto.uint32_field(5)
    flower_num_map: Dict[int, int] = betterproto.map_field(
        11, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    profile_picture: "ProfilePicture" = betterproto.message_field(8)
    nickname: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class PlantFlowerGetCanGiveFriendFlowerReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class PlantFlowerGetCanGiveFriendFlowerRsp(betterproto.Message):
    flower_num_map: Dict[int, int] = betterproto.map_field(
        5, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    retcode: int = betterproto.int32_field(3)
    schedule_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class PlantFlowerGetFriendFlowerWishListReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class PlantFlowerGetFriendFlowerWishListRsp(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(14)
    retcode: int = betterproto.int32_field(7)
    friend_flower_wish_list: List[
        "PlantFlowerFriendFlowerWishData"
    ] = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class PlantFlowerGetRecvFlowerListReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class PlantFlowerRecvFlowerData(betterproto.Message):
    nickname: str = betterproto.string_field(14)
    uid: int = betterproto.uint32_field(2)
    profile_picture: "ProfilePicture" = betterproto.message_field(12)
    flower_num_map: Dict[int, int] = betterproto.map_field(
        11, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class PlantFlowerGetRecvFlowerListRsp(betterproto.Message):
    recv_flower_list: List["PlantFlowerRecvFlowerData"] = betterproto.message_field(15)
    retcode: int = betterproto.int32_field(11)
    schedule_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class PlantFlowerGetSeedInfoReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class PlantFlowerGetSeedInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(5)
    seed_reward_id: int = betterproto.uint32_field(8)
    schedule_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class PlantFlowerGiveFriendFlowerReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(6)
    uid: int = betterproto.uint32_field(3)
    flower_num_map: Dict[int, int] = betterproto.map_field(
        13, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class PlantFlowerGiveFriendFlowerRsp(betterproto.Message):
    limit_flower_list: List[int] = betterproto.uint32_field(12)
    schedule_id: int = betterproto.uint32_field(10)
    retcode: int = betterproto.int32_field(14)


@dataclass(eq=False, repr=False)
class PlantFlowerHaveRecvFlowerNotify(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class PlantFlowerSetFlowerWishReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(4)
    flower_num_map: Dict[int, int] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class PlantFlowerSetFlowerWishRsp(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(5)
    retcode: int = betterproto.int32_field(12)


@dataclass(eq=False, repr=False)
class PlantFlowerTakeSeedRewardReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PlantFlowerTakeSeedRewardRsp(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(11)
    retcode: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class PlatformChangeRouteNotify(betterproto.Message):
    scene_time: int = betterproto.uint32_field(13)
    platform: "PlatformInfo" = betterproto.message_field(14)
    entity_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class PlatformStartRouteNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(12)
    scene_time: int = betterproto.uint32_field(7)
    platform: "PlatformInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PlatformStopRouteNotify(betterproto.Message):
    platform: "PlatformInfo" = betterproto.message_field(7)
    scene_time: int = betterproto.uint32_field(10)
    entity_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class PlayerAllowEnterMpAfterAgreeMatchNotify(betterproto.Message):
    target_uid: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class PlayerApplyEnterHomeNotify(betterproto.Message):
    src_app_id: int = betterproto.uint32_field(8)
    src_player_info: "OnlinePlayerInfo" = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class PlayerApplyEnterHomeResultNotify(betterproto.Message):
    target_uid: int = betterproto.uint32_field(9)
    target_nickname: str = betterproto.string_field(2)
    is_agreed: bool = betterproto.bool_field(13)
    reason: "PlayerApplyEnterHomeResultNotifyReason" = betterproto.enum_field(5)


@dataclass(eq=False, repr=False)
class PlayerApplyEnterHomeResultReq(betterproto.Message):
    apply_uid: int = betterproto.uint32_field(9)
    is_agreed: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class PlayerApplyEnterHomeResultRsp(betterproto.Message):
    apply_uid: int = betterproto.uint32_field(3)
    is_agreed: bool = betterproto.bool_field(6)
    param: int = betterproto.uint32_field(4)
    retcode: int = betterproto.int32_field(14)


@dataclass(eq=False, repr=False)
class PlayerApplyEnterMpAfterMatchAgreedNotify(betterproto.Message):
    matchserver_id: int = betterproto.uint32_field(3)
    src_player_info: "OnlinePlayerInfo" = betterproto.message_field(7)
    match_type: "MatchType" = betterproto.enum_field(5)


@dataclass(eq=False, repr=False)
class PlayerApplyEnterMpNotify(betterproto.Message):
    src_player_info: "OnlinePlayerInfo" = betterproto.message_field(12)
    src_thread_index: int = betterproto.uint32_field(9)
    src_app_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class PlayerApplyEnterMpReq(betterproto.Message):
    target_uid: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PlayerApplyEnterMpResultNotify(betterproto.Message):
    reason: "PlayerApplyEnterMpResultNotifyReason" = betterproto.enum_field(10)
    target_nickname: str = betterproto.string_field(5)
    is_agreed: bool = betterproto.bool_field(2)
    target_uid: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class PlayerApplyEnterMpResultReq(betterproto.Message):
    apply_uid: int = betterproto.uint32_field(7)
    is_agreed: bool = betterproto.bool_field(12)


@dataclass(eq=False, repr=False)
class PlayerApplyEnterMpResultRsp(betterproto.Message):
    apply_uid: int = betterproto.uint32_field(8)
    param: int = betterproto.uint32_field(9)
    is_agreed: bool = betterproto.bool_field(13)
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class PlayerApplyEnterMpRsp(betterproto.Message):
    target_uid: int = betterproto.uint32_field(5)
    retcode: int = betterproto.int32_field(9)
    param: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class PlayerCancelMatchReq(betterproto.Message):
    match_type: "MatchType" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class PlayerCancelMatchRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(5)
    match_type: "MatchType" = betterproto.enum_field(10)


@dataclass(eq=False, repr=False)
class PlayerChatCdNotify(betterproto.Message):
    over_time: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class PlayerChatNotify(betterproto.Message):
    chat_info: "ChatInfo" = betterproto.message_field(11)
    channel_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class PlayerChatReq(betterproto.Message):
    channel_id: int = betterproto.uint32_field(3)
    chat_info: "ChatInfo" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class PlayerChatRsp(betterproto.Message):
    chat_forbidden_endtime: int = betterproto.uint32_field(8)
    retcode: int = betterproto.int32_field(12)


@dataclass(eq=False, repr=False)
class PlayerCompoundMaterialBoostReq(betterproto.Message):
    is_boost_all: bool = betterproto.bool_field(13)
    unk3300_ppddlodbikg: int = betterproto.uint32_field(8)
    unk3300_bghfbclhcig: int = betterproto.uint32_field(5)
    unk3300_fegphhflflm: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class PlayerCompoundMaterialBoostRsp(betterproto.Message):
    compound_queue_data_list: List["CompoundQueueData"] = betterproto.message_field(10)
    take_status: "CompoundBoostTakeStatusType" = betterproto.enum_field(4)
    take_item_list: List["ItemParam"] = betterproto.message_field(3)
    retcode: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class PlayerCompoundMaterialReq(betterproto.Message):
    compound_id: int = betterproto.uint32_field(4)
    count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PlayerCompoundMaterialRsp(betterproto.Message):
    compound_queue_data: "CompoundQueueData" = betterproto.message_field(9)
    retcode: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class PlayerConfirmMatchReq(betterproto.Message):
    match_type: "MatchType" = betterproto.enum_field(3)
    is_agreed: bool = betterproto.bool_field(14)


@dataclass(eq=False, repr=False)
class PlayerConfirmMatchRsp(betterproto.Message):
    is_agreed: bool = betterproto.bool_field(10)
    match_type: "MatchType" = betterproto.enum_field(1)
    retcode: int = betterproto.int32_field(11)
    match_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class PlayerCookArgsReq(betterproto.Message):
    recipe_id: int = betterproto.uint32_field(13)
    assist_avatar: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class PlayerCookArgsRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(6)
    qte_range_ratio: float = betterproto.float_field(3)


@dataclass(eq=False, repr=False)
class PlayerCookReq(betterproto.Message):
    recipe_id: int = betterproto.uint32_field(1)
    unk3300_ndphnnofebl: int = betterproto.uint32_field(5)
    unk3300_jpiclidliec: int = betterproto.uint32_field(7)
    assist_avatar: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class PlayerCookRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(4)
    recipe_data: "CookRecipeData" = betterproto.message_field(12)
    item_list: List["ItemParam"] = betterproto.message_field(5)
    unk3300_ndphnnofebl: int = betterproto.uint32_field(1)
    extra_item_list: List["ItemParam"] = betterproto.message_field(3)
    unk3300_jpiclidliec: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class PlayerCustomDungeonMuipData(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    publish_dungeon_list: List[int] = betterproto.uint64_field(2)
    store_dungeon_list: List[int] = betterproto.uint64_field(3)
    battle_record_list: List[
        "CustomDungeonBattleRecordMuipData"
    ] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class PlayerDataNotify(betterproto.Message):
    is_first_login_today: bool = betterproto.bool_field(12)
    nick_name: str = betterproto.string_field(9)
    server_time: int = betterproto.uint64_field(1)
    prop_map: Dict[int, "PropValue"] = betterproto.map_field(
        4, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    region_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PlayerDeathZoneNotify(betterproto.Message):
    cur_death_zone_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class PlayerEnterDungeonReq(betterproto.Message):
    dungeon_id: int = betterproto.uint32_field(4)
    enter_pos_info: "DungeonEnterPosInfo" = betterproto.message_field(9)
    point_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PlayerEnterDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(5)
    point_id: int = betterproto.uint32_field(6)
    dungeon_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TeamEnterSceneInfo(betterproto.Message):
    team_ability_info: "AbilitySyncStateInfo" = betterproto.message_field(6)
    ability_control_block: "AbilityControlBlock" = betterproto.message_field(5)
    team_entity_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class PlayerEnterSceneInfoNotify(betterproto.Message):
    team_enter_info: "TeamEnterSceneInfo" = betterproto.message_field(6)
    avatar_enter_info: List["AvatarEnterSceneInfo"] = betterproto.message_field(10)
    cur_avatar_entity_id: int = betterproto.uint32_field(4)
    mp_level_entity_info: "MpLevelEntityInfo" = betterproto.message_field(15)
    enter_scene_token: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PlayerEnterSceneNotify(betterproto.Message):
    unk3300_lidgfmddoom: int = betterproto.uint32_field(1224)
    unk3300_lffbnebmaag: bool = betterproto.bool_field(32)
    world_level: int = betterproto.uint32_field(4)
    pos: "Vector" = betterproto.message_field(1)
    unk3300_okmnofohkob: bool = betterproto.bool_field(3)
    unk3300_llhabhmlnah: int = betterproto.uint32_field(13)
    enter_scene_token: int = betterproto.uint32_field(6)
    dungeon_id: int = betterproto.uint32_field(2)
    scene_id: int = betterproto.uint32_field(11)
    type: "EnterType" = betterproto.enum_field(12)
    scene_tag_id_list: List[int] = betterproto.uint32_field(5)
    scene_begin_time: int = betterproto.uint64_field(9)
    enter_reason: int = betterproto.uint32_field(287)
    target_uid: int = betterproto.uint32_field(8)
    prev_pos: "Vector" = betterproto.message_field(10)
    scene_transaction: str = betterproto.string_field(370)


@dataclass(eq=False, repr=False)
class VectorPlane(betterproto.Message):
    x: float = betterproto.float_field(1)
    y: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class PolygonRegionSize(betterproto.Message):
    height: float = betterproto.float_field(3)
    point_list: List["VectorPlane"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class PlayerEyePointStateNotify(betterproto.Message):
    eye_point_pos: "Vector" = betterproto.message_field(12)
    unk3300_kfohoblmmlb: bool = betterproto.bool_field(9)
    unk3300_gnfjioeghoe: int = betterproto.uint32_field(1)
    unk3300_biheknfdddi: int = betterproto.uint32_field(8)
    fix_lod_level: int = betterproto.int32_field(11)
    unk3300_nipfcfcbfae: bool = betterproto.bool_field(14)
    unk3300_jgemkkjahka: int = betterproto.uint32_field(13)
    unk3300_eopfnbbbgpk: int = betterproto.uint32_field(6)
    sphere_radius: float = betterproto.float_field(1413, group="region_size")
    cubic_size: "Vector" = betterproto.message_field(1362, group="region_size")
    cylinder_size: "CylinderRegionSize" = betterproto.message_field(
        1250, group="region_size"
    )
    polygon_size: "PolygonRegionSize" = betterproto.message_field(
        608, group="region_size"
    )


@dataclass(eq=False, repr=False)
class PlayerFishingDataNotify(betterproto.Message):
    last_fish_rod_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class PlayerForceExitReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class PlayerForceExitRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(10)


@dataclass(eq=False, repr=False)
class PlayerGameTimeByLuaNotify(betterproto.Message):
    game_time: int = betterproto.uint32_field(12)
    uid: int = betterproto.uint32_field(8)
    sim_speed: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class PlayerGameTimeNotify(betterproto.Message):
    uid: int = betterproto.uint32_field(15)
    is_home: bool = betterproto.bool_field(10)
    game_time: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class PlayerGcgMatchConfirmNotify(betterproto.Message):
    is_agree: bool = betterproto.bool_field(6)
    match_id: int = betterproto.uint32_field(14)
    uid: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class PlayerGcgMatchDismissNotify(betterproto.Message):
    uid_list: List[int] = betterproto.uint32_field(11)
    reason: "MatchReason" = betterproto.enum_field(7)
    match_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class PlayerGeneralMatchConfirmNotify(betterproto.Message):
    match_id: int = betterproto.uint32_field(2)
    uid: int = betterproto.uint32_field(6)
    is_agree: bool = betterproto.bool_field(13)


@dataclass(eq=False, repr=False)
class PlayerGeneralMatchDismissNotify(betterproto.Message):
    reason: "MatchReason" = betterproto.enum_field(11)
    uid_list: List[int] = betterproto.uint32_field(10)
    match_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PlayerGetForceQuitBanInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class PlayerGetForceQuitBanInfoRsp(betterproto.Message):
    match_id: int = betterproto.uint32_field(13)
    expire_time: int = betterproto.uint32_field(2)
    retcode: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class PlayerHomeCompInfo(betterproto.Message):
    friend_enter_home_option: "FriendEnterHomeOption" = betterproto.enum_field(13)
    seen_module_id_list: List[int] = betterproto.uint32_field(5)
    unk3300_pbefijcekmh: List[int] = betterproto.uint32_field(2)
    unk3300_jjpcfpakflm: List[int] = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class PlayerHomeCompInfoNotify(betterproto.Message):
    comp_info: "PlayerHomeCompInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PlayerInjectFixNotify(betterproto.Message):
    id: int = betterproto.uint32_field(11)
    inject_fix: bytes = betterproto.bytes_field(12)


@dataclass(eq=False, repr=False)
class PlayerInvestigationAllInfoNotify(betterproto.Message):
    investigation_list: List["Investigation"] = betterproto.message_field(11)
    investigation_target_list: List["InvestigationTarget"] = betterproto.message_field(
        5
    )


@dataclass(eq=False, repr=False)
class PlayerInvestigationNotify(betterproto.Message):
    investigation_list: List["Investigation"] = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class PlayerInvestigationTargetNotify(betterproto.Message):
    investigation_target_list: List["InvestigationTarget"] = betterproto.message_field(
        10
    )


@dataclass(eq=False, repr=False)
class PlayerLevelRewardUpdateNotify(betterproto.Message):
    level_list: List[int] = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class PlayerLocationInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(7)
    rot: "Vector" = betterproto.message_field(13)
    pos: "Vector" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TrackingIoInfo(betterproto.Message):
    unk3300_kggpdkgdelg: str = betterproto.string_field(10)
    unk3300_pibfpdamjle: str = betterproto.string_field(12)
    unk3300_nmdnlhlakam: str = betterproto.string_field(7)
    unk3300_gejjkdlgfph: str = betterproto.string_field(5)
    unk3300_cnpigdoejpb: str = betterproto.string_field(2)
    unk3300_ccogbicmhkg: str = betterproto.string_field(9)
    unk3300_djhkhefpcdk: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class PlayerLoginReq(betterproto.Message):
    device_uuid: str = betterproto.string_field(5)
    target_uid: int = betterproto.uint32_field(10)
    extra_bin_data: bytes = betterproto.bytes_field(2046)
    platform: str = betterproto.string_field(4)
    checksum: str = betterproto.string_field(1334)
    channel_id: int = betterproto.uint32_field(1565)
    client_verison_hash: str = betterproto.string_field(2040)
    language_type: int = betterproto.uint32_field(11)
    client_data_version: int = betterproto.uint32_field(847)
    account_type: int = betterproto.uint32_field(7)
    security_library_md5: str = betterproto.string_field(868)
    online_id: str = betterproto.string_field(577)
    unk3300_pmgfbmjnncl: int = betterproto.uint32_field(82)
    device_name: str = betterproto.string_field(12)
    birthday: str = betterproto.string_field(875)
    tag: int = betterproto.uint32_field(525)
    account_uid: str = betterproto.string_field(14)
    device_info: str = betterproto.string_field(15)
    unk3300_iadfjhnfkib: int = betterproto.uint32_field(1458)
    is_editor: bool = betterproto.bool_field(1)
    token: str = betterproto.string_field(8)
    reg_platform: int = betterproto.uint32_field(424)
    checksum_client_version: str = betterproto.string_field(581)
    unk3300_oobhaiiiphh: int = betterproto.uint32_field(85)
    unk3300_ndlanbeigeg: int = betterproto.uint32_field(1320)
    country_code: str = betterproto.string_field(104)
    unk3300_pipldeapmmn: int = betterproto.uint32_field(1790)
    tracking_io_info: "TrackingIoInfo" = betterproto.message_field(1713)
    is_transfer: bool = betterproto.bool_field(624)
    unk3300_biaknialbfj: str = betterproto.string_field(828)
    client_version: str = betterproto.string_field(2)
    is_guest: bool = betterproto.bool_field(13)
    system_version: str = betterproto.string_field(6)
    target_home_owner_uid: int = betterproto.uint32_field(899)
    psn_id: str = betterproto.string_field(1146)
    security_cmd_reply: bytes = betterproto.bytes_field(874)
    unk3300_offhpafifgd: int = betterproto.uint32_field(1028)
    login_rand: int = betterproto.uint64_field(9)
    adjust_tracking_info: "AdjustTrackingInfo" = betterproto.message_field(64)
    environment_error_code: bytes = betterproto.bytes_field(256)
    platform_type: int = betterproto.uint32_field(3)
    cps: str = betterproto.string_field(1983)


@dataclass(eq=False, repr=False)
class ShortAbilityHashPair(betterproto.Message):
    ability_name_hash: int = betterproto.sfixed32_field(6)
    ability_config_hash: int = betterproto.sfixed32_field(15)


@dataclass(eq=False, repr=False)
class PlayerLoginRsp(betterproto.Message):
    login_rand: int = betterproto.uint64_field(9)
    player_data: bytes = betterproto.bytes_field(2)
    client_silence_md5: str = betterproto.string_field(16)
    total_tick_time: float = betterproto.double_field(530)
    is_use_ability_hash: bool = betterproto.bool_field(5)
    is_audit: bool = betterproto.bool_field(930)
    birthday: str = betterproto.string_field(1387)
    unk3300_hgfnecijdln: bool = betterproto.bool_field(13)
    client_silence_version_suffix: str = betterproto.string_field(908)
    client_version_suffix: str = betterproto.string_field(1845)
    next_resource_url: str = betterproto.string_field(1324)
    unk3300_ejkcnndfaai: bool = betterproto.bool_field(196)
    short_ability_hash_map: List["ShortAbilityHashPair"] = betterproto.message_field(
        1373
    )
    is_data_need_relogin: bool = betterproto.bool_field(1119)
    res_version_config: "ResVersionConfig" = betterproto.message_field(808)
    client_silence_data_version: int = betterproto.uint32_field(1)
    target_uid: int = betterproto.uint32_field(15)
    register_cps: str = betterproto.string_field(99)
    is_sc_open: bool = betterproto.bool_field(1522)
    unk3300_iihdkknjpgd: bool = betterproto.bool_field(8)
    player_data_version: int = betterproto.uint32_field(14)
    sc_info: bytes = betterproto.bytes_field(1888)
    country_code: str = betterproto.string_field(360)
    next_res_version_config: "ResVersionConfig" = betterproto.message_field(1688)
    unk3300_iadliimgdmc: bool = betterproto.bool_field(17)
    block_info_map: Dict[int, "BlockInfo"] = betterproto.map_field(
        2018, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    is_transfer: bool = betterproto.bool_field(295)
    target_home_owner_uid: int = betterproto.uint32_field(446)
    game_biz: str = betterproto.string_field(4)
    ability_hash_map: Dict[str, int] = betterproto.map_field(
        3, betterproto.TYPE_STRING, betterproto.TYPE_INT32
    )
    ability_hash_code: int = betterproto.int32_field(12)
    client_data_version: int = betterproto.uint32_field(10)
    client_md5: str = betterproto.string_field(1299)
    retcode: int = betterproto.int32_field(7)
    feature_block_info_list: List["FeatureBlockInfo"] = betterproto.message_field(138)


@dataclass(eq=False, repr=False)
class PlayerLogoutNotify(betterproto.Message):
    retcode: int = betterproto.int32_field(12)


@dataclass(eq=False, repr=False)
class PlayerLogoutReq(betterproto.Message):
    reason: "PlayerLogoutReqReason" = betterproto.enum_field(9)


@dataclass(eq=False, repr=False)
class PlayerLogoutRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(9)


@dataclass(eq=False, repr=False)
class PlayerLuaShellNotify(betterproto.Message):
    id: int = betterproto.uint32_field(8)
    shell_type: "LuaShellType" = betterproto.enum_field(1)
    lua_shell: bytes = betterproto.bytes_field(4)
    use_type: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PlayerMatchAgreedResultNotify(betterproto.Message):
    match_type: "MatchType" = betterproto.enum_field(12)
    target_uid: int = betterproto.uint32_field(4)
    reason: "PlayerMatchAgreedResultNotifyReason" = betterproto.enum_field(13)


@dataclass(eq=False, repr=False)
class PlayerMatchInfoNotify(betterproto.Message):
    dungeon_id: int = betterproto.uint32_field(4)
    unk3300_bneianjblbl: int = betterproto.uint32_field(5)
    unk3300_ocilkhjpjed: int = betterproto.uint32_field(10)
    host_uid: int = betterproto.uint32_field(12)
    match_type: "MatchType" = betterproto.enum_field(13)
    mechanicus_difficult_level: int = betterproto.uint32_field(15)
    mp_play_id: int = betterproto.uint32_field(2)
    match_id: int = betterproto.uint32_field(7)
    match_param_list: List[int] = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class PlayerMatchStopNotify(betterproto.Message):
    reason: "MatchReason" = betterproto.enum_field(10)
    host_uid: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class PlayerMatchSuccNotify(betterproto.Message):
    general_match_info: "GeneralMatchInfo" = betterproto.message_field(7)
    dungeon_id: int = betterproto.uint32_field(3)
    match_type: "MatchType" = betterproto.enum_field(15)
    mechanicus_difficult_level: int = betterproto.uint32_field(5)
    confirm_end_time: int = betterproto.uint32_field(13)
    gcg_match_info: "GcgMatchInfo" = betterproto.message_field(9)
    mp_play_id: int = betterproto.uint32_field(11)
    host_uid: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class PlayerNicknameAuditDataNotify(betterproto.Message):
    info: "ContentAuditInfo" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class PlayerNicknameNotify(betterproto.Message):
    nickname: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class PlayerOfferingDataNotify(betterproto.Message):
    offering_data_list: List["PlayerOfferingData"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class PlayerOfferingReq(betterproto.Message):
    offering_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class PlayerOfferingRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(5)
    item_list: List["ItemParam"] = betterproto.message_field(3)
    offering_data: "PlayerOfferingData" = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class PlayerPreEnterMpNotify(betterproto.Message):
    nickname: str = betterproto.string_field(6)
    uid: int = betterproto.uint32_field(4)
    state: "PlayerPreEnterMpNotifyState" = betterproto.enum_field(10)


@dataclass(eq=False, repr=False)
class PlayerPropChangeNotify(betterproto.Message):
    prop_delta: int = betterproto.uint32_field(4)
    prop_type: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class PlayerPropChangeReasonNotify(betterproto.Message):
    old_value: float = betterproto.float_field(10)
    cur_value: float = betterproto.float_field(11)
    reason: "PropChangeReason" = betterproto.enum_field(2)
    prop_type: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class PlayerPropNotify(betterproto.Message):
    prop_map: Dict[int, "PropValue"] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class PlayerQuitDungeonReq(betterproto.Message):
    is_quit_immediately: bool = betterproto.bool_field(3)
    point_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class PlayerQuitDungeonRsp(betterproto.Message):
    point_id: int = betterproto.uint32_field(10)
    retcode: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class PlayerQuitFromHomeNotify(betterproto.Message):
    reason: "PlayerQuitFromHomeNotifyQuitReason" = betterproto.enum_field(11)


@dataclass(eq=False, repr=False)
class PlayerQuitFromMpNotify(betterproto.Message):
    reason: "PlayerQuitFromMpNotifyQuitReason" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class PlayerRandomCookReq(betterproto.Message):
    material_list: List["ItemParam"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class PlayerRandomCookRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(14)


@dataclass(eq=False, repr=False)
class ProductPriceTier(betterproto.Message):
    price_tier: str = betterproto.string_field(3)
    product_id: str = betterproto.string_field(14)


@dataclass(eq=False, repr=False)
class PlayerRechargeDataNotify(betterproto.Message):
    product_price_tier_list: List["ProductPriceTier"] = betterproto.message_field(7)
    card_product_remain_days: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class PlayerReportReq(betterproto.Message):
    target_home_module_name: str = betterproto.string_field(5)
    target_uid: int = betterproto.uint32_field(10)
    reason: "ReportReasonType" = betterproto.enum_field(7)
    content: str = betterproto.string_field(11)
    target_home_module_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class PlayerReportRsp(betterproto.Message):
    cd_time: int = betterproto.uint32_field(8)
    retcode: int = betterproto.int32_field(7)
    target_uid: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class PlayerRoutineInfo(betterproto.Message):
    routine_type: int = betterproto.uint32_field(5)
    finished_num: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class PlayerRoutineDataNotify(betterproto.Message):
    routine_info_list: List["PlayerRoutineInfo"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class PlayerRttInfo(betterproto.Message):
    rtt: int = betterproto.uint32_field(12)
    uid: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class PlayerSetLanguageReq(betterproto.Message):
    language_type: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class PlayerSetLanguageRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(14)


@dataclass(eq=False, repr=False)
class PlayerSetOnlyMpWithPsPlayerReq(betterproto.Message):
    is_only: bool = betterproto.bool_field(10)


@dataclass(eq=False, repr=False)
class PlayerSetOnlyMpWithPsPlayerRsp(betterproto.Message):
    is_only: bool = betterproto.bool_field(4)
    retcode: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class PlayerSetPauseReq(betterproto.Message):
    is_paused: bool = betterproto.bool_field(15)


@dataclass(eq=False, repr=False)
class PlayerSetPauseRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(10)


@dataclass(eq=False, repr=False)
class PlayerSignatureAuditDataNotify(betterproto.Message):
    info: "ContentAuditInfo" = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class PlayerSignatureNotify(betterproto.Message):
    signature: str = betterproto.string_field(13)


@dataclass(eq=False, repr=False)
class PlayerStartMatchReq(betterproto.Message):
    mp_play_id: int = betterproto.uint32_field(12)
    mechanicus_difficult_level: int = betterproto.uint32_field(15)
    dungeon_id: int = betterproto.uint32_field(10)
    match_id: int = betterproto.uint32_field(2)
    match_type: "MatchType" = betterproto.enum_field(8)
    match_param_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PlayerStartMatchRsp(betterproto.Message):
    dungeon_id: int = betterproto.uint32_field(1)
    match_id: int = betterproto.uint32_field(12)
    match_type: "MatchType" = betterproto.enum_field(10)
    punish_end_time: int = betterproto.uint32_field(8)
    mp_play_id: int = betterproto.uint32_field(11)
    param: int = betterproto.uint32_field(7)
    mechanicus_difficult_level: int = betterproto.uint32_field(3)
    retcode: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class PlayerStoreNotify(betterproto.Message):
    store_type: "StoreType" = betterproto.enum_field(1)
    weight_limit: int = betterproto.uint32_field(14)
    item_list: List["Item"] = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class PlayerTimeNotify(betterproto.Message):
    is_paused: bool = betterproto.bool_field(12)
    player_time: int = betterproto.uint64_field(11)
    server_time: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class PlayerUidExtInfo(betterproto.Message):
    reg_platform: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PlayerWidgetInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(6)
    slot_list: List["WidgetSlotData"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class PlayerWorldLocationInfo(betterproto.Message):
    player_loc: "PlayerLocationInfo" = betterproto.message_field(3)
    scene_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class PlayerWorldSceneInfo(betterproto.Message):
    is_locked: bool = betterproto.bool_field(3)
    scene_id: int = betterproto.uint32_field(8)
    scene_tag_id_list: List[int] = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class PlayerWorldSceneInfoListNotify(betterproto.Message):
    info_list: List["PlayerWorldSceneInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PlayProduct(betterproto.Message):
    product_id: str = betterproto.string_field(1)
    price_tier: str = betterproto.string_field(2)
    schedule_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PlayTeamEntityInfo(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    player_uid: int = betterproto.uint32_field(2)
    authority_peer_id: int = betterproto.uint32_field(3)
    gadget_config_id: int = betterproto.uint32_field(5)
    ability_info: "AbilitySyncStateInfo" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class PostEnterSceneReq(betterproto.Message):
    enter_scene_token: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PostEnterSceneRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(9)
    enter_scene_token: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class PotionAvatarInfo(betterproto.Message):
    is_trial: bool = betterproto.bool_field(15)
    avatar_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class PotionDungeonAvatar(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(14)
    is_trial: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class PotionEnterDungeonNotify(betterproto.Message):
    mode_id: int = betterproto.uint32_field(11)
    level_id: int = betterproto.uint32_field(3)
    dungeon_avatar_list: List["PotionDungeonAvatar"] = betterproto.message_field(1)
    difficulty_level: int = betterproto.uint32_field(14)
    stage_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class PotionEnterDungeonReq(betterproto.Message):
    level_id: int = betterproto.uint32_field(6)
    avatar_info_list: List["PotionAvatarInfo"] = betterproto.message_field(15)
    mode_id: int = betterproto.uint32_field(10)
    buff_id_list: List[int] = betterproto.uint32_field(9)
    stage_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PotionEnterDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(9)


@dataclass(eq=False, repr=False)
class PotionResetChallengeReq(betterproto.Message):
    stage_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class PotionResetChallengeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(7)
    stage_data: "PotionStageData" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class PotionRestartDungeonReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class PotionRestartDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(10)


@dataclass(eq=False, repr=False)
class PotionSaveDungeonResultReq(betterproto.Message):
    level_id: int = betterproto.uint32_field(14)
    stage_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class PotionSaveDungeonResultRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class PrivateChatNotify(betterproto.Message):
    chat_info: "ChatInfo" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class PrivateChatReq(betterproto.Message):
    target_uid: int = betterproto.uint32_field(5)
    text: str = betterproto.string_field(1, group="content")
    icon: int = betterproto.uint32_field(13, group="content")


@dataclass(eq=False, repr=False)
class PrivateChatRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(4)
    chat_forbidden_endtime: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class ProfilePictureChangeNotify(betterproto.Message):
    profile_picture: "ProfilePicture" = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class ProjectorOptionReq(betterproto.Message):
    op_type: int = betterproto.uint32_field(2)
    entity_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class ProjectorOptionRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(5)
    entity_id: int = betterproto.uint32_field(1)
    op_type: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class ProudSkillChangeNotify(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(13)
    proud_skill_list: List[int] = betterproto.uint32_field(5)
    skill_depot_id: int = betterproto.uint32_field(12)
    entity_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ProudSkillExtraLevelNotify(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(13)
    unk3300_odioplhjhae: int = betterproto.uint32_field(4)
    unk3300_lknfmodmeia: int = betterproto.uint32_field(8)
    unk3300_ipdbadaahba: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ProudSkillUpgradeReq(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(13)
    old_proud_skill_level: int = betterproto.uint32_field(3)
    proud_skill_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ProudSkillUpgradeRsp(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(3)
    proud_skill_id: int = betterproto.uint32_field(15)
    retcode: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class PsnBlackListNotify(betterproto.Message):
    psn_blacklist: List["FriendBrief"] = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class PsnFriendListNotify(betterproto.Message):
    psn_friend_list: List["FriendBrief"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PsPlayerApplyEnterMpReq(betterproto.Message):
    target_psn_id: str = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class PsPlayerApplyEnterMpRsp(betterproto.Message):
    target_psn_id: str = betterproto.string_field(3)
    retcode: int = betterproto.int32_field(5)
    param: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class PublishCustomDungeonReq(betterproto.Message):
    dungeon_guid: int = betterproto.uint64_field(6)
    tag_list: List[int] = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class PublishCustomDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class PublishUgcReq(betterproto.Message):
    ugc_guid: int = betterproto.uint64_field(12)
    ugc_type: "UgcType" = betterproto.enum_field(10)


@dataclass(eq=False, repr=False)
class PublishUgcRsp(betterproto.Message):
    ugc_type: "UgcType" = betterproto.enum_field(2)
    ugc_guid: int = betterproto.uint64_field(12)
    retcode: int = betterproto.int32_field(10)


@dataclass(eq=False, repr=False)
class PullPrivateChatReq(betterproto.Message):
    from_sequence: int = betterproto.uint32_field(5)
    target_uid: int = betterproto.uint32_field(12)
    pull_num: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class PullPrivateChatRsp(betterproto.Message):
    chat_info: List["ChatInfo"] = betterproto.message_field(6)
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class PullRecentChatReq(betterproto.Message):
    pull_num: int = betterproto.uint32_field(3)
    begin_sequence: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class PullRecentChatRsp(betterproto.Message):
    chat_info: List["ChatInfo"] = betterproto.message_field(13)
    retcode: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class PushTipsData(betterproto.Message):
    push_tips_id: int = betterproto.uint32_field(4)
    state: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class PushTipsAllDataNotify(betterproto.Message):
    push_tips_list: List["PushTipsData"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class PushTipsChangeNotify(betterproto.Message):
    push_tips_list: List["PushTipsData"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class PushTipsReadFinishReq(betterproto.Message):
    push_tips_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class PushTipsReadFinishRsp(betterproto.Message):
    push_tips_id: int = betterproto.uint32_field(13)
    retcode: int = betterproto.int32_field(12)


@dataclass(eq=False, repr=False)
class QueryCodexMonsterBeKilledNumReq(betterproto.Message):
    codex_id_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class QueryCodexMonsterBeKilledNumRsp(betterproto.Message):
    unk3300_alelnliodao: List[int] = betterproto.uint32_field(11)
    unk3300_inhageelnnc: List[int] = betterproto.uint32_field(5)
    retcode: int = betterproto.int32_field(2)
    codex_id_list: List[int] = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class RegionInfo(betterproto.Message):
    gateserver_ip: str = betterproto.string_field(1)
    gateserver_port: int = betterproto.uint32_field(2)
    pay_callback_url: str = betterproto.string_field(3)
    area_type: str = betterproto.string_field(7)
    resource_url: str = betterproto.string_field(8)
    data_url: str = betterproto.string_field(9)
    feedback_url: str = betterproto.string_field(10)
    bulletin_url: str = betterproto.string_field(11)
    resource_url_bak: str = betterproto.string_field(12)
    data_url_bak: str = betterproto.string_field(13)
    client_data_version: int = betterproto.uint32_field(14)
    handbook_url: str = betterproto.string_field(16)
    client_silence_data_version: int = betterproto.uint32_field(18)
    client_data_md5: str = betterproto.string_field(19)
    client_silence_data_md5: str = betterproto.string_field(20)
    res_version_config: "ResVersionConfig" = betterproto.message_field(22)
    secret_key: bytes = betterproto.bytes_field(23)
    official_community_url: str = betterproto.string_field(24)
    client_version_suffix: str = betterproto.string_field(26)
    client_silence_version_suffix: str = betterproto.string_field(27)
    use_gateserver_domain_name: bool = betterproto.bool_field(28)
    gateserver_domain_name: str = betterproto.string_field(29)
    user_center_url: str = betterproto.string_field(30)
    account_bind_url: str = betterproto.string_field(31)
    cdkey_url: str = betterproto.string_field(32)
    privacy_policy_url: str = betterproto.string_field(33)
    next_resource_url: str = betterproto.string_field(34)
    next_res_version_config: "ResVersionConfig" = betterproto.message_field(35)
    game_biz: str = betterproto.string_field(36)


@dataclass(eq=False, repr=False)
class QueryCurrRegionHttpRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    region_info: "RegionInfo" = betterproto.message_field(3)
    client_secret_key: bytes = betterproto.bytes_field(11)
    region_custom_config_encrypted: bytes = betterproto.bytes_field(12)
    client_region_custom_config_encrypted: bytes = betterproto.bytes_field(13)
    force_update: "ForceUpdateInfo" = betterproto.message_field(4, group="detail")
    stop_server: "StopServerInfo" = betterproto.message_field(5, group="detail")


@dataclass(eq=False, repr=False)
class QueryFilter(betterproto.Message):
    area_mask: int = betterproto.int32_field(4)
    type_id: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class QueryPathReq(betterproto.Message):
    filter: "QueryFilter" = betterproto.message_field(7)
    query_id: int = betterproto.int32_field(3)
    destination_pos: List["Vector"] = betterproto.message_field(6)
    query_type: "QueryPathReqOptionType" = betterproto.enum_field(11)
    unk3300_lhngpjfomik: "Vector3Int" = betterproto.message_field(4)
    scene_id: int = betterproto.uint32_field(2)
    source_pos: "Vector" = betterproto.message_field(8)
    unk3300_clgjbbjdoln: "Vector3Int" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class QueryPathRsp(betterproto.Message):
    query_status: "QueryPathRspPathStatusType" = betterproto.enum_field(3)
    retcode: int = betterproto.int32_field(10)
    query_id: int = betterproto.int32_field(8)
    corners: List["Vector"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RegionSimpleInfo(betterproto.Message):
    name: str = betterproto.string_field(1)
    title: str = betterproto.string_field(2)
    type: str = betterproto.string_field(3)
    dispatch_url: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class QueryRegionListHttpRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    region_list: List["RegionSimpleInfo"] = betterproto.message_field(2)
    client_secret_key: bytes = betterproto.bytes_field(5)
    client_custom_config_encrypted: bytes = betterproto.bytes_field(6)
    enable_login_pc: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class Quest(betterproto.Message):
    quest_id: int = betterproto.uint32_field(1)
    state: int = betterproto.uint32_field(2)
    start_time: int = betterproto.uint32_field(4)
    is_random: bool = betterproto.bool_field(5)
    parent_quest_id: int = betterproto.uint32_field(6)
    quest_config_id: int = betterproto.uint32_field(7)
    start_game_time: int = betterproto.uint32_field(8)
    accept_time: int = betterproto.uint32_field(9)
    lacked_npc_list: List[int] = betterproto.uint32_field(10)
    finish_progress_list: List[int] = betterproto.uint32_field(11)
    fail_progress_list: List[int] = betterproto.uint32_field(12)
    lacked_npc_map: Dict[int, int] = betterproto.map_field(
        13, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    lacked_place_list: List[int] = betterproto.uint32_field(14)
    lacked_place_map: Dict[int, int] = betterproto.map_field(
        15, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class QuestCreateEntityReq(betterproto.Message):
    parent_quest_id: int = betterproto.uint32_field(14)
    entity: "CreateEntityInfo" = betterproto.message_field(3)
    quest_id: int = betterproto.uint32_field(5)
    is_rewind: bool = betterproto.bool_field(11)


@dataclass(eq=False, repr=False)
class QuestCreateEntityRsp(betterproto.Message):
    entity: "CreateEntityInfo" = betterproto.message_field(11)
    entity_id: int = betterproto.uint32_field(3)
    is_rewind: bool = betterproto.bool_field(9)
    parent_quest_id: int = betterproto.uint32_field(2)
    retcode: int = betterproto.int32_field(7)
    quest_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class QuestDelNotify(betterproto.Message):
    quest_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class QuestDestroyEntityReq(betterproto.Message):
    entity_id: int = betterproto.uint32_field(8)
    quest_id: int = betterproto.uint32_field(5)
    scene_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class QuestDestroyEntityRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(3)
    scene_id: int = betterproto.uint32_field(6)
    entity_id: int = betterproto.uint32_field(8)
    quest_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class QuestDestroyNpcReq(betterproto.Message):
    npc_id: int = betterproto.uint32_field(15)
    parent_quest_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class QuestDestroyNpcRsp(betterproto.Message):
    npc_id: int = betterproto.uint32_field(14)
    parent_quest_id: int = betterproto.uint32_field(8)
    retcode: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class QuestGlobalVar(betterproto.Message):
    value: int = betterproto.int32_field(4)
    key: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class QuestGlobalVarNotify(betterproto.Message):
    var_list: List["QuestGlobalVar"] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class QuestListNotify(betterproto.Message):
    quest_list: List["Quest"] = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class QuestListUpdateNotify(betterproto.Message):
    quest_list: List["Quest"] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class QuestProgressUpdateNotify(betterproto.Message):
    quest_id: int = betterproto.uint32_field(9)
    finish_progress_list: List[int] = betterproto.uint32_field(12)
    fail_progress_list: List[int] = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class QuestRenameAvatarReq(betterproto.Message):
    avatar_name: str = betterproto.string_field(11)
    rename_id: int = betterproto.uint32_field(12)
    is_check: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class QuestRenameAvatarRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(11)
    is_check: bool = betterproto.bool_field(4)
    rename_id: int = betterproto.uint32_field(15)
    avatar_name: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class QuestTransmitReq(betterproto.Message):
    quest_id: int = betterproto.uint32_field(12)
    point_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class QuestTransmitRsp(betterproto.Message):
    quest_id: int = betterproto.uint32_field(2)
    retcode: int = betterproto.int32_field(14)
    point_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class QuestUpdateQuestTimeVarNotify(betterproto.Message):
    time_var_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    parent_quest_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class QuestUpdateQuestVarNotify(betterproto.Message):
    parent_quest_var_seq: int = betterproto.uint32_field(9)
    quest_var: List[int] = betterproto.int32_field(3)
    parent_quest_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class QuestVarOp(betterproto.Message):
    index: int = betterproto.uint32_field(9)
    is_add: bool = betterproto.bool_field(3)
    value: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class QuestUpdateQuestVarReq(betterproto.Message):
    parent_quest_var_seq: int = betterproto.uint32_field(7)
    quest_var_op_list: List["QuestVarOp"] = betterproto.message_field(11)
    quest_id: int = betterproto.uint32_field(5)
    parent_quest_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class QuestUpdateQuestVarRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(7)
    parent_quest_var_seq: int = betterproto.uint32_field(1)
    parent_quest_id: int = betterproto.uint32_field(8)
    quest_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class QuickOpenActivityReq(betterproto.Message):
    activity_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class QuickOpenActivityRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(12)
    activity_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class WidgetCameraInfo(betterproto.Message):
    target_entity_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class WidgetCreateLocationInfo(betterproto.Message):
    pos: "Vector" = betterproto.message_field(12)
    rot: "Vector" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class WidgetCreatorInfo(betterproto.Message):
    op_type: "WidgetCreatorOpType" = betterproto.enum_field(14)
    entity_id: int = betterproto.uint32_field(12)
    location_info: "WidgetCreateLocationInfo" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class WidgetThunderBirdFeatherInfo(betterproto.Message):
    entity_id_list: List[int] = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class QuickUseWidgetReq(betterproto.Message):
    location_info: "WidgetCreateLocationInfo" = betterproto.message_field(
        1872, group="param"
    )
    camera_info: "WidgetCameraInfo" = betterproto.message_field(1835, group="param")
    creator_info: "WidgetCreatorInfo" = betterproto.message_field(72, group="param")
    thunder_bird_feather_info: "WidgetThunderBirdFeatherInfo" = (
        betterproto.message_field(491, group="param")
    )


@dataclass(eq=False, repr=False)
class SkyCrystalDetectorQuickUseResult(betterproto.Message):
    retcode: int = betterproto.int32_field(2)
    sky_crystal_detector_data: "SkyCrystalDetectorData" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class QuickUseWidgetRsp(betterproto.Message):
    material_id: int = betterproto.uint32_field(11)
    retcode: int = betterproto.int32_field(12)
    detector_data: "OneoffGatherPointDetectorData" = betterproto.message_field(
        14, group="param"
    )
    client_collector_data: "ClientCollectorData" = betterproto.message_field(
        10, group="param"
    )
    sky_crystal_detector_quick_use_result: "SkyCrystalDetectorQuickUseResult" = (
        betterproto.message_field(172322, group="param")
    )


@dataclass(eq=False, repr=False)
class ReadMailNotify(betterproto.Message):
    mail_id_list: List[int] = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class ReadNicknameAuditReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ReadNicknameAuditRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class ReadPrivateChatReq(betterproto.Message):
    target_uid: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class ReadPrivateChatRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(14)


@dataclass(eq=False, repr=False)
class ReadSignatureAuditReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ReadSignatureAuditRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class ReceivedTrialAvatarActivityRewardReq(betterproto.Message):
    trial_avatar_index_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class ReceivedTrialAvatarActivityRewardRsp(betterproto.Message):
    activity_id: int = betterproto.uint32_field(6)
    retcode: int = betterproto.int32_field(8)
    trial_avatar_index_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class RechargeReq(betterproto.Message):
    mcoin_product: "ShopMcoinProduct" = betterproto.message_field(10)
    card_product: "ShopCardProduct" = betterproto.message_field(4)
    play_product: "PlayProduct" = betterproto.message_field(3)
    concert_product: "ShopConcertProduct" = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class RechargeRsp(betterproto.Message):
    product_id: str = betterproto.string_field(10)
    is_show_minors_hint: bool = betterproto.bool_field(1)
    retcode: int = betterproto.int32_field(9)


@dataclass(eq=False, repr=False)
class RedeemLegendaryKeyReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RedeemLegendaryKeyRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(6)
    legendary_key_count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class RedPointData(betterproto.Message):
    red_point_type: int = betterproto.uint32_field(1)
    is_show: bool = betterproto.bool_field(2)
    content_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ReformFireworksReq(betterproto.Message):
    fireworks_reform_data: "FireworksReformData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ReformFireworksRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class RefreshBackgroundAvatarReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RefreshBackgroundAvatarRsp(betterproto.Message):
    hp_full_time_map: Dict[int, int] = betterproto.map_field(
        4, betterproto.TYPE_UINT64, betterproto.TYPE_UINT32
    )
    retcode: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class RefreshEntityAuthNotify(betterproto.Message):
    entity_id_list: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class RefreshRogueDiaryCardReq(betterproto.Message):
    refresh_card_list: List[int] = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class RefreshRogueDiaryCardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(6)
    rand_card_list: List[int] = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class RefreshRoguelikeDungeonCardReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RefreshRoguelikeDungeonCardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(14)
    res_card_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class RegionalPlayVar(betterproto.Message):
    type: int = betterproto.uint32_field(5)
    unk3300_fobmhhnipph: float = betterproto.float_field(4)
    unk3300_pidhfabkijn: float = betterproto.float_field(3)
    value: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class RegionalPlayInfoNotify(betterproto.Message):
    play_type: int = betterproto.uint32_field(3)
    var_list: List["RegionalPlayVar"] = betterproto.message_field(13)
    play_name: str = betterproto.string_field(5)
    unk3300_fmepebihnol: bool = betterproto.bool_field(1)
    unk3300_mbgojobnpng: bool = betterproto.bool_field(14)


@dataclass(eq=False, repr=False)
class RegionSearch(betterproto.Message):
    state: "RegionSearchState" = betterproto.enum_field(2)
    is_entered: bool = betterproto.bool_field(6)
    progress: int = betterproto.uint32_field(5)
    region_search_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class RegionSearchChangeRegionNotify(betterproto.Message):
    region_id: int = betterproto.uint32_field(6)
    event: "RegionSearchChangeRegionNotifyRegionEvent" = betterproto.enum_field(11)


@dataclass(eq=False, repr=False)
class RegionSearchInfo(betterproto.Message):
    is_entered: bool = betterproto.bool_field(2)
    region_search_list: List["RegionSearch"] = betterproto.message_field(7)
    id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class RegionSearchNotify(betterproto.Message):
    region_search_list: List["RegionSearchInfo"] = betterproto.message_field(3)
    uid: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class ReliquaryDecomposeReq(betterproto.Message):
    config_id: int = betterproto.uint32_field(4)
    target_count: int = betterproto.uint32_field(15)
    guid_list: List[int] = betterproto.uint64_field(13)


@dataclass(eq=False, repr=False)
class ReliquaryDecomposeRsp(betterproto.Message):
    guid_list: List[int] = betterproto.uint64_field(6)
    retcode: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class ReliquaryFilterStateNotify(betterproto.Message):
    reliquary_filter_state_map: Dict[int, int] = betterproto.map_field(
        10, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class ReliquaryFilterStateSaveNotify(betterproto.Message):
    reliquary_filter_state_map: Dict[int, int] = betterproto.map_field(
        4, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class ReliquaryPromoteReq(betterproto.Message):
    target_guid: int = betterproto.uint64_field(3)
    item_guid: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class ReliquaryPromoteRsp(betterproto.Message):
    unk3300_ialpgnadfka: List[int] = betterproto.uint32_field(8)
    unk3300_ggfcipakkdp: int = betterproto.uint32_field(9)
    unk3300_mgelablmfoe: List[int] = betterproto.uint32_field(13)
    retcode: int = betterproto.int32_field(10)
    target_reliquary_guid: int = betterproto.uint64_field(6)
    unk3300_mbebiacjnbb: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ReliquaryUpgradeReq(betterproto.Message):
    food_reliquary_guid_list: List[int] = betterproto.uint64_field(3)
    item_param_list: List["ItemParam"] = betterproto.message_field(15)
    target_reliquary_guid: int = betterproto.uint64_field(8)


@dataclass(eq=False, repr=False)
class ReliquaryUpgradeRsp(betterproto.Message):
    unk3300_mgelablmfoe: List[int] = betterproto.uint32_field(13)
    retcode: int = betterproto.int32_field(11)
    target_reliquary_guid: int = betterproto.uint64_field(14)
    cur_level: int = betterproto.uint32_field(2)
    old_level: int = betterproto.uint32_field(6)
    unk3300_ialpgnadfka: List[int] = betterproto.uint32_field(10)
    power_up_rate: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class RemotePlayerWidgetNotify(betterproto.Message):
    player_widget_info_list: List["PlayerWidgetInfo"] = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class RemoveBlacklistReq(betterproto.Message):
    target_uid: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class RemoveBlacklistRsp(betterproto.Message):
    target_uid: int = betterproto.uint32_field(6)
    retcode: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class RemoveCustomDungeonReq(betterproto.Message):
    dungeon_guid: int = betterproto.uint64_field(7)


@dataclass(eq=False, repr=False)
class RemoveCustomDungeonRsp(betterproto.Message):
    dungeon_guid: int = betterproto.uint64_field(3)
    retcode: int = betterproto.int32_field(10)


@dataclass(eq=False, repr=False)
class RemoveRandTaskInfoNotify(betterproto.Message):
    rand_task_id: int = betterproto.uint32_field(10)
    reason: "RemoveRandTaskInfoNotifyFinishReason" = betterproto.enum_field(13)
    is_succ: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class ReplayCustomDungeonReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ReplayCustomDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class ReportFightAntiCheatNotify(betterproto.Message):
    unk3300_mifnaaadbbp: int = betterproto.uint32_field(8)
    unk3300_abckmppmnch: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class ReportTrackingIoInfoNotify(betterproto.Message):
    unk3300_kggpdkgdelg: str = betterproto.string_field(13)
    unk3300_djhkhefpcdk: str = betterproto.string_field(10)
    unk3300_pibfpdamjle: str = betterproto.string_field(6)
    unk3300_cnpigdoejpb: str = betterproto.string_field(8)
    unk3300_gejjkdlgfph: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class RequestLiveInfoReq(betterproto.Message):
    live_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class RequestLiveInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(13)
    unk3300_bdogcpkplok: str = betterproto.string_field(11)
    unk3300_dnggioiklhc: str = betterproto.string_field(6)
    live_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class ReserveRogueDiaryAvatarReq(betterproto.Message):
    reserve_avatar_list: List["RogueDiaryAvatar"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ReserveRogueDiaryAvatarRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class ResetRogueDiaryPlayReq(betterproto.Message):
    stage_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class ResetRogueDiaryPlayRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class ResinCardData(betterproto.Message):
    last_daily_reward_time: int = betterproto.uint32_field(10)
    config_id: int = betterproto.uint32_field(2)
    expire_time: int = betterproto.uint32_field(13)
    remain_reward_days: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class ResinCardDataUpdateNotify(betterproto.Message):
    today_start_time: int = betterproto.uint32_field(4)
    card_data_list: List["ResinCardData"] = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class ResinChangeNotify(betterproto.Message):
    unk3300_kglihglnajk: int = betterproto.uint32_field(11)
    unk3300_dadmlcpihkj: int = betterproto.uint32_field(13)
    cur_value: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class RestartCoinCollectPlaySingleModeReq(betterproto.Message):
    level_id: int = betterproto.uint32_field(2)
    multistage_play_index: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class RestartCoinCollectPlaySingleModeRsp(betterproto.Message):
    level_id: int = betterproto.uint32_field(10)
    retcode: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class RestartEffigyChallengeReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RestartEffigyChallengeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class ResumeRogueDiaryDungeonReq(betterproto.Message):
    stage_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class ResumeRogueDiaryDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class RetryCurRogueDiaryDungeonReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RetryCurRogueDiaryDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class ReunionBriefInfo(betterproto.Message):
    first_day_start_time: int = betterproto.uint32_field(1)
    version: str = betterproto.string_field(11)
    mission_id: int = betterproto.uint32_field(6)
    finish_time: int = betterproto.uint32_field(2)
    unk3300_okgaaedenei: bool = betterproto.bool_field(13)
    privilege_id: int = betterproto.uint32_field(5)
    privilege_info: "ReunionPrivilegeInfo" = betterproto.message_field(10)
    start_time: int = betterproto.uint32_field(14)
    first_gift_reward_id: int = betterproto.uint32_field(9)
    unk3300_odklpomkkpd: bool = betterproto.bool_field(8)
    unk3300_mhhlejiffim: bool = betterproto.bool_field(7)
    sign_in_config_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class ReunionActivateNotify(betterproto.Message):
    is_activate: bool = betterproto.bool_field(7)
    reunion_brief_info: "ReunionBriefInfo" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class ReunionBriefInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ReunionBriefInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(2)
    reunion_brief_info: "ReunionBriefInfo" = betterproto.message_field(13)
    is_activate: bool = betterproto.bool_field(15)


@dataclass(eq=False, repr=False)
class ReunionDailyRefreshNotify(betterproto.Message):
    reunion_brief_info: "ReunionBriefInfo" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class ReunionPrivilegeChangeNotify(betterproto.Message):
    privilege_info: "ReunionPrivilegeInfo" = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class ReunionSettleNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RobotPushPlayerDataNotify(betterproto.Message):
    bin: bytes = betterproto.bytes_field(7)


@dataclass(eq=False, repr=False)
class RogueCellUpdateNotify(betterproto.Message):
    cell_info: "RogueCellInfo" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class RogueDiaryCoinAddNotify(betterproto.Message):
    num: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class RogueDiaryRoomInfo(betterproto.Message):
    is_boss: bool = betterproto.bool_field(6)
    config_id: int = betterproto.uint32_field(3)
    monster_list: List["Uint32Pair"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class RogueDiaryDungeonInfoNotify(betterproto.Message):
    stage_id: int = betterproto.uint32_field(12)
    time: int = betterproto.uint32_field(9)
    unk3300_mmbejgdfcge: List[int] = betterproto.uint32_field(6)
    cur_room: int = betterproto.uint32_field(1)
    unk3300_dkcfglakpjl: List[int] = betterproto.uint32_field(8)
    dungeon_id: int = betterproto.uint32_field(7)
    room_list: List["RogueDiaryRoomInfo"] = betterproto.message_field(5)
    difficulty: int = betterproto.uint32_field(14)
    cur_round: int = betterproto.uint32_field(10)
    coin: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class RogueDiaryDungeonSettleNotify(betterproto.Message):
    is_finish: bool = betterproto.bool_field(14)
    cur_round: int = betterproto.uint32_field(11)
    explore_time: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class RogueDiaryRepairInfoNotify(betterproto.Message):
    avatar_list: List["RogueDiaryAvatar"] = betterproto.message_field(2)
    trial_avatar_list: List["RogueDiaryAvatar"] = betterproto.message_field(10)
    room_list: List["RogueDiaryRoomInfo"] = betterproto.message_field(11)
    select_card_list: List[int] = betterproto.uint32_field(12)
    chosen_card_list: List[int] = betterproto.uint32_field(5)
    stage_id: int = betterproto.uint32_field(7)
    select_avatar_list: List["RogueDiaryAvatar"] = betterproto.message_field(3)
    rand_card_list: List[int] = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class RogueDiaryReviveAvatarReq(betterproto.Message):
    revive_avatar: "RogueDiaryAvatar" = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class RogueDiaryReviveAvatarRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(9)


@dataclass(eq=False, repr=False)
class RogueDiaryTiredAvatarNotify(betterproto.Message):
    unk3300_dmembbpeigk: int = betterproto.uint32_field(1)
    unk3300_bgejglbmfii: int = betterproto.uint32_field(14)
    is_need_show: bool = betterproto.bool_field(11)
    optional_tired_avatar_list: List["RogueDiaryAvatar"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class RogueDungeonPlayerCellChangeNotify(betterproto.Message):
    cell_id: int = betterproto.uint32_field(4)
    old_cell_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class RogueEffectRecord(betterproto.Message):
    source_id: int = betterproto.uint32_field(9)
    is_new: bool = betterproto.bool_field(8)
    count: int = betterproto.uint32_field(3)
    extra_param_list: List[int] = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class RogueFinishRepairReq(betterproto.Message):
    chosen_avatar_list: List["RogueDiaryAvatar"] = betterproto.message_field(14)
    chosen_card_list: List[int] = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class RogueFinishRepairRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class RogueHealAvatarsReq(betterproto.Message):
    cell_id: int = betterproto.uint32_field(2)
    dungeon_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class RogueHealAvatarsRsp(betterproto.Message):
    dungeon_id: int = betterproto.uint32_field(3)
    cell_id: int = betterproto.uint32_field(8)
    retcode: int = betterproto.int32_field(9)


@dataclass(eq=False, repr=False)
class RoguelikeCardGachaNotify(betterproto.Message):
    is_can_refresh: bool = betterproto.bool_field(7)
    card_list: List[int] = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class RoguelikeEffectDataNotify(betterproto.Message):
    card_list: List["RogueEffectRecord"] = betterproto.message_field(3)
    curse_list: List["RogueEffectRecord"] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class RoguelikeEffectViewReq(betterproto.Message):
    unk3300_fkgjgijhkji: List[int] = betterproto.uint32_field(10)
    unk3300_lmiiaepbknb: List[int] = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class RoguelikeEffectViewRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class RoguelikeGiveUpReq(betterproto.Message):
    stage_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class RoguelikeGiveUpRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(6)
    stage_id: int = betterproto.uint32_field(14)
    settle_info: "RoguelikeDungeonSettleInfo" = betterproto.message_field(
        2, group="info"
    )


@dataclass(eq=False, repr=False)
class RoguelikeMistClearNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RoguelikeRefreshCardCostUpdateNotify(betterproto.Message):
    item_count: int = betterproto.uint32_field(13)
    item_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class RoguelikeResourceBonusPropUpdateNotify(betterproto.Message):
    bonus_resource_prop: float = betterproto.float_field(5)


@dataclass(eq=False, repr=False)
class RoguelikeRuneRecordUpdateNotify(betterproto.Message):
    rune_record_list: List["RoguelikeRuneRecord"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class RoguelikeSelectAvatarAndEnterDungeonReq(betterproto.Message):
    stage_id: int = betterproto.uint32_field(1)
    onstage_avatar_guid_list: List[int] = betterproto.uint64_field(12)
    backstage_avatar_guid_list: List[int] = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class RoguelikeSelectAvatarAndEnterDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)
    stage_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class RoguelikeTakeStageFirstPassRewardReq(betterproto.Message):
    stage_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class RoguelikeTakeStageFirstPassRewardRsp(betterproto.Message):
    stage_id: int = betterproto.uint32_field(15)
    retcode: int = betterproto.int32_field(10)


@dataclass(eq=False, repr=False)
class RogueResumeDungeonReq(betterproto.Message):
    stage_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class RogueResumeDungeonRsp(betterproto.Message):
    stage_id: int = betterproto.uint32_field(15)
    retcode: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class RogueSwitchAvatarReq(betterproto.Message):
    onstage_avatar_guid_list: List[int] = betterproto.uint64_field(8)
    dungeon_id: int = betterproto.uint32_field(10)
    cell_id: int = betterproto.uint32_field(11)
    cur_avatar_guid: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class RogueSwitchAvatarRsp(betterproto.Message):
    backstage_avatar_guid_list: List[int] = betterproto.uint64_field(3)
    dungeon_id: int = betterproto.uint32_field(15)
    onstage_avatar_guid_list: List[int] = betterproto.uint64_field(8)
    cell_id: int = betterproto.uint32_field(1)
    cur_avatar_guid: int = betterproto.uint64_field(5)
    retcode: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class RoutePointChangeInfo(betterproto.Message):
    target_velocity: float = betterproto.float_field(12)
    wait_time: float = betterproto.float_field(14)
    point_index: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class SalesmanDeliverItemReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class SalesmanDeliverItemRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(4)
    schedule_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class SalesmanTakeRewardReq(betterproto.Message):
    position: int = betterproto.uint32_field(15)
    schedule_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class SalesmanTakeRewardRsp(betterproto.Message):
    reward_id: int = betterproto.uint32_field(12)
    retcode: int = betterproto.int32_field(4)
    position: int = betterproto.uint32_field(15)
    schedule_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SalesmanTakeSpecialRewardReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class SalesmanTakeSpecialRewardRsp(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(6)
    retcode: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class SalvageEscortGallerySettleInfo(betterproto.Message):
    time_remain: int = betterproto.uint32_field(15)
    reason: "SalvageEscortStopReason" = betterproto.enum_field(11)


@dataclass(eq=False, repr=False)
class SalvageEscortRestartReq(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SalvageEscortRestartRsp(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(7)
    retcode: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class SalvageEscortSettleInfo(betterproto.Message):
    settle_info: "SalvageEscortGallerySettleInfo" = betterproto.message_field(6)
    is_new_record: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class SalvageEscortSettleNotify(betterproto.Message):
    settle_info: "SalvageEscortSettleInfo" = betterproto.message_field(1)
    gallery_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class SalvagePreventGallerySettleInfo(betterproto.Message):
    monster_count: int = betterproto.uint32_field(2)
    reason: "SalvagePreventStopReason" = betterproto.enum_field(11)
    final_score: int = betterproto.uint32_field(4)
    time_remain: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class SalvagePreventRestartReq(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class SalvagePreventRestartRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(7)
    gallery_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class SalvagePreventSettleInfo(betterproto.Message):
    settle_info: "SalvagePreventGallerySettleInfo" = betterproto.message_field(4)
    is_new_record: bool = betterproto.bool_field(12)


@dataclass(eq=False, repr=False)
class SalvagePreventSettleNotify(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(13)
    settle_info: "SalvagePreventSettleInfo" = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class SaveCoopDialogReq(betterproto.Message):
    unk3300_amkddjepakm: int = betterproto.uint32_field(10)
    unk3300_kmbgniicnaf: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class SaveCoopDialogRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(5)
    unk3300_amkddjepakm: int = betterproto.uint32_field(15)
    unk3300_kmbgniicnaf: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class SaveCustomDungeonRoomReq(betterproto.Message):
    setting: "CustomDungeonSetting" = betterproto.message_field(1)
    custom_dungeon_room: "CustomDungeonRoom" = betterproto.message_field(4)
    is_update_setting: bool = betterproto.bool_field(12)


@dataclass(eq=False, repr=False)
class SaveCustomDungeonRoomRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(9)
    room_id: int = betterproto.uint32_field(3)
    error_block_list: List["CustomDungeonBlock"] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class SaveMainCoopReq(betterproto.Message):
    unk3300_jfpledlnjpf: Dict[int, int] = betterproto.map_field(
        14, betterproto.TYPE_UINT32, betterproto.TYPE_INT32
    )
    self_confidence: int = betterproto.uint32_field(6)
    id: int = betterproto.uint32_field(13)
    save_point_id: int = betterproto.uint32_field(2)
    unk3300_omeemfjfkbh: Dict[int, int] = betterproto.map_field(
        12, betterproto.TYPE_UINT32, betterproto.TYPE_INT32
    )


@dataclass(eq=False, repr=False)
class SaveMainCoopRsp(betterproto.Message):
    id: int = betterproto.uint32_field(11)
    save_point_id_list: List[int] = betterproto.uint32_field(3)
    retcode: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class SaveUgcReq(betterproto.Message):
    ugc_type: "UgcType" = betterproto.enum_field(3)
    music_record: "UgcMusicRecord" = betterproto.message_field(11, group="record")
    music_brief_info: "UgcMusicBriefInfo" = betterproto.message_field(
        260, group="brief"
    )


@dataclass(eq=False, repr=False)
class SaveUgcRsp(betterproto.Message):
    ugc_guid: int = betterproto.uint64_field(9)
    retcode: int = betterproto.int32_field(8)
    ugc_type: "UgcType" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class SceneAreaUnlockNotify(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    area_list: List[int] = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class SceneAreaWeatherNotify(betterproto.Message):
    weather_gadget_id: int = betterproto.uint32_field(6)
    weather_value_map: Dict[int, str] = betterproto.map_field(
        11, betterproto.TYPE_UINT32, betterproto.TYPE_STRING
    )
    climate_type: int = betterproto.uint32_field(7)
    trans_duration: float = betterproto.float_field(10)
    weather_area_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class SceneAudioNotify(betterproto.Message):
    source_uid: int = betterproto.uint32_field(6)
    param2: List[float] = betterproto.float_field(11)
    param3: List[str] = betterproto.string_field(13)
    type: int = betterproto.int32_field(15)
    param1: List[int] = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class SceneAvatarStaminaStepReq(betterproto.Message):
    use_client_rot: bool = betterproto.bool_field(9)
    rot: "Vector" = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class SceneAvatarStaminaStepRsp(betterproto.Message):
    rot: "Vector" = betterproto.message_field(1)
    use_client_rot: bool = betterproto.bool_field(9)
    retcode: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class SceneCreateEntityReq(betterproto.Message):
    reason: "CreateReason" = betterproto.enum_field(4)
    entity: "CreateEntityInfo" = betterproto.message_field(8)
    is_destroy_when_disconnect: bool = betterproto.bool_field(15)


@dataclass(eq=False, repr=False)
class SceneCreateEntityRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)
    entity: "CreateEntityInfo" = betterproto.message_field(4)
    entity_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class SceneDataNotify(betterproto.Message):
    scene_tag_id_list: List[int] = betterproto.uint32_field(3)
    level_config_name_list: List[str] = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class SceneDestroyEntityReq(betterproto.Message):
    entity_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class SceneDestroyEntityRsp(betterproto.Message):
    entity_id: int = betterproto.uint32_field(15)
    retcode: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class SceneEntitiesMoveCombineNotify(betterproto.Message):
    entity_move_info_list: List["EntityMoveInfo"] = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class SceneEntitiesMovesReq(betterproto.Message):
    entity_move_info_list: List["EntityMoveInfo"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class SceneEntitiesMovesRsp(betterproto.Message):
    entity_move_fail_info_list: List["EntityMoveFailInfo"] = betterproto.message_field(
        10
    )


@dataclass(eq=False, repr=False)
class SceneEntityAppearNotify(betterproto.Message):
    entity_list: List["SceneEntityInfo"] = betterproto.message_field(15)
    appear_type: "VisionType" = betterproto.enum_field(1)
    param: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class SceneEntityDisappearNotify(betterproto.Message):
    param: int = betterproto.uint32_field(15)
    disappear_type: "VisionType" = betterproto.enum_field(12)
    entity_list: List[int] = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class SceneEntityDrownReq(betterproto.Message):
    entity_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class SceneEntityDrownRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(9)
    entity_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class SceneEntityMoveNotify(betterproto.Message):
    reliable_seq: int = betterproto.uint32_field(3)
    scene_time: int = betterproto.uint32_field(15)
    entity_id: int = betterproto.uint32_field(11)
    motion_info: "MotionInfo" = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class SceneEntityMoveReq(betterproto.Message):
    scene_time: int = betterproto.uint32_field(5)
    motion_info: "MotionInfo" = betterproto.message_field(4)
    entity_id: int = betterproto.uint32_field(13)
    reliable_seq: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SceneEntityMoveRsp(betterproto.Message):
    scene_time: int = betterproto.uint32_field(11)
    fail_motion: "MotionInfo" = betterproto.message_field(8)
    entity_id: int = betterproto.uint32_field(12)
    retcode: int = betterproto.int32_field(9)
    reliable_seq: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class SceneEntityUpdateNotify(betterproto.Message):
    appear_type: "VisionType" = betterproto.enum_field(11)
    param: int = betterproto.uint32_field(12)
    entity_list: List["SceneEntityInfo"] = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class SceneForceLockNotify(betterproto.Message):
    force_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SceneForceUnlockNotify(betterproto.Message):
    is_add: bool = betterproto.bool_field(15)
    force_id_list: List[int] = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class SceneGalleryInfoNotify(betterproto.Message):
    gallery_info: "SceneGalleryInfo" = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class VintageHuntingFirstStageSettleInfo(betterproto.Message):
    unk3300_hikadhblpeb: int = betterproto.uint32_field(2)
    score: int = betterproto.uint32_field(1)
    unk3300_nilgnhopgld: int = betterproto.uint32_field(3)
    unk3300_ipajlkobdkc: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class VintageHuntingSecondStageSettleInfo(betterproto.Message):
    capture_animal_num: int = betterproto.uint32_field(2)
    animal_count_map: Dict[int, int] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    total_num: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class VintageHuntingThirdStageSettleInfo(betterproto.Message):
    is_success: bool = betterproto.bool_field(2)
    left_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SceneGalleryVintageHuntingSettleNotify(betterproto.Message):
    has_new_watcher: bool = betterproto.bool_field(3)
    is_new_record: bool = betterproto.bool_field(13)
    unk3300_ehgdikoglkl: int = betterproto.uint32_field(15)
    unk3300_koakhmlfpgm: int = betterproto.uint32_field(6)
    stage_id: int = betterproto.uint32_field(9)
    first_stage_info: "VintageHuntingFirstStageSettleInfo" = betterproto.message_field(
        7, group="info"
    )
    second_stage_info: "VintageHuntingSecondStageSettleInfo" = (
        betterproto.message_field(8, group="info")
    )
    third_stage_info: "VintageHuntingThirdStageSettleInfo" = betterproto.message_field(
        14, group="info"
    )


@dataclass(eq=False, repr=False)
class SceneInitFinishReq(betterproto.Message):
    enter_scene_token: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class SceneInitFinishRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(7)
    enter_scene_token: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class SceneKickPlayerNotify(betterproto.Message):
    target_uid: int = betterproto.uint32_field(13)
    kicker_uid: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class SceneKickPlayerReq(betterproto.Message):
    target_uid: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class SceneKickPlayerRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)
    target_uid: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class ScenePlayBattleInfo(betterproto.Message):
    duration: int = betterproto.uint32_field(14)
    progress: int = betterproto.uint32_field(5)
    prepare_end_time: int = betterproto.uint32_field(1)
    play_type: int = betterproto.uint32_field(12)
    progress_stage_list: List[int] = betterproto.uint32_field(13)
    state: int = betterproto.uint32_field(7)
    mode: int = betterproto.uint32_field(6)
    type: int = betterproto.uint32_field(10)
    play_id: int = betterproto.uint32_field(11)
    start_time: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class ScenePlayBattleInfoListNotify(betterproto.Message):
    battle_info_list: List["ScenePlayBattleInfo"] = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class ScenePlayBattleInfoNotify(betterproto.Message):
    battle_info: "ScenePlayBattleInfo" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class ScenePlayBattleInterruptNotify(betterproto.Message):
    interrupt_state: int = betterproto.uint32_field(8)
    play_id: int = betterproto.uint32_field(10)
    play_type: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ScenePlayBattleSettlePlayerInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(7)
    card_list: List["ExhibitionDisplayInfo"] = betterproto.message_field(4)
    profile_picture: "ProfilePicture" = betterproto.message_field(8)
    nickname: str = betterproto.string_field(3)
    param: int = betterproto.int64_field(11)
    statistic_id: int = betterproto.uint32_field(13)
    online_id: str = betterproto.string_field(5)
    head_image: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ScenePlayBattleSettleRewardInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(7)
    reward_item_list: List["ItemParam"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class ScenePlayBattleResultNotify(betterproto.Message):
    settle_player_info_list: List[
        "ScenePlayBattleSettlePlayerInfo"
    ] = betterproto.message_field(14)
    settle_reward_info_list: List[
        "ScenePlayBattleSettleRewardInfo"
    ] = betterproto.message_field(10)
    cost_time: int = betterproto.uint32_field(6)
    play_type: int = betterproto.uint32_field(4)
    is_win: bool = betterproto.bool_field(15)
    play_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class ScenePlayBattleUidOpNotify(betterproto.Message):
    op: int = betterproto.uint32_field(5)
    param_duration: int = betterproto.uint32_field(10)
    play_id: int = betterproto.uint32_field(13)
    param_target_list: List[int] = betterproto.uint32_field(12)
    entity_id: int = betterproto.uint32_field(2)
    param_list: List[int] = betterproto.uint32_field(9)
    param_str: str = betterproto.string_field(11)
    param_index: int = betterproto.uint32_field(15)
    uid_list: List[int] = betterproto.uint32_field(6)
    play_type: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class ScenePlayerBackgroundAvatarRefreshNotify(betterproto.Message):
    param: int = betterproto.uint32_field(7)
    appear_type: "VisionType" = betterproto.enum_field(14)
    entity_list: List["SceneEntityInfo"] = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class ScenePlayerInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(2)
    scene_id: int = betterproto.uint32_field(7)
    peer_id: int = betterproto.uint32_field(15)
    online_player_info: "OnlinePlayerInfo" = betterproto.message_field(9)
    is_connected: bool = betterproto.bool_field(3)
    name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ScenePlayerInfoNotify(betterproto.Message):
    player_info_list: List["ScenePlayerInfo"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class VehicleLocationInfo(betterproto.Message):
    rot: "Vector" = betterproto.message_field(5)
    owner_uid: int = betterproto.uint32_field(11)
    uid_list: List[int] = betterproto.uint32_field(4)
    unk3300_mliceakloih: float = betterproto.float_field(2)
    pos: "Vector" = betterproto.message_field(9)
    gadget_id: int = betterproto.uint32_field(1)
    entity_id: int = betterproto.uint32_field(14)
    unk3300_mnnmociieaj: float = betterproto.float_field(15)


@dataclass(eq=False, repr=False)
class ScenePlayerLocationNotify(betterproto.Message):
    scene_id: int = betterproto.uint32_field(11)
    vehicle_loc_list: List["VehicleLocationInfo"] = betterproto.message_field(6)
    player_loc_list: List["PlayerLocationInfo"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ScenePlayerSoundNotify(betterproto.Message):
    play_pos: "Vector" = betterproto.message_field(6)
    play_type: "ScenePlayerSoundNotifyPlaySoundType" = betterproto.enum_field(15)
    sound_name: str = betterproto.string_field(14)


@dataclass(eq=False, repr=False)
class ScenePlayGuestReplyInviteReq(betterproto.Message):
    is_agree: bool = betterproto.bool_field(7)
    play_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ScenePlayGuestReplyInviteRsp(betterproto.Message):
    is_agree: bool = betterproto.bool_field(1)
    retcode: int = betterproto.int32_field(7)
    play_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class ScenePlayGuestReplyNotify(betterproto.Message):
    play_id: int = betterproto.uint32_field(4)
    guest_uid: int = betterproto.uint32_field(5)
    is_agree: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class ScenePlayInfo(betterproto.Message):
    is_open: bool = betterproto.bool_field(14)
    entry_id: int = betterproto.uint32_field(10)
    play_id: int = betterproto.uint32_field(15)
    play_type: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class ScenePlayInfoListNotify(betterproto.Message):
    play_info_list: List["ScenePlayInfo"] = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class ScenePlayInviteResultNotify(betterproto.Message):
    play_id: int = betterproto.uint32_field(14)
    is_all_agree: bool = betterproto.bool_field(11)


@dataclass(eq=False, repr=False)
class ScenePlayOutofRegionNotify(betterproto.Message):
    play_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class ScenePlayOwnerCheckReq(betterproto.Message):
    play_id: int = betterproto.uint32_field(10)
    is_skip_match: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class ScenePlayOwnerCheckRsp(betterproto.Message):
    wrong_uid: int = betterproto.uint32_field(1)
    param_list: List[int] = betterproto.uint32_field(6)
    retcode: int = betterproto.int32_field(7)
    is_skip_match: bool = betterproto.bool_field(14)
    play_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ScenePlayOwnerInviteNotify(betterproto.Message):
    invite_cd: int = betterproto.uint32_field(12)
    play_id: int = betterproto.uint32_field(6)
    is_remain_reward: bool = betterproto.bool_field(14)


@dataclass(eq=False, repr=False)
class ScenePlayOwnerStartInviteReq(betterproto.Message):
    is_skip_match: bool = betterproto.bool_field(4)
    play_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class ScenePlayOwnerStartInviteRsp(betterproto.Message):
    play_id: int = betterproto.uint32_field(7)
    retcode: int = betterproto.int32_field(10)
    is_skip_match: bool = betterproto.bool_field(15)


@dataclass(eq=False, repr=False)
class ScenePointUnlockNotify(betterproto.Message):
    hide_point_list: List[int] = betterproto.uint32_field(10)
    locked_point_list: List[int] = betterproto.uint32_field(5)
    scene_id: int = betterproto.uint32_field(11)
    point_list: List[int] = betterproto.uint32_field(6)
    unhide_point_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SceneRouteChangeInfo(betterproto.Message):
    is_forward: bool = betterproto.bool_field(15)
    type: int = betterproto.uint32_field(11)
    point_list: List["RoutePointChangeInfo"] = betterproto.message_field(10)
    route_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class SceneRouteChangeNotify(betterproto.Message):
    scene_time: int = betterproto.uint32_field(3)
    route_list: List["SceneRouteChangeInfo"] = betterproto.message_field(4)
    scene_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class SceneTeamAvatar(betterproto.Message):
    scene_avatar_info: "SceneAvatarInfo" = betterproto.message_field(14)
    avatar_info: "AvatarInfo" = betterproto.message_field(15)
    entity_id: int = betterproto.uint32_field(10)
    unk3300_emagokcppkn: "AbilitySyncStateInfo" = betterproto.message_field(6)
    ability_control_block: "AbilityControlBlock" = betterproto.message_field(2)
    unk3300_oncnajbjgkm: bool = betterproto.bool_field(8)
    unk3300_fcddpfadnai: "AbilitySyncStateInfo" = betterproto.message_field(4)
    weapon_guid: int = betterproto.uint64_field(12)
    player_uid: int = betterproto.uint32_field(1)
    scene_entity_info: "SceneEntityInfo" = betterproto.message_field(11)
    weapon_entity_id: int = betterproto.uint32_field(5)
    scene_id: int = betterproto.uint32_field(9)
    unk3300_ilechhkdiem: bool = betterproto.bool_field(625)
    avatar_guid: int = betterproto.uint64_field(3)
    unk3300_gengjlpjccn: bool = betterproto.bool_field(13)
    server_buff_list: List["ServerBuff"] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class SceneTeamUpdateNotify(betterproto.Message):
    scene_team_avatar_list: List["SceneTeamAvatar"] = betterproto.message_field(11)
    is_in_mp: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class SceneTimeNotify(betterproto.Message):
    scene_time: int = betterproto.uint64_field(10)
    scene_id: int = betterproto.uint32_field(14)
    is_paused: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class SceneTransToPointReq(betterproto.Message):
    point_id: int = betterproto.uint32_field(9)
    scene_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class SceneTransToPointRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)
    point_id: int = betterproto.uint32_field(4)
    scene_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class SceneWeatherForecastReq(betterproto.Message):
    weather_area_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class SceneWeatherForecastRsp(betterproto.Message):
    forecast_climate_list: List[int] = betterproto.uint32_field(15)
    retcode: int = betterproto.int32_field(12)
    next_climate_time: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class SeaLampCoinNotify(betterproto.Message):
    sea_lamp_coin: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class SeaLampContributeItemReq(betterproto.Message):
    item_list: List["ItemParam"] = betterproto.message_field(11)
    activity_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SeaLampContributeItemRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(4)
    unk3300_aiinhbhnhoi: int = betterproto.uint32_field(11)
    add_progress: int = betterproto.uint32_field(5)
    unk3300_lphaloglgal: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class SeaLampFlyLampNotify(betterproto.Message):
    pos: "Vector" = betterproto.message_field(4)
    item_id: int = betterproto.uint32_field(3)
    item_num: int = betterproto.uint32_field(15)
    param: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class SeaLampFlyLampReq(betterproto.Message):
    pos: "Vector" = betterproto.message_field(5)
    item_num: int = betterproto.uint32_field(15)
    item_id: int = betterproto.uint32_field(7)
    param: int = betterproto.int32_field(14)


@dataclass(eq=False, repr=False)
class SeaLampFlyLampRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(3)
    item_num: int = betterproto.uint32_field(9)
    item_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class SeaLampPopularityNotify(betterproto.Message):
    popularity: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class SeaLampTakeContributionRewardReq(betterproto.Message):
    config_id: int = betterproto.uint32_field(15)
    activity_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class SeaLampTakeContributionRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(9)
    config_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class SeaLampTakePhaseRewardReq(betterproto.Message):
    phase_id: int = betterproto.uint32_field(9)
    activity_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class SeaLampTakePhaseRewardRsp(betterproto.Message):
    phase_id: int = betterproto.uint32_field(13)
    retcode: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class SealBattleBeginNotify(betterproto.Message):
    battle_type: "SealBattleType" = betterproto.enum_field(10)
    seal_entity_id: int = betterproto.uint32_field(7)
    seal_max_progress: int = betterproto.uint32_field(13)
    seal_radius: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class SealBattleEndNotify(betterproto.Message):
    seal_entity_id: int = betterproto.uint32_field(11)
    is_win: bool = betterproto.bool_field(12)


@dataclass(eq=False, repr=False)
class SealBattleProgressNotify(betterproto.Message):
    end_time: int = betterproto.uint32_field(5)
    seal_radius: int = betterproto.uint32_field(1)
    max_progress: int = betterproto.uint32_field(9)
    seal_entity_id: int = betterproto.uint32_field(6)
    progress: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class SearchCustomDungeonReq(betterproto.Message):
    dungeon_code: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class SearchCustomDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(2)
    custom_dungeon_brief: "OtherCustomDungeonBrief" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class SeeMonsterReq(betterproto.Message):
    monster_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class SeeMonsterRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(12)


@dataclass(eq=False, repr=False)
class SelectAsterMidDifficultyReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(4)
    difficulty_id: int = betterproto.uint32_field(2)
    gadget_entity_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class SelectAsterMidDifficultyRsp(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(15)
    gadget_entity_id: int = betterproto.uint32_field(12)
    retcode: int = betterproto.int32_field(7)
    difficulty_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class SelectEffigyChallengeConditionReq(betterproto.Message):
    challenge_id: int = betterproto.uint32_field(6)
    condition_id_list: List[int] = betterproto.uint32_field(1)
    difficulty_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class SelectEffigyChallengeConditionRsp(betterproto.Message):
    difficulty_id: int = betterproto.uint32_field(10)
    challenge_id: int = betterproto.uint32_field(7)
    condition_id_list: List[int] = betterproto.uint32_field(11)
    retcode: int = betterproto.int32_field(9)


@dataclass(eq=False, repr=False)
class SelectRoguelikeDungeonCardReq(betterproto.Message):
    card_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class SelectRoguelikeDungeonCardRsp(betterproto.Message):
    card_id: int = betterproto.uint32_field(14)
    retcode: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class SelectWorktopOptionReq(betterproto.Message):
    option_id: int = betterproto.uint32_field(7)
    gadget_entity_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class SelectWorktopOptionRsp(betterproto.Message):
    option_id: int = betterproto.uint32_field(10)
    retcode: int = betterproto.int32_field(4)
    gadget_entity_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class ServerAnnounceNotify(betterproto.Message):
    announce_data_list: List["AnnounceData"] = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class ServerAnnounceRevokeNotify(betterproto.Message):
    config_id_list: List[int] = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class ServerBuffChangeNotify(betterproto.Message):
    server_buff_list: List["ServerBuff"] = betterproto.message_field(4)
    is_creature_buff: bool = betterproto.bool_field(8)
    entity_id_list: List[int] = betterproto.uint32_field(6)
    server_buff_change_type: "ServerBuffChangeNotifyServerBuffChangeType" = (
        betterproto.enum_field(9)
    )
    avatar_guid_list: List[int] = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class ServerCombatEndNotify(betterproto.Message):
    combat_end_type_list: List[int] = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class ServerCondMeetQuestListUpdateNotify(betterproto.Message):
    unk3300_mgbdkfmbgbo: List[int] = betterproto.uint32_field(10)
    unk3300_hiemkejofpo: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ServerDisconnectClientNotify(betterproto.Message):
    data: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ServerGlobalValueChangeNotify(betterproto.Message):
    key_hash: int = betterproto.uint32_field(3)
    value: float = betterproto.float_field(15)
    entity_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class ServerLogNotify(betterproto.Message):
    server_log: str = betterproto.string_field(11)
    log_level: "ServerLogLevel" = betterproto.enum_field(5)
    log_type: "ServerLogType" = betterproto.enum_field(9)


@dataclass(eq=False, repr=False)
class ServerMessageNotify(betterproto.Message):
    index: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class ServerTimeNotify(betterproto.Message):
    server_time: int = betterproto.uint64_field(13)


@dataclass(eq=False, repr=False)
class ServerTryCancelGeneralMatchNotify(betterproto.Message):
    match_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class ServerUpdateGlobalValueNotify(betterproto.Message):
    key_hash: int = betterproto.uint32_field(8)
    update_type: "ServerUpdateGlobalValueNotifyUpdateType" = betterproto.enum_field(9)
    delta: float = betterproto.float_field(6)
    value: float = betterproto.float_field(3)
    entity_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class SetBattlePassViewedReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class SetBattlePassViewedRsp(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(13)
    retcode: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class SetChatEmojiCollectionReq(betterproto.Message):
    chat_emoji_collection_data: "ChatEmojiCollectionData" = betterproto.message_field(
        13
    )


@dataclass(eq=False, repr=False)
class SetChatEmojiCollectionRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class SetCodexPushtipsReadReq(betterproto.Message):
    codex_id: int = betterproto.uint32_field(8)
    type_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SetCodexPushtipsReadRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(9)
    type_id: int = betterproto.uint32_field(4)
    codex_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class SetCoopChapterViewedReq(betterproto.Message):
    chapter_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class SetCoopChapterViewedRsp(betterproto.Message):
    chapter_id: int = betterproto.uint32_field(9)
    retcode: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class SetCurExpeditionChallengeIdReq(betterproto.Message):
    id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class SetCurExpeditionChallengeIdRsp(betterproto.Message):
    id: int = betterproto.uint32_field(13)
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class SetEntityClientDataNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(15)
    entity_client_data: "EntityClientData" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class SetEquipLockStateReq(betterproto.Message):
    target_equip_guid: int = betterproto.uint64_field(10)
    is_locked: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class SetEquipLockStateRsp(betterproto.Message):
    target_equip_guid: int = betterproto.uint64_field(1)
    is_locked: bool = betterproto.bool_field(3)
    retcode: int = betterproto.int32_field(12)


@dataclass(eq=False, repr=False)
class SetFriendEnterHomeOptionReq(betterproto.Message):
    option: "FriendEnterHomeOption" = betterproto.enum_field(8)


@dataclass(eq=False, repr=False)
class SetFriendEnterHomeOptionRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class SetFriendRemarkNameReq(betterproto.Message):
    uid: int = betterproto.uint32_field(14)
    remark_name: str = betterproto.string_field(10)


@dataclass(eq=False, repr=False)
class SetFriendRemarkNameRsp(betterproto.Message):
    remark_name: str = betterproto.string_field(13)
    is_clear_remark: bool = betterproto.bool_field(12)
    uid: int = betterproto.uint32_field(1)
    retcode: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class SetH5ActivityRedDotTimestampReq(betterproto.Message):
    client_red_dot_timestamp: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SetH5ActivityRedDotTimestampRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class SetIsAutoUnlockSpecificEquipReq(betterproto.Message):
    is_auto_unlock_specific_equip: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class SetIsAutoUnlockSpecificEquipRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class SetLimitOptimizationNotify(betterproto.Message):
    is_active: bool = betterproto.bool_field(10)


@dataclass(eq=False, repr=False)
class SetNameCardReq(betterproto.Message):
    name_card_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class SetNameCardRsp(betterproto.Message):
    name_card_id: int = betterproto.uint32_field(9)
    retcode: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class SetOpenStateReq(betterproto.Message):
    key: int = betterproto.uint32_field(10)
    value: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class SetOpenStateRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(4)
    value: int = betterproto.uint32_field(5)
    key: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class SetPlayerBirthdayReq(betterproto.Message):
    birthday: "Birthday" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class SetPlayerBirthdayRsp(betterproto.Message):
    birthday: "Birthday" = betterproto.message_field(1)
    retcode: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class SetPlayerBornDataReq(betterproto.Message):
    nick_name: str = betterproto.string_field(4)
    avatar_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class SetPlayerBornDataRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class SetPlayerHeadImageReq(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class SetPlayerHeadImageRsp(betterproto.Message):
    profile_picture: "ProfilePicture" = betterproto.message_field(14)
    avatar_id: int = betterproto.uint32_field(7)
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class SetPlayerNameReq(betterproto.Message):
    nick_name: str = betterproto.string_field(13)


@dataclass(eq=False, repr=False)
class SetPlayerNameRsp(betterproto.Message):
    nick_name: str = betterproto.string_field(4)
    retcode: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class SetPlayerPropReq(betterproto.Message):
    prop_list: List["PropValue"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class SetPlayerPropRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class SetPlayerSignatureReq(betterproto.Message):
    signature: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class SetPlayerSignatureRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(6)
    signature: str = betterproto.string_field(12)


@dataclass(eq=False, repr=False)
class SetSceneWeatherAreaReq(betterproto.Message):
    weather_value_map: Dict[int, str] = betterproto.map_field(
        8, betterproto.TYPE_UINT32, betterproto.TYPE_STRING
    )
    weather_gadget_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class SetSceneWeatherAreaRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(12)


@dataclass(eq=False, repr=False)
class SetUpAvatarTeamReq(betterproto.Message):
    team_id: int = betterproto.uint32_field(13)
    cur_avatar_guid: int = betterproto.uint64_field(5)
    avatar_team_guid_list: List[int] = betterproto.uint64_field(14)


@dataclass(eq=False, repr=False)
class SetUpAvatarTeamRsp(betterproto.Message):
    team_id: int = betterproto.uint32_field(10)
    avatar_team_guid_list: List[int] = betterproto.uint64_field(9)
    retcode: int = betterproto.int32_field(5)
    cur_avatar_guid: int = betterproto.uint64_field(11)


@dataclass(eq=False, repr=False)
class SetUpLunchBoxWidgetReq(betterproto.Message):
    lunch_box_data: "LunchBoxData" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class SetUpLunchBoxWidgetRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(7)
    lunch_box_data: "LunchBoxData" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SetWidgetSlotReq(betterproto.Message):
    material_id: int = betterproto.uint32_field(2)
    tag_list: List["WidgetSlotTag"] = betterproto.enum_field(13)
    op: "WidgetSlotOp" = betterproto.enum_field(14)


@dataclass(eq=False, repr=False)
class SetWidgetSlotRsp(betterproto.Message):
    material_id: int = betterproto.uint32_field(4)
    retcode: int = betterproto.int32_field(1)
    tag_list: List["WidgetSlotTag"] = betterproto.enum_field(15)
    op: "WidgetSlotOp" = betterproto.enum_field(5)


@dataclass(eq=False, repr=False)
class ShowClientGuideNotify(betterproto.Message):
    guide_name: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ShowClientTutorialNotify(betterproto.Message):
    tutorial_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ShowCommonTipsNotify(betterproto.Message):
    title: str = betterproto.string_field(3)
    content: str = betterproto.string_field(9)
    close_time: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class ShowMessageNotify(betterproto.Message):
    msg_id: "SvrMsgId" = betterproto.enum_field(9)
    params: List["MsgParam"] = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class ShowTemplateReminderNotify(betterproto.Message):
    unk3300_labcnbegced: bool = betterproto.bool_field(6)
    param_list: List[int] = betterproto.int32_field(4)
    template_reminder_id: int = betterproto.uint32_field(2)
    unk3300_aeniibbbpjc: bool = betterproto.bool_field(12)
    param_uid_list: List[int] = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class SignatureAuditConfigNotify(betterproto.Message):
    is_open: bool = betterproto.bool_field(6)
    submit_limit: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class SignInInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class SignInInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(3)
    sign_in_info_list: List["SignInInfo"] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class SingleRestartBrickBreakerReq(betterproto.Message):
    is_dungeon: bool = betterproto.bool_field(13)
    level_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class SingleRestartBrickBreakerRsp(betterproto.Message):
    level_id: int = betterproto.uint32_field(8)
    retcode: int = betterproto.int32_field(15)
    is_dungeon: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class SingleStartBrickBreakerReq(betterproto.Message):
    is_dungeon: bool = betterproto.bool_field(13)
    level_id: int = betterproto.uint32_field(8)
    chosen_skill_list: List[int] = betterproto.uint32_field(12)
    chosen_avatar_list: List[int] = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class SingleStartBrickBreakerRsp(betterproto.Message):
    level_id: int = betterproto.uint32_field(10)
    is_dungeon: bool = betterproto.bool_field(9)
    retcode: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class SkyCrystalDetectorDataUpdateNotify(betterproto.Message):
    sky_crystal_detector_data: "SkyCrystalDetectorData" = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class SocialDataNotify(betterproto.Message):
    is_have_first_share: bool = betterproto.bool_field(13)


@dataclass(eq=False, repr=False)
class SpiceActivityFinishMakeSpiceReq(betterproto.Message):
    stage_id: int = betterproto.uint32_field(11)
    left_material_id_list: List[int] = betterproto.uint32_field(9)
    is_success: bool = betterproto.bool_field(10)
    left_turns: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class SpiceActivityFinishMakeSpiceRsp(betterproto.Message):
    stage_id: int = betterproto.uint32_field(8)
    retcode: int = betterproto.int32_field(10)
    is_success: bool = betterproto.bool_field(9)


@dataclass(eq=False, repr=False)
class SpiceActivityGivingRecordNotify(betterproto.Message):
    unk3300_cihiajegcbo: int = betterproto.uint32_field(3)
    unk3300_lakpmmipbmi: int = betterproto.uint32_field(2)
    avatar_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class SpiceActivityProcessFoodReq(betterproto.Message):
    normal_food_list: List["ItemParam"] = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class SpiceActivityProcessFoodRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)
    normal_food_list: List["ItemParam"] = betterproto.message_field(9)
    special_food_list: List["ItemParam"] = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class SpringUseReq(betterproto.Message):
    guid: int = betterproto.uint64_field(12)


@dataclass(eq=False, repr=False)
class SpringUseRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(5)
    guid: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class StartArenaChallengeLevelReq(betterproto.Message):
    unk3300_fdfnflakong: int = betterproto.uint32_field(13)
    gadget_entity_id: int = betterproto.uint32_field(3)
    unk3300_dbhaghmmlai: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class StartArenaChallengeLevelRsp(betterproto.Message):
    unk3300_fdfnflakong: int = betterproto.uint32_field(4)
    retcode: int = betterproto.int32_field(5)
    unk3300_dbhaghmmlai: int = betterproto.uint32_field(13)
    gadget_entity_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class StartBuoyantCombatGalleryReq(betterproto.Message):
    gallery_level: int = betterproto.uint32_field(4)
    gallery_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class StartBuoyantCombatGalleryRsp(betterproto.Message):
    gallery_level: int = betterproto.uint32_field(6)
    retcode: int = betterproto.int32_field(5)
    gallery_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class StartCoopPointReq(betterproto.Message):
    coop_point: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class StartCoopPointRsp(betterproto.Message):
    start_main_coop: "MainCoop" = betterproto.message_field(4)
    retcode: int = betterproto.int32_field(2)
    is_start: bool = betterproto.bool_field(5)
    coop_point: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class StartEffigyChallengeReq(betterproto.Message):
    challenge_id: int = betterproto.uint32_field(10)
    difficulty_id: int = betterproto.uint32_field(3)
    point_id: int = betterproto.uint32_field(1)
    condition_id_list: List[int] = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class StartEffigyChallengeRsp(betterproto.Message):
    point_id: int = betterproto.uint32_field(4)
    condition_id_list: List[int] = betterproto.uint32_field(9)
    difficulty_id: int = betterproto.uint32_field(12)
    retcode: int = betterproto.int32_field(5)
    challenge_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class StartFishingReq(betterproto.Message):
    fish_pool_id: int = betterproto.uint32_field(2)
    rod_entity_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class StartFishingRsp(betterproto.Message):
    fish_pool_id: int = betterproto.uint32_field(3)
    retcode: int = betterproto.int32_field(10)


@dataclass(eq=False, repr=False)
class StartRogueDiaryPlayReq(betterproto.Message):
    difficulty: int = betterproto.uint32_field(5)
    stage_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class StartRogueDiaryPlayRsp(betterproto.Message):
    avatar_list: List["RogueDiaryAvatar"] = betterproto.message_field(15)
    retcode: int = betterproto.int32_field(6)
    trial_avatar_list: List["RogueDiaryAvatar"] = betterproto.message_field(9)
    rand_card_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class StartRogueDiaryRoomReq(betterproto.Message):
    is_select_hard: bool = betterproto.bool_field(10)
    room_difficulty: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class StartRogueDiaryRoomRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class StartRogueEliteCellChallengeReq(betterproto.Message):
    difficulty: "RogueEliteCellDifficultyType" = betterproto.enum_field(6)
    cell_id: int = betterproto.uint32_field(10)
    dungeon_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class StartRogueEliteCellChallengeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(6)
    cell_id: int = betterproto.uint32_field(8)
    dungeon_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class StartRogueNormalCellChallengeReq(betterproto.Message):
    cell_id: int = betterproto.uint32_field(8)
    dungeon_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class StartRogueNormalCellChallengeRsp(betterproto.Message):
    dungeon_id: int = betterproto.uint32_field(13)
    cell_id: int = betterproto.uint32_field(8)
    retcode: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class StopReminderNotify(betterproto.Message):
    reminder_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class StoreCustomDungeonReq(betterproto.Message):
    dungeon_guid: int = betterproto.uint64_field(12)
    is_cancel_store: bool = betterproto.bool_field(11)


@dataclass(eq=False, repr=False)
class StoreCustomDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class StoreItemChangeNotify(betterproto.Message):
    store_type: "StoreType" = betterproto.enum_field(4)
    item_list: List["Item"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class StoreItemDelNotify(betterproto.Message):
    store_type: "StoreType" = betterproto.enum_field(6)
    guid_list: List[int] = betterproto.uint64_field(8)


@dataclass(eq=False, repr=False)
class StoreWeightLimitNotify(betterproto.Message):
    reliquary_count_limit: int = betterproto.uint32_field(14)
    unk3300_nikmcblhfnj: int = betterproto.uint32_field(10)
    unk3300_oonmfcgdmmf: int = betterproto.uint32_field(5)
    unk3300_jgpoddekapb: int = betterproto.uint32_field(1)
    weight_limit: int = betterproto.uint32_field(8)
    store_type: "StoreType" = betterproto.enum_field(9)


@dataclass(eq=False, repr=False)
class SubmitInferenceWordReq(betterproto.Message):
    page_id: int = betterproto.uint32_field(10)
    word_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class SubmitInferenceWordRsp(betterproto.Message):
    page_id: int = betterproto.uint32_field(4)
    retcode: int = betterproto.int32_field(3)
    conclusion_id: int = betterproto.uint32_field(12)
    word_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class SummerTimeFloatSignalPositionNotify(betterproto.Message):
    is_transfer_anchor: bool = betterproto.bool_field(6)
    float_signal_id: int = betterproto.uint32_field(15)
    position: "Vector" = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class SummerTimeFloatSignalUpdateNotify(betterproto.Message):
    is_transfer_anchor: bool = betterproto.bool_field(1)
    position: "Vector" = betterproto.message_field(7)
    float_signal_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class SummerTimeSprintBoatRestartReq(betterproto.Message):
    group_id: int = betterproto.uint32_field(13)
    schedule_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SummerTimeSprintBoatRestartRsp(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(13)
    group_id: int = betterproto.uint32_field(11)
    retcode: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class SummerTimeSprintBoatSettleNotify(betterproto.Message):
    score: int = betterproto.uint32_field(6)
    left_time: int = betterproto.uint32_field(2)
    is_success: bool = betterproto.bool_field(4)
    group_id: int = betterproto.uint32_field(5)
    unk3300_plfmjpnppli: int = betterproto.uint32_field(12)
    total_num: int = betterproto.uint32_field(10)
    is_new_record: bool = betterproto.bool_field(15)
    unk3300_meekfjjioke: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class SummerTimeV2BoatGallerySettleInfo(betterproto.Message):
    reason: "GalleryStopReason" = betterproto.enum_field(10)
    param2: int = betterproto.uint32_field(12)
    used_time: int = betterproto.uint32_field(4)
    param1: int = betterproto.uint32_field(7)
    gallery_id: int = betterproto.uint32_field(11)
    param3: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class SummerTimeV2BoatSettleNotify(betterproto.Message):
    is_new_record: bool = betterproto.bool_field(15)
    gallery_id: int = betterproto.uint32_field(2)
    settle_info: "SummerTimeV2BoatGallerySettleInfo" = betterproto.message_field(13)
    stage_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class SummerTimeV2RestartBoatGalleryReq(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SummerTimeV2RestartBoatGalleryRsp(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(10)
    retcode: int = betterproto.int32_field(12)


@dataclass(eq=False, repr=False)
class SummerTimeV2RestartDungeonReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class SummerTimeV2RestartDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class SumoDungeonAvatar(betterproto.Message):
    is_alive: bool = betterproto.bool_field(13)
    is_trial: bool = betterproto.bool_field(4)
    avatar_guid: int = betterproto.uint64_field(10)


@dataclass(eq=False, repr=False)
class SumoDungeonSettleNotify(betterproto.Message):
    is_new_record: bool = betterproto.bool_field(4)
    kill_monster_num: int = betterproto.uint32_field(12)
    difficulty_id: int = betterproto.uint32_field(3)
    final_score: int = betterproto.uint32_field(2)
    kill_elite_monster_num: int = betterproto.uint32_field(15)
    stage_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class SumoDungeonTeam(betterproto.Message):
    dungeon_avatar_list: List["SumoDungeonAvatar"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class SumoEnterDungeonNotify(betterproto.Message):
    unk3300_djbjacghgdm: int = betterproto.uint32_field(15)
    unk3300_cbamlhdmkjf: int = betterproto.uint32_field(7)
    dungeon_team_list: List["SumoDungeonTeam"] = betterproto.message_field(14)
    unk3300_bnjbighijoc: int = betterproto.uint32_field(5)
    activity_id: int = betterproto.uint32_field(3)
    stage_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class SumoLeaveDungeonNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class SumoRestartDungeonReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class SumoRestartDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(5)
    point_id: int = betterproto.uint32_field(8)
    dungeon_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class SumoSaveTeamReq(betterproto.Message):
    difficulty_id: int = betterproto.uint32_field(6)
    stage_id: int = betterproto.uint32_field(14)
    activity_id: int = betterproto.uint32_field(1)
    team_list: List["SumoTeamData"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SumoSaveTeamRsp(betterproto.Message):
    stage_id: int = betterproto.uint32_field(15)
    activity_id: int = betterproto.uint32_field(4)
    retcode: int = betterproto.int32_field(9)
    team_list: List["SumoTeamData"] = betterproto.message_field(2)
    difficulty_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class SumoSelectTeamAndEnterDungeonReq(betterproto.Message):
    team_list: List["SumoTeamData"] = betterproto.message_field(15)
    activity_id: int = betterproto.uint32_field(1)
    difficulty_id: int = betterproto.uint32_field(5)
    stage_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class SumoSelectTeamAndEnterDungeonRsp(betterproto.Message):
    difficulty_id: int = betterproto.uint32_field(12)
    activity_id: int = betterproto.uint32_field(9)
    stage_id: int = betterproto.uint32_field(6)
    retcode: int = betterproto.int32_field(5)
    team_list: List["SumoTeamData"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class SumoSetNoSwitchPunishTimeNotify(betterproto.Message):
    stage_id: int = betterproto.uint32_field(15)
    unk3300_cbamlhdmkjf: int = betterproto.uint32_field(10)
    activity_id: int = betterproto.uint32_field(5)
    unk3300_bnjbighijoc: int = betterproto.uint32_field(3)
    unk3300_djbjacghgdm: int = betterproto.uint32_field(9)
    dungeon_team_list: List["SumoDungeonTeam"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SumoSwitchTeamReq(betterproto.Message):
    stage_id: int = betterproto.uint32_field(8)
    activity_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class SumoSwitchTeamRsp(betterproto.Message):
    unk3300_bnjbighijoc: int = betterproto.uint32_field(8)
    stage_id: int = betterproto.uint32_field(2)
    activity_id: int = betterproto.uint32_field(15)
    unk3300_djbjacghgdm: int = betterproto.uint32_field(1)
    dungeon_team_list: List["SumoDungeonTeam"] = betterproto.message_field(12)
    retcode: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class SyncScenePlayTeamEntityNotify(betterproto.Message):
    scene_id: int = betterproto.uint32_field(7)
    entity_info_list: List["PlayTeamEntityInfo"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TeamEntityInfo(betterproto.Message):
    team_entity_id: int = betterproto.uint32_field(3)
    authority_peer_id: int = betterproto.uint32_field(12)
    team_ability_info: "AbilitySyncStateInfo" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class SyncTeamEntityNotify(betterproto.Message):
    team_entity_info_list: List["TeamEntityInfo"] = betterproto.message_field(10)
    scene_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TakeAchievementGoalRewardReq(betterproto.Message):
    id_list: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class TakeAchievementGoalRewardRsp(betterproto.Message):
    id_list: List[int] = betterproto.uint32_field(2)
    item_list: List["ItemParam"] = betterproto.message_field(1)
    retcode: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class TakeAchievementRewardReq(betterproto.Message):
    id_list: List[int] = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class TakeAchievementRewardRsp(betterproto.Message):
    item_list: List["ItemParam"] = betterproto.message_field(6)
    retcode: int = betterproto.int32_field(1)
    id_list: List[int] = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class TakeAsterSpecialRewardReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class TakeAsterSpecialRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(5)
    schedule_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TakeBackGivingItemReq(betterproto.Message):
    giving_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TakeBackGivingItemRsp(betterproto.Message):
    giving_id: int = betterproto.uint32_field(6)
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class TakeBattlePassMissionPointReq(betterproto.Message):
    mission_id_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class TakeBattlePassMissionPointRsp(betterproto.Message):
    mission_id_list: List[int] = betterproto.uint32_field(13)
    retcode: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class TakeBattlePassRewardReq(betterproto.Message):
    take_option_list: List["BattlePassRewardTakeOption"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class TakeBattlePassRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(6)
    take_option_list: List["BattlePassRewardTakeOption"] = betterproto.message_field(7)
    item_list: List["ItemParam"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class TakeCityReputationExploreRewardReq(betterproto.Message):
    explore_id_list: List[int] = betterproto.uint32_field(5)
    city_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class TakeCityReputationExploreRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(5)
    explore_id_list: List[int] = betterproto.uint32_field(12)
    city_id: int = betterproto.uint32_field(1)
    item_list: List["ItemParam"] = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class TakeCityReputationLevelRewardReq(betterproto.Message):
    level: int = betterproto.uint32_field(6)
    city_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class TakeCityReputationLevelRewardRsp(betterproto.Message):
    level: int = betterproto.uint32_field(11)
    item_list: List["ItemParam"] = betterproto.message_field(2)
    city_id: int = betterproto.uint32_field(6)
    retcode: int = betterproto.int32_field(14)


@dataclass(eq=False, repr=False)
class TakeCityReputationParentQuestReq(betterproto.Message):
    city_id: int = betterproto.uint32_field(8)
    parent_quest_list: List[int] = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class TakeCityReputationParentQuestRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(3)
    parent_quest_list: List[int] = betterproto.uint32_field(2)
    city_id: int = betterproto.uint32_field(14)
    item_list: List["ItemParam"] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class TakeCompoundOutputReq(betterproto.Message):
    compound_group_id: int = betterproto.uint32_field(4)
    compound_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class TakeCompoundOutputRsp(betterproto.Message):
    item_list: List["ItemParam"] = betterproto.message_field(14)
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class TakeCoopRewardReq(betterproto.Message):
    reward_config_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class TakeCoopRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(11)
    reward_config_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class TakeDeliveryDailyRewardReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class TakeDeliveryDailyRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(4)
    schedule_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class TakeEffigyFirstPassRewardReq(betterproto.Message):
    challenge_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class TakeEffigyFirstPassRewardRsp(betterproto.Message):
    challenge_id: int = betterproto.uint32_field(10)
    retcode: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class TakeEffigyRewardReq(betterproto.Message):
    reward_index: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TakeEffigyRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(5)
    reward_index: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class TakeFirstShareRewardReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class TakeFirstShareRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(14)


@dataclass(eq=False, repr=False)
class TakeFurnitureMakeReq(betterproto.Message):
    index: int = betterproto.uint32_field(12)
    is_fast_finish: bool = betterproto.bool_field(2)
    make_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class TakeFurnitureMakeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)
    unk3300_jdhfpcbogfh: List["ItemParam"] = betterproto.message_field(5)
    furniture_make_slot: "FurnitureMakeSlot" = betterproto.message_field(14)
    unk3300_eoldjamhdhm: List["ItemParam"] = betterproto.message_field(10)
    make_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class TakeHuntingOfferReq(betterproto.Message):
    city_id: int = betterproto.uint32_field(1)
    hunting_pair: "HuntingPair" = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class TakeHuntingOfferRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(11)
    city_id: int = betterproto.uint32_field(3)
    hunting_pair: "HuntingPair" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class TakeInvestigationRewardReq(betterproto.Message):
    id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class TakeInvestigationRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(11)
    id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class TakeInvestigationTargetRewardReq(betterproto.Message):
    quest_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TakeInvestigationTargetRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(3)
    quest_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class TakeMaterialDeleteReturnReq(betterproto.Message):
    type: "MaterialDeleteReturnType" = betterproto.enum_field(11)


@dataclass(eq=False, repr=False)
class TakeMaterialDeleteReturnRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class TakeoffEquipReq(betterproto.Message):
    slot: int = betterproto.uint32_field(9)
    avatar_guid: int = betterproto.uint64_field(13)


@dataclass(eq=False, repr=False)
class TakeoffEquipRsp(betterproto.Message):
    slot: int = betterproto.uint32_field(3)
    retcode: int = betterproto.int32_field(10)
    avatar_guid: int = betterproto.uint64_field(7)


@dataclass(eq=False, repr=False)
class TakeOfferingLevelRewardReq(betterproto.Message):
    level: int = betterproto.uint32_field(14)
    offering_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class TakeOfferingLevelRewardRsp(betterproto.Message):
    item_list: List["ItemParam"] = betterproto.message_field(4)
    offering_id: int = betterproto.uint32_field(12)
    take_level: int = betterproto.uint32_field(10)
    retcode: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class TakePlayerLevelRewardReq(betterproto.Message):
    level: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class TakePlayerLevelRewardRsp(betterproto.Message):
    reward_id: int = betterproto.uint32_field(10)
    level: int = betterproto.uint32_field(15)
    retcode: int = betterproto.int32_field(12)


@dataclass(eq=False, repr=False)
class TakeRegionSearchRewardReq(betterproto.Message):
    id: int = betterproto.uint32_field(8)
    search_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class TakeRegionSearchRewardRsp(betterproto.Message):
    search_id: int = betterproto.uint32_field(8)
    retcode: int = betterproto.int32_field(3)
    id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TakeResinCardDailyRewardReq(betterproto.Message):
    product_config_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TakeResinCardDailyRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(4)
    item_vec: List["ItemParam"] = betterproto.message_field(15)
    product_config_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class TakeReunionFirstGiftRewardReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class TakeReunionFirstGiftRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(4)
    reward_id: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class TakeReunionMissionRewardReq(betterproto.Message):
    mission_id: int = betterproto.uint32_field(3)
    reward_id: int = betterproto.uint32_field(5)
    reward_index: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class TakeReunionMissionRewardRsp(betterproto.Message):
    reward_id: int = betterproto.uint32_field(13)
    mission_info: "ReunionMissionInfo" = betterproto.message_field(2)
    reward_index: int = betterproto.uint32_field(6)
    retcode: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class TakeReunionSignInRewardReq(betterproto.Message):
    reward_day: int = betterproto.uint32_field(1)
    config_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class TakeReunionSignInRewardRsp(betterproto.Message):
    sign_in_info: "ReunionSignInInfo" = betterproto.message_field(13)
    retcode: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class TakeReunionWatcherRewardReq(betterproto.Message):
    watcher_id: int = betterproto.uint32_field(14)
    mission_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class TakeReunionWatcherRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)
    mission_id: int = betterproto.uint32_field(14)
    watcher_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class TanukiTravelFinishGuideQuestNotify(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TaskVar(betterproto.Message):
    key: int = betterproto.uint32_field(2)
    value_list: List[int] = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class TaskVarNotify(betterproto.Message):
    task_var_list: List["TaskVar"] = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class TeamResonanceChangeNotify(betterproto.Message):
    info_list: List["AvatarTeamResonanceInfo"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class ToTheMoonObstacleInfo(betterproto.Message):
    handle_id: int = betterproto.int32_field(1)
    type: "ToTheMoonObstacleInfoShapeType" = betterproto.enum_field(8)
    half_extents: "Vector" = betterproto.message_field(7)
    center: "Vector" = betterproto.message_field(11)
    rotation: "MathQuaternion" = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class ToTheMoonAddObstacleReq(betterproto.Message):
    use_edge: bool = betterproto.bool_field(7)
    obstacle: "ToTheMoonObstacleInfo" = betterproto.message_field(8)
    scene_id: int = betterproto.uint32_field(13)
    query_id: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class ToTheMoonAddObstacleRsp(betterproto.Message):
    dynamic_nodes: "DynamicNodes" = betterproto.message_field(7)
    retcode: int = betterproto.int32_field(11)
    query_id: int = betterproto.int32_field(9)


@dataclass(eq=False, repr=False)
class ToTheMoonEnterSceneReq(betterproto.Message):
    version: int = betterproto.uint32_field(11)
    scene_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class ToTheMoonEnterSceneRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class ToTheMoonObstaclesModifyNotify(betterproto.Message):
    add_obstacles: List["ToTheMoonObstacleInfo"] = betterproto.message_field(3)
    use_edge: bool = betterproto.bool_field(7)
    scene_id: int = betterproto.uint32_field(4)
    remove_obstacle_ids: List[int] = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class ToTheMoonPingNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ToTheMoonQueryPathReq(betterproto.Message):
    query_type: "ToTheMoonQueryPathReqOptionType" = betterproto.enum_field(5)
    unk3300_bblmbiliogp: bool = betterproto.bool_field(8)
    filter_type: "ToTheMoonQueryPathReqFilterType" = betterproto.enum_field(13)
    query_id: int = betterproto.int32_field(2)
    astar_method: "ToTheMoonQueryPathReqAStarMethod" = betterproto.enum_field(12)
    source_pos: "Vector" = betterproto.message_field(11)
    destination_pos: "Vector" = betterproto.message_field(3)
    fuzzy_range: int = betterproto.int32_field(7)
    unk3300_ofgonamnijg: bool = betterproto.bool_field(6)
    scene_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ToTheMoonQueryPathRsp(betterproto.Message):
    index: List[int] = betterproto.int64_field(5)
    corners: List["Vector"] = betterproto.message_field(3)
    query_id: int = betterproto.int32_field(15)
    retcode: int = betterproto.int32_field(10)
    level: List[int] = betterproto.int32_field(8)
    query_status: "ToTheMoonQueryPathRspPathStatusType" = betterproto.enum_field(14)


@dataclass(eq=False, repr=False)
class ToTheMoonRemoveObstacleReq(betterproto.Message):
    handle: int = betterproto.int32_field(15)
    scene_id: int = betterproto.uint32_field(7)
    query_id: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class ToTheMoonRemoveObstacleRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(14)
    dynamic_nodes: "DynamicNodes" = betterproto.message_field(12)
    query_id: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class TowerAllDataReq(betterproto.Message):
    is_interact: bool = betterproto.bool_field(15)


@dataclass(eq=False, repr=False)
class TowerTeam(betterproto.Message):
    avatar_guid_list: List[int] = betterproto.uint64_field(5)
    tower_team_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class TowerCurLevelRecord(betterproto.Message):
    buff_id_list: List[int] = betterproto.uint32_field(14)
    is_upper_part: bool = betterproto.bool_field(4)
    unk3300_kpgbpdijjjj: int = betterproto.uint32_field(6)
    is_empty: bool = betterproto.bool_field(1)
    tower_team_list: List["TowerTeam"] = betterproto.message_field(8)
    unk3300_pmhclpfphbj: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class TowerLevelRecord(betterproto.Message):
    satisfied_cond_list: List[int] = betterproto.uint32_field(13)
    level_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class TowerFloorRecord(betterproto.Message):
    passed_level_map: Dict[int, int] = betterproto.map_field(
        11, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    passed_level_record_list: List["TowerLevelRecord"] = betterproto.message_field(2)
    floor_id: int = betterproto.uint32_field(12)
    floor_star_reward_progress: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class TowerMonthlyBrief(betterproto.Message):
    unk3300_aifhphdgeie: int = betterproto.uint32_field(3)
    unk3300_cpnolkakhej: int = betterproto.uint32_field(6)
    unk3300_lemomflhbla: int = betterproto.uint32_field(9)
    tower_schedule_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class TowerAllDataRsp(betterproto.Message):
    unk3300_hcdfjbhmhhf: int = betterproto.uint32_field(6)
    next_schedule_change_time: int = betterproto.uint32_field(8)
    is_first_interact: bool = betterproto.bool_field(5)
    tower_schedule_id: int = betterproto.uint32_field(1)
    unk3300_jbackendhdg: int = betterproto.uint32_field(10)
    schedule_start_time: int = betterproto.uint32_field(610)
    retcode: int = betterproto.int32_field(11)
    unk3300_ohchcjgjidk: int = betterproto.uint32_field(4)
    unk3300_bbhkbddfpfe: int = betterproto.uint32_field(2)
    last_schedule_monthly_brief: "TowerMonthlyBrief" = betterproto.message_field(1245)
    cur_level_record: "TowerCurLevelRecord" = betterproto.message_field(12)
    tower_floor_record_list: List["TowerFloorRecord"] = betterproto.message_field(13)
    monthly_brief: "TowerMonthlyBrief" = betterproto.message_field(9)
    unk3300_lekodcfpinj: int = betterproto.uint32_field(7)
    unk3300_pjpeejacfjh: Dict[int, int] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    is_finished_entrance_floor: bool = betterproto.bool_field(15)
    unk3300_gninclbmmdj: Dict[int, int] = betterproto.map_field(
        14, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class TowerBriefDataNotify(betterproto.Message):
    last_level_index: int = betterproto.uint32_field(6)
    next_schedule_change_time: int = betterproto.uint32_field(9)
    is_finished_entrance_floor: bool = betterproto.bool_field(14)
    last_floor_index: int = betterproto.uint32_field(1)
    tower_schedule_id: int = betterproto.uint32_field(11)
    schedule_start_time: int = betterproto.uint32_field(8)
    total_star_num: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class TowerBuffSelectReq(betterproto.Message):
    tower_buff_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class TowerBuffSelectRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)
    tower_buff_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class TowerCurLevelRecordChangeNotify(betterproto.Message):
    cur_level_record: "TowerCurLevelRecord" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TowerDailyRewardProgressChangeNotify(betterproto.Message):
    unk3300_ohchcjgjidk: int = betterproto.uint32_field(8)
    unk3300_jbackendhdg: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class TowerEnterLevelReq(betterproto.Message):
    enter_point_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class TowerEnterLevelRsp(betterproto.Message):
    tower_buff_id_list: List[int] = betterproto.uint32_field(5)
    level_index: int = betterproto.uint32_field(3)
    floor_id: int = betterproto.uint32_field(11)
    retcode: int = betterproto.int32_field(14)


@dataclass(eq=False, repr=False)
class TowerFightRecordPair(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(12)
    data: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TowerFloorRecordChangeNotify(betterproto.Message):
    is_finished_entrance_floor: bool = betterproto.bool_field(4)
    tower_floor_record_list: List["TowerFloorRecord"] = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class TowerGetFloorStarRewardReq(betterproto.Message):
    floor_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class TowerGetFloorStarRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(10)
    floor_id: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class TowerLevelStarCondData(betterproto.Message):
    unk3300_kbcfdfoajmm: bool = betterproto.bool_field(14)
    unk3300_cpbcnackaak: bool = betterproto.bool_field(5)
    unk3300_jgolbfmjbcl: int = betterproto.uint32_field(11)
    unk3300_mghndjaacme: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class TowerLevelStarCondNotify(betterproto.Message):
    cond_data_list: List["TowerLevelStarCondData"] = betterproto.message_field(1)
    level_index: int = betterproto.uint32_field(8)
    floor_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class TowerMiddleLevelChangeTeamNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class TowerMonthlyCombatRecord(betterproto.Message):
    most_reveal_avatar_list: List["TowerFightRecordPair"] = betterproto.message_field(3)
    unk3300_eigegogfjnd: "TowerFightRecordPair" = betterproto.message_field(8)
    unk3300_oallhjpboho: "TowerFightRecordPair" = betterproto.message_field(2)
    unk3300_kmclphedncj: "TowerFightRecordPair" = betterproto.message_field(14)
    unk3300_kikpmnpkldg: "TowerFightRecordPair" = betterproto.message_field(7)
    unk3300_ccfhofciepf: "TowerFightRecordPair" = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class TowerMonthlyDetail(betterproto.Message):
    monthly_combat_record: "TowerMonthlyCombatRecord" = betterproto.message_field(15)
    monthly_brief: "TowerMonthlyBrief" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class TowerRecordHandbookReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class TowerRecordHandbookRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)
    monthly_detail_list: List["TowerMonthlyDetail"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class TowerSurrenderReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class TowerSurrenderRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(14)


@dataclass(eq=False, repr=False)
class TowerTeamSelectReq(betterproto.Message):
    tower_team_list: List["TowerTeam"] = betterproto.message_field(5)
    floor_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class TowerTeamSelectRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class TreasureMapBonusChallengeNotify(betterproto.Message):
    info: "TreasureMapBonusChallengeInfo" = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class TreasureMapCurrencyNotify(betterproto.Message):
    currency_num: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class TreasureMapDetectorData(betterproto.Message):
    region_id: int = betterproto.uint32_field(1)
    is_region_detected: bool = betterproto.bool_field(11)
    radius: int = betterproto.uint32_field(2)
    spot_list: List["Vector"] = betterproto.message_field(7)
    center_pos: "Vector" = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class TreasureMapDetectorDataNotify(betterproto.Message):
    data: "TreasureMapDetectorData" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class TreasureMapGuideTaskDoneNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class TreasureMapHostInfoNotify(betterproto.Message):
    mp_challenge_region_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TreasureMapMpChallengeNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class TreasureMapPreTaskDoneNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class TreasureMapRegionActiveNotify(betterproto.Message):
    active_region_index: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class TreasureMapRegionInfoNotify(betterproto.Message):
    region_info: "TreasureMapRegionInfo" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class TreasureSeelieCollectOrbsNotify(betterproto.Message):
    current_num: int = betterproto.uint32_field(12)
    total_num: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TrialAvatarInDungeonIndexNotify(betterproto.Message):
    trial_avatar_index_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class TriggerCreateGadgetToEquipPartNotify(betterproto.Message):
    gadget_entity_id: int = betterproto.uint32_field(1)
    equip_part: str = betterproto.string_field(12)
    entity_id: int = betterproto.uint32_field(6)
    gadget_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class TriggerRoguelikeCurseNotify(betterproto.Message):
    unk3300_polienbcnlf: int = betterproto.uint32_field(7)
    unk3300_ljhjibdpbbc: int = betterproto.uint32_field(10)
    is_trigger_curse: bool = betterproto.bool_field(11)
    effect_param_list: List[int] = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class TriggerRoguelikeRuneReq(betterproto.Message):
    rune_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class TriggerRoguelikeRuneRsp(betterproto.Message):
    available_count: int = betterproto.uint32_field(15)
    rune_id: int = betterproto.uint32_field(10)
    retcode: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class TryCustomDungeonReq(betterproto.Message):
    room_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class TryCustomDungeonRsp(betterproto.Message):
    room_id: int = betterproto.uint32_field(4)
    retcode: int = betterproto.int32_field(10)


@dataclass(eq=False, repr=False)
class TryEnterHomeReq(betterproto.Message):
    is_transfer_to_safe_point: bool = betterproto.bool_field(13)
    target_point: int = betterproto.uint32_field(10)
    target_uid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TryEnterHomeRsp(betterproto.Message):
    param_list: List[int] = betterproto.uint32_field(11)
    target_uid: int = betterproto.uint32_field(2)
    retcode: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class TryEnterNextRogueDiaryDungeonReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class TryEnterNextRogueDiaryDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class TryInterruptRogueDiaryDungeonReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class TryInterruptRogueDiaryDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class UgcNotify(betterproto.Message):
    unk3300_ibldingjjfi: bool = betterproto.bool_field(8)
    is_ugc_feature_closed: bool = betterproto.bool_field(6)
    unk3300_kpabjpmlhcd: bool = betterproto.bool_field(9)


@dataclass(eq=False, repr=False)
class UnfreezeGroupLimitNotify(betterproto.Message):
    point_id: int = betterproto.uint32_field(15)
    scene_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class UnionCmd(betterproto.Message):
    body: bytes = betterproto.bytes_field(3)
    message_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class UnionCmdNotify(betterproto.Message):
    cmd_list: List["UnionCmd"] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class Unk3300Dgbncdeiifc(betterproto.Message):
    monster_id_list: List[int] = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class Unk3300Dmobaabgobf(betterproto.Message):
    is_success: bool = betterproto.bool_field(6)
    unk3300_nkhmmpmeilj: str = betterproto.string_field(7)
    unk3300_jockigcengi: str = betterproto.string_field(13)


@dataclass(eq=False, repr=False)
class Unk3300Icagmocoalo(betterproto.Message):
    match_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class Unk3300Loingbjljem(betterproto.Message):
    unk3300_nofbejlnmla: "Unk3300LoingbjljemUnk3300Kdbjpjadjkf" = (
        betterproto.enum_field(4)
    )


@dataclass(eq=False, repr=False)
class UnlockAvatarTalentReq(betterproto.Message):
    talent_id: int = betterproto.uint32_field(11)
    avatar_guid: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class UnlockAvatarTalentRsp(betterproto.Message):
    talent_id: int = betterproto.uint32_field(14)
    avatar_guid: int = betterproto.uint64_field(1)
    retcode: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class UnlockCoopChapterReq(betterproto.Message):
    chapter_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class UnlockCoopChapterRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(4)
    chapter_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class UnlockedFurnitureFormulaDataNotify(betterproto.Message):
    is_all: bool = betterproto.bool_field(4)
    furniture_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class UnlockedFurnitureSuiteDataNotify(betterproto.Message):
    is_all: bool = betterproto.bool_field(1)
    furniture_suite_id_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class UnlockNameCardNotify(betterproto.Message):
    name_card_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class UnlockPersonalLineReq(betterproto.Message):
    personal_line_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class UnlockPersonalLineRsp(betterproto.Message):
    personal_line_id: int = betterproto.uint32_field(4)
    retcode: int = betterproto.int32_field(12)
    level: int = betterproto.uint32_field(10, group="param")
    chapter_id: int = betterproto.uint32_field(3, group="param")


@dataclass(eq=False, repr=False)
class UnlockTransPointReq(betterproto.Message):
    scene_id: int = betterproto.uint32_field(10)
    point_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class UnlockTransPointRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class UnmarkEntityInMinMapNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class UpdateAbilityCreatedMovingPlatformNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    op_type: "UpdateAbilityCreatedMovingPlatformNotifyOpType" = betterproto.enum_field(
        15
    )


@dataclass(eq=False, repr=False)
class UpdatePlayerShowAvatarListReq(betterproto.Message):
    show_avatar_id_list: List[int] = betterproto.uint32_field(10)
    is_show_avatar: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class UpdatePlayerShowAvatarListRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)
    show_avatar_id_list: List[int] = betterproto.uint32_field(11)
    is_show_avatar: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class UpdatePlayerShowNameCardListReq(betterproto.Message):
    show_name_card_id_list: List[int] = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class UpdatePlayerShowNameCardListRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    show_name_card_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class UpdatePs4BlockListReq(betterproto.Message):
    psn_id_list: List[str] = betterproto.string_field(10)


@dataclass(eq=False, repr=False)
class UpdatePs4BlockListRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class UpdatePs4FriendListNotify(betterproto.Message):
    psn_id_list: List[str] = betterproto.string_field(14)


@dataclass(eq=False, repr=False)
class UpdatePs4FriendListReq(betterproto.Message):
    psn_id_list: List[str] = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class UpdatePs4FriendListRsp(betterproto.Message):
    psn_id_list: List[str] = betterproto.string_field(14)
    retcode: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class UpdateRedPointNotify(betterproto.Message):
    red_point_list: List["RedPointData"] = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class UpdateReunionWatcherNotify(betterproto.Message):
    watcher_info: "ReunionWatcherInfo" = betterproto.message_field(12)
    mission_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class UpdateSalvageBundleMarkReq(betterproto.Message):
    challenge_type: int = betterproto.uint32_field(6)
    stage_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class UpdateSalvageBundleMarkRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(2)
    stage_id: int = betterproto.uint32_field(4)
    challenge_type: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class UpgradeRoguelikeShikigamiReq(betterproto.Message):
    shikigami_group_id: int = betterproto.uint32_field(15)
    upgrade_level: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class UpgradeRoguelikeShikigamiRsp(betterproto.Message):
    shikigami_group_id: int = betterproto.uint32_field(8)
    retcode: int = betterproto.int32_field(10)
    cur_level: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class UseItemReq(betterproto.Message):
    count: int = betterproto.uint32_field(14)
    guid: int = betterproto.uint64_field(1)
    target_guid: int = betterproto.uint64_field(2)
    option_idx: int = betterproto.uint32_field(8)
    is_enter_mp_dungeon_team: bool = betterproto.bool_field(9)


@dataclass(eq=False, repr=False)
class UseItemRsp(betterproto.Message):
    option_idx: int = betterproto.uint32_field(9)
    item_id: int = betterproto.uint32_field(13)
    retcode: int = betterproto.int32_field(1)
    guid: int = betterproto.uint64_field(14)
    target_guid: int = betterproto.uint64_field(10)


@dataclass(eq=False, repr=False)
class UseMiracleRingReq(betterproto.Message):
    rot: "Vector" = betterproto.message_field(14)
    pos: "Vector" = betterproto.message_field(13)
    miracle_ring_op_type: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class UseMiracleRingRsp(betterproto.Message):
    miracle_ring_op_type: int = betterproto.uint32_field(14)
    retcode: int = betterproto.int32_field(10)


@dataclass(eq=False, repr=False)
class UseWidgetCreateGadgetReq(betterproto.Message):
    rot: "Vector" = betterproto.message_field(12)
    pos: "Vector" = betterproto.message_field(7)
    material_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class UseWidgetCreateGadgetRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(10)
    material_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class UseWidgetRetractGadgetReq(betterproto.Message):
    entity_id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class UseWidgetRetractGadgetRsp(betterproto.Message):
    entity_id: int = betterproto.uint32_field(4)
    retcode: int = betterproto.int32_field(14)


@dataclass(eq=False, repr=False)
class VehicleInteractReq(betterproto.Message):
    interact_type: "VehicleInteractType" = betterproto.enum_field(3)
    entity_id: int = betterproto.uint32_field(11)
    pos: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class VehicleInteractRsp(betterproto.Message):
    entity_id: int = betterproto.uint32_field(4)
    member: "VehicleMember" = betterproto.message_field(11)
    retcode: int = betterproto.int32_field(6)
    interact_type: "VehicleInteractType" = betterproto.enum_field(7)


@dataclass(eq=False, repr=False)
class VehicleStaminaNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(12)
    cur_stamina: float = betterproto.float_field(9)


@dataclass(eq=False, repr=False)
class ViewCodexReq(betterproto.Message):
    type_data_list: List["CodexTypeData"] = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class ViewCodexRsp(betterproto.Message):
    type_data_list: List["CodexTypeData"] = betterproto.message_field(12)
    unk3300_idnolalhffa: List[int] = betterproto.uint32_field(3)
    unk3300_cbgdaaobgnb: List[int] = betterproto.uint32_field(10)
    retcode: int = betterproto.int32_field(11)
    recent_viewed_pushtips_list: List[int] = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class ViewLanternProjectionLevelTipsReq(betterproto.Message):
    level_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ViewLanternProjectionLevelTipsRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class ViewLanternProjectionTipsReq(betterproto.Message):
    input_type: "ClientInputType" = betterproto.enum_field(14)
    is_input_tips: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class ViewLanternProjectionTipsRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class VintageCampGroupBundleRegisterNotify(betterproto.Message):
    group_bundle_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class VintageCampStageFinishNotify(betterproto.Message):
    stage_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class VintageDecorateBoothReq(betterproto.Message):
    entity_id: int = betterproto.uint32_field(13)
    combination_info: "CustomGadgetTreeInfo" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class VintageDecorateBoothRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class VintageHuntingStartGalleryReq(betterproto.Message):
    stage_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class VintageHuntingStartGalleryRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class VintageMarketDeliverItemReq(betterproto.Message):
    deliver_item_list: List["ItemParam"] = betterproto.message_field(12)
    trader_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class VintageMarketDeliverItemRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(9)
    trader_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class VintageMarketDividendFinishNotify(betterproto.Message):
    coin_a: int = betterproto.uint32_field(2)
    coin_c: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class VintageMarketStoreOpInfo(betterproto.Message):
    help_uid: int = betterproto.uint32_field(11)
    help_skill_id: int = betterproto.uint32_field(10)
    store_id: int = betterproto.uint32_field(8)
    add_attr_list: List[int] = betterproto.uint32_field(12)
    strategy_list: List[int] = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class VintageMarketFinishStorePlayReq(betterproto.Message):
    store_round: int = betterproto.uint32_field(12)
    store_op_list: List["VintageMarketStoreOpInfo"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class VintageMarketFinishStorePlayRsp(betterproto.Message):
    store_round: int = betterproto.uint32_field(10)
    unk3300_hjihioigapp: List[int] = betterproto.uint32_field(15)
    retcode: int = betterproto.int32_field(9)
    store_income_map: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    unk3300_djilelfhfhj: int = betterproto.uint32_field(6)
    unk3300_ocimkepjool: List[int] = betterproto.uint32_field(3)
    unk3300_gcdnopjeibg: int = betterproto.uint32_field(4)
    unk3300_bdaionepkik: List[int] = betterproto.uint32_field(1)
    unk3300_dgecjokmdgn: int = betterproto.uint32_field(11)
    unk3300_dlnfcbpdbbh: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class VintageMarketNpcEventFinishNotify(betterproto.Message):
    coin_a: int = betterproto.uint32_field(3)
    coin_c: int = betterproto.uint32_field(9)
    unlock_strategy_list: List[int] = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class VintageMarketStartStorePlayReq(betterproto.Message):
    store_round: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class VintageMarketStartStorePlayRsp(betterproto.Message):
    store_round: int = betterproto.uint32_field(10)
    unk3300_lccnekgonfg: int = betterproto.uint32_field(9)
    retcode: int = betterproto.int32_field(1)
    unk3300_adjkiijfnme: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class VintageMarketStoreChooseStrategyReq(betterproto.Message):
    store_op_list: List["VintageMarketStoreOpInfo"] = betterproto.message_field(5)
    strategy_list: List[int] = betterproto.uint32_field(15)
    store_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class VintageMarketStoreChooseStrategyRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(14)
    store_id: int = betterproto.uint32_field(11)
    strategy_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class VintageMarketStoreUnlockSlotReq(betterproto.Message):
    store_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class VintageMarketStoreUnlockSlotRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(15)
    store_id: int = betterproto.uint32_field(14)
    slot_count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class VintageMarketStoreViewStrategyReq(betterproto.Message):
    strategy_id: int = betterproto.uint32_field(9)
    strategy_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class VintageMarketStoreViewStrategyRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(9)
    strategy_list: List[int] = betterproto.uint32_field(6)
    strategy_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class VintagePresentFinishNoify(betterproto.Message):
    present_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class VintagePresentFinishNotify(betterproto.Message):
    present_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class WatcherAllDataNotify(betterproto.Message):
    watcher_list: List[int] = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class WatcherChangeNotify(betterproto.Message):
    unk3300_eldnonocfmm: List[int] = betterproto.uint32_field(10)
    unk3300_fdmjacfmolg: List[int] = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class WatcherEventNotify(betterproto.Message):
    add_progress: int = betterproto.uint32_field(2)
    watcher_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class WatcherEventStageNotify(betterproto.Message):
    add_progress: int = betterproto.uint32_field(2)
    watcher_id: int = betterproto.uint32_field(15)
    stage: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class WatcherEventTypeNotify(betterproto.Message):
    param_list: List[int] = betterproto.uint32_field(4)
    add_progress: int = betterproto.uint32_field(13)
    watcher_trigger_type: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class WaterSpritePhaseFinishNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class WeaponAwakenReq(betterproto.Message):
    affix_level_map: Dict[int, int] = betterproto.map_field(
        13, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    target_weapon_guid: int = betterproto.uint64_field(5)
    item_guid: int = betterproto.uint64_field(6)


@dataclass(eq=False, repr=False)
class WeaponAwakenRsp(betterproto.Message):
    unk3300_ikjalgglhom: Dict[int, int] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    avatar_guid: int = betterproto.uint64_field(8)
    retcode: int = betterproto.int32_field(9)
    target_weapon_guid: int = betterproto.uint64_field(14)
    unk3300_ammamkjdemg: Dict[int, int] = betterproto.map_field(
        15, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    target_weapon_awaken_level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class WeaponPromoteReq(betterproto.Message):
    target_weapon_guid: int = betterproto.uint64_field(14)


@dataclass(eq=False, repr=False)
class WeaponPromoteRsp(betterproto.Message):
    unk3300_ggfcipakkdp: int = betterproto.uint32_field(4)
    target_weapon_guid: int = betterproto.uint64_field(11)
    unk3300_mbebiacjnbb: int = betterproto.uint32_field(5)
    retcode: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class WeaponUpgradeReq(betterproto.Message):
    item_param_list: List["ItemParam"] = betterproto.message_field(2)
    food_weapon_guid_list: List[int] = betterproto.uint64_field(14)
    target_weapon_guid: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class WeaponUpgradeRsp(betterproto.Message):
    old_level: int = betterproto.uint32_field(14)
    target_weapon_guid: int = betterproto.uint64_field(3)
    cur_level: int = betterproto.uint32_field(6)
    item_param_list: List["ItemParam"] = betterproto.message_field(8)
    retcode: int = betterproto.int32_field(10)


@dataclass(eq=False, repr=False)
class WearEquipReq(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(3)
    equip_guid: int = betterproto.uint64_field(13)


@dataclass(eq=False, repr=False)
class WearEquipRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(3)
    equip_guid: int = betterproto.uint64_field(1)
    avatar_guid: int = betterproto.uint64_field(14)


@dataclass(eq=False, repr=False)
class WidgetActiveChangeNotify(betterproto.Message):
    widget_data_list: List["WidgetSlotData"] = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class WidgetCaptureAnimalReq(betterproto.Message):
    entity_id: int = betterproto.uint32_field(6)
    material_id: int = betterproto.uint32_field(3)
    pos: "Vector" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WidgetCaptureAnimalRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(4)
    material_id: int = betterproto.uint32_field(7)
    entity_id: int = betterproto.uint32_field(11)
    pos: "Vector" = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class WidgetCoolDownNotify(betterproto.Message):
    normal_cool_down_data_list: List["WidgetCoolDownData"] = betterproto.message_field(
        2
    )
    group_cool_down_data_list: List["WidgetCoolDownData"] = betterproto.message_field(
        14
    )


@dataclass(eq=False, repr=False)
class WidgetDoBagReq(betterproto.Message):
    material_id: int = betterproto.uint32_field(11)
    location_info: "WidgetCreateLocationInfo" = betterproto.message_field(
        434, group="op_info"
    )
    widget_creator_info: "WidgetCreatorInfo" = betterproto.message_field(
        1338, group="op_info"
    )


@dataclass(eq=False, repr=False)
class WidgetDoBagRsp(betterproto.Message):
    material_id: int = betterproto.uint32_field(6)
    retcode: int = betterproto.int32_field(14)


@dataclass(eq=False, repr=False)
class WidgetGadgetData(betterproto.Message):
    gadget_entity_id_list: List[int] = betterproto.uint32_field(6)
    gadget_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class WidgetGadgetAllDataNotify(betterproto.Message):
    widget_gadget_data: List["WidgetGadgetData"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WidgetGadgetDataNotify(betterproto.Message):
    widget_gadget_data: "WidgetGadgetData" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class WidgetGadgetDestroyNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class WidgetQuickHitTreeReq(betterproto.Message):
    hit_tree_info_list: List["HitTreeInfo"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class WidgetQuickHitTreeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class WidgetReportReq(betterproto.Message):
    weather_wizard_shield_value: int = betterproto.uint32_field(8)
    unk3300_apdfkknkijj: bool = betterproto.bool_field(7)
    unk3300_bcaibkdihhf: bool = betterproto.bool_field(6)
    material_id: int = betterproto.uint32_field(2)
    unk3300_efbclddkmim: bool = betterproto.bool_field(14)


@dataclass(eq=False, repr=False)
class WidgetReportRsp(betterproto.Message):
    material_id: int = betterproto.uint32_field(4)
    retcode: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class WidgetSlotChangeNotify(betterproto.Message):
    op: "WidgetSlotOp" = betterproto.enum_field(5)
    slot: "WidgetSlotData" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WidgetUpdateExtraCdReq(betterproto.Message):
    material_id: int = betterproto.uint32_field(6)
    extra_cd_type: "WidgetExtraCdType" = betterproto.enum_field(7)
    cd_group: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class WidgetUpdateExtraCdRsp(betterproto.Message):
    cool_data: "WidgetCoolDownData" = betterproto.message_field(10)
    extra_cd_type: "WidgetExtraCdType" = betterproto.enum_field(5)
    retcode: int = betterproto.int32_field(13)
    cd_group: int = betterproto.uint32_field(11)
    material_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class WidgetUseAttachAbilityGroupChangeNotify(betterproto.Message):
    material_id: int = betterproto.uint32_field(15)
    is_attach: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class WidgetWeatherWizardDataNotify(betterproto.Message):
    shield_value: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class WindFieldGalleryChallengeInfoNotify(betterproto.Message):
    unk3300_ffodakmkgek: int = betterproto.uint32_field(13)
    is_start: bool = betterproto.bool_field(2)
    unk3300_glnhbjjjink: int = betterproto.uint32_field(5)
    unk3300_nbibkfkocfk: int = betterproto.uint32_field(3)
    is_success: bool = betterproto.bool_field(7)
    unk3300_gnjkocljfnm: int = betterproto.uint32_field(8)
    unk3300_mmonpdmiebn: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class WindFieldGalleryInfoNotify(betterproto.Message):
    unk3300_gnjkocljfnm: int = betterproto.uint32_field(6)
    unk3300_nbibkfkocfk: int = betterproto.uint32_field(15)
    unk3300_ojhjpbcaona: int = betterproto.uint32_field(7)
    unk3300_ekmhmhjdhil: int = betterproto.uint32_field(14)
    unk3300_mmonpdmiebn: int = betterproto.uint32_field(13)
    unk3300_ffodakmkgek: int = betterproto.uint32_field(9)
    unk3300_gnkcfhmdohj: int = betterproto.uint32_field(4)
    unk3300_glnhbjjjink: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class WindFieldRestartDungeonReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class WindFieldRestartDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class WindSeedClientNotify(betterproto.Message):
    refresh_notify: "WindSeedClientNotifyRefreshNotify" = betterproto.message_field(
        14, group="notify"
    )
    add_wind_bullet_notify: "WindSeedClientNotifyAddWindBulletNotify" = (
        betterproto.message_field(7, group="notify")
    )
    area_notify: "WindSeedClientNotifyAreaNotify" = betterproto.message_field(
        5, group="notify"
    )


@dataclass(eq=False, repr=False)
class WindSeedClientNotifyRefreshNotify(betterproto.Message):
    refresh_num: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class WindSeedClientNotifyAddWindBulletNotify(betterproto.Message):
    seed_pos: "Vector" = betterproto.message_field(14)
    unk3300_ckikkcafjbc: int = betterproto.uint32_field(7)
    unk3300_mpdfapbdjah: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class WindSeedClientNotifyAreaNotify(betterproto.Message):
    area_id: int = betterproto.uint32_field(12)
    area_code: bytes = betterproto.bytes_field(10)
    area_type: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class WinterCampAcceptAllGiveItemReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class WinterCampAcceptItemResultInfo(betterproto.Message):
    unk3300_ilellfnpdfj: List["ItemParam"] = betterproto.message_field(15)
    unk3300_jhkomcfhaog: List["ItemParam"] = betterproto.message_field(13)
    uid: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class WinterCampAcceptAllGiveItemRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(11)
    accept_item_result_info: List[
        "WinterCampAcceptItemResultInfo"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WinterCampAcceptGiveItemReq(betterproto.Message):
    uid: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class WinterCampAcceptGiveItemRsp(betterproto.Message):
    accept_item_result_info: "WinterCampAcceptItemResultInfo" = (
        betterproto.message_field(15)
    )
    retcode: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class WinterCampEditSnowmanCombinationReq(betterproto.Message):
    entity_id: int = betterproto.uint32_field(6)
    combination_info: "CustomGadgetTreeInfo" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class WinterCampEditSnowmanCombinationRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class WinterCampFriendWishData(betterproto.Message):
    item_id_list: List[int] = betterproto.uint32_field(9)
    nickname: str = betterproto.string_field(15)
    uid: int = betterproto.uint32_field(6)
    profile_picture: "ProfilePicture" = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class WinterCampGetCanGiveFriendItemReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class WinterCampGetCanGiveFriendItemRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(12)
    item_list: List["ItemParam"] = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class WinterCampGetFriendWishListReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class WinterCampGetFriendWishListRsp(betterproto.Message):
    wish_data_list: List["WinterCampFriendWishData"] = betterproto.message_field(3)
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class WinterCampGetRecvItemListReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class WinterCampRecvItemData(betterproto.Message):
    nickname: str = betterproto.string_field(8)
    uid: int = betterproto.uint32_field(6)
    profile_picture: "ProfilePicture" = betterproto.message_field(1)
    item_list: List["ItemParam"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class WinterCampGetRecvItemListRsp(betterproto.Message):
    recv_item_data_list: List["WinterCampRecvItemData"] = betterproto.message_field(6)
    retcode: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class WinterCampGiveFriendItemReq(betterproto.Message):
    uid: int = betterproto.uint32_field(11)
    item_list: List["ItemParam"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class WinterCampGiveFriendItemRsp(betterproto.Message):
    limit_item_id_list: List[int] = betterproto.uint32_field(3)
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class WinterCampRaceScoreNotify(betterproto.Message):
    max_score: int = betterproto.uint32_field(9)
    id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class WinterCampRecvItemNotify(betterproto.Message):
    recv_item_data: "WinterCampRecvItemData" = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class WinterCampSetWishListReq(betterproto.Message):
    item_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class WinterCampSetWishListRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(10)
    item_id_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class WinterCampStageInfoChangeNotify(betterproto.Message):
    explore_info: "WinterCampStageInfo" = betterproto.message_field(5)
    battle_info: "WinterCampStageInfo" = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class WinterCampTakeBattleRewardReq(betterproto.Message):
    id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class WinterCampTakeBattleRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(6)
    id: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class WinterCampTakeExploreRewardReq(betterproto.Message):
    id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class WinterCampTakeExploreRewardRsp(betterproto.Message):
    id: int = betterproto.uint32_field(8)
    retcode: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class WinterCampTriathlonRestartReq(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class WinterCampTriathlonRestartRsp(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(9)
    retcode: int = betterproto.int32_field(10)


@dataclass(eq=False, repr=False)
class WinterCampTriathlonSettleNotify(betterproto.Message):
    unk3300_acdombhmnjg: int = betterproto.uint32_field(11)
    is_success: bool = betterproto.bool_field(10)
    score: int = betterproto.uint32_field(15)
    is_new_record: bool = betterproto.bool_field(7)
    gallery_id: int = betterproto.uint32_field(14)
    unk3300_oefogonenfn: int = betterproto.uint32_field(12)
    remain_time: int = betterproto.uint32_field(6)
    unk3300_emnkjgkncmp: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class WorktopOptionNotify(betterproto.Message):
    option_list: List[int] = betterproto.uint32_field(10)
    gadget_entity_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class WorldRoutineInfo(betterproto.Message):
    finish_progress: int = betterproto.uint32_field(1)
    routine_id: int = betterproto.uint32_field(10)
    progress: int = betterproto.uint32_field(7)
    is_finished: bool = betterproto.bool_field(15)


@dataclass(eq=False, repr=False)
class WorldRoutineTypeInfo(betterproto.Message):
    next_refresh_time: int = betterproto.uint32_field(13)
    world_routine_info_list: List["WorldRoutineInfo"] = betterproto.message_field(10)
    routine_type: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class WorldAllRoutineTypeNotify(betterproto.Message):
    world_routine_type_list: List["WorldRoutineTypeInfo"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class WorldChestOpenNotify(betterproto.Message):
    scene_id: int = betterproto.uint32_field(9)
    group_id: int = betterproto.uint32_field(5)
    config_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class WorldDataNotify(betterproto.Message):
    world_prop_map: Dict[int, "PropValue"] = betterproto.map_field(
        6, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class WorldOwnerBlossomBriefInfoNotify(betterproto.Message):
    brief_info_list: List["BlossomBriefInfo"] = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class WorldOwnerBlossomScheduleInfoNotify(betterproto.Message):
    schedule_info: "BlossomScheduleInfo" = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class WorldOwnerDailyTaskNotify(betterproto.Message):
    unk3300_fjojfpppofp: int = betterproto.uint32_field(4)
    task_list: List["DailyTaskInfo"] = betterproto.message_field(2)
    unk3300_nadioijgphe: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class WorldPlayerDieNotify(betterproto.Message):
    murderer_entity_id: int = betterproto.uint32_field(3)
    die_type: "PlayerDieType" = betterproto.enum_field(13)
    monster_id: int = betterproto.uint32_field(6, group="entity")
    gadget_id: int = betterproto.uint32_field(12, group="entity")


@dataclass(eq=False, repr=False)
class WorldPlayerInfoNotify(betterproto.Message):
    player_widget_info_list: List["PlayerWidgetInfo"] = betterproto.message_field(7)
    player_uid_list: List[int] = betterproto.uint32_field(12)
    player_info_list: List["OnlinePlayerInfo"] = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class WorldPlayerLocationNotify(betterproto.Message):
    player_world_loc_list: List["PlayerWorldLocationInfo"] = betterproto.message_field(
        5
    )
    player_loc_list: List["PlayerLocationInfo"] = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class WorldPlayerReviveReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class WorldPlayerReviveRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class WorldPlayerRttNotify(betterproto.Message):
    player_rtt_list: List["PlayerRttInfo"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class WorldRoutineChangeNotify(betterproto.Message):
    routine_info: "WorldRoutineInfo" = betterproto.message_field(14)
    routine_type: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class WorldRoutineTypeCloseNotify(betterproto.Message):
    routine_type: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class WorldRoutineTypeRefreshNotify(betterproto.Message):
    world_routine_type: "WorldRoutineTypeInfo" = betterproto.message_field(1)
